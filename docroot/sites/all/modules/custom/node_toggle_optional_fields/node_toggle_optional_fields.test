<?php

class NodeToggleOptionalFieldsTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Node Toggle Optional Fields',
      'description' => 'Test the showing and hiding of optional fields on node forms.',
      'group' => 'Node Toggle Optional Fields',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('node_toggle_optional_fields');

    $this->drupalLogin(
      $this->drupalCreateUser(array(
        'create article content',
        'create page content'
      ))
    );

    // Enable toggling on article node forms.
    variable_set('node_toggle_optional_fields_node_types', array('article'));
  }

  public function testFieldsHiddenByDefault() {
    variable_set('node_toggle_optional_fields_hide_by_default', TRUE);

    $this->drupalGet('node/add/article');

    $this->assertShowOptionalFieldsButtonFound();
    $this->assertHideOptionalFieldsButtonNotFound();
    $this->assertTagsFieldHidden();

    $this->drupalPost('node/add/article', array(), t('Show optional fields'));

    $this->assertHideOptionalFieldsButtonFound();
    $this->assertShowOptionalFieldsButtonNotFound();
    $this->assertTagsFieldNotHidden();
  }

  public function testFieldsVisibleByDefault() {
    variable_set('node_toggle_optional_fields_hide_by_default', FALSE);

    $this->drupalGet('node/add/article');

    $this->assertHideOptionalFieldsButtonFound();
    $this->assertShowOptionalFieldsButtonNotFound();
    $this->assertTagsFieldNotHidden();

    $this->drupalPost('node/add/article', array(), t('Hide optional fields'));

    $this->assertShowOptionalFieldsButtonFound();
    $this->assertHideOptionalFieldsButtonNotFound();
    $this->assertTagsFieldHidden();
  }

  public function testDisabledContentType() {
    // Ensure that "page" is not a node type to toggle fields on.
    $this->assertFalse(in_array('page', variable_get('node_toggle_optional_fields_node_types', array())));

    $this->drupalGet('node/add/page');

    // Ensure that neither toggle button is shown.
    $this->assertHideOptionalFieldsButtonNotFound();
    $this->assertShowOptionalFieldsButtonNotFound();
  }

  private function assertHideOptionalFieldsButtonFound() {
    $this->assertRaw(t('Hide optional fields'), t('Hide optional fields button found.'));
  }

  private function assertHideOptionalFieldsButtonNotFound() {
    $this->assertNoRaw(t('Hide optional fields'), t('Hide optional fields button not found.'));
  }

  private function assertShowOptionalFieldsButtonFound() {
    $this->assertRaw(t('Show optional fields'), t('Show optional fields button found.'));
  }

  private function assertShowOptionalFieldsButtonNotFound() {
    $this->assertNoRaw(t('Show optional fields'), t('Show optional fields button not found.'));
  }

  private function assertTagsFieldHidden() {
    $this->assertNoFieldByName('field_tags[und]', NULL, t('Tags field hidden.'));
  }

  private function assertTagsFieldNotHidden() {
    $this->assertFieldByName('field_tags[und]', NULL, t('Tags field visible.'));
  }

}

