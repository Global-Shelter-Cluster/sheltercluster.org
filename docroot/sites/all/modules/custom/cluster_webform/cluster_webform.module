<?php
/**
 * @file
 * Code for the Cluster Webform feature.
 */

include_once 'cluster_webform.features.inc';
include_once 'export.inc';

/**
 * Implements hook_webform_component_info_alter().
 */
function cluster_webform_webform_component_info_alter(&$components) {
  $supported_components = _cluster_webform_get_supported_components();
  foreach ($components as $type => $value) {
    if (!in_array($type, $supported_components)) {
      unset($components[$type]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_webform_form_webform_component_edit_form_alter(&$form, &$form_state) {
  if (!isset($form['type']['#value']))
    return;

  $component_type = $form['type']['#value'];
  switch ($component_type) {
    case 'pagebreak':
      $form['extra']['next_page_label']['#access'] = FALSE;
      $form['extra']['prev_page_label']['#access'] = FALSE;
      break;

    default:
      $form['display']['#access'] = FALSE;
      $form['analysis']['#access'] = FALSE;
      _cluster_webform_allow_supported_validation($form);
      _cluster_webform_allow_supported_extra($form);
      break;
  }
}

function _cluster_webform_get_supported_components() {
  return [
    'pagebreak',
    'markup',
    'textfield',
    'textarea',
    'number',
    'date',
    'time',
    'select',
    // 'fieldset',
    // 'email',
    // 'grid',
    // 'hidden',
    // 'file',
    // 'name',
  ];
}

function _cluster_webform_get_supported_component_validation($component_type) {
  switch($component_type) {
    case 'number':
      return [
        'min',
        'max',
        'integer',
      ];
  }
  return [];
}


function _cluster_webform_get_supported_component_extra($component_type) {
  $supported = [
    'description',
  ];
  switch($component_type) {
    case 'select':
      $supported = array_merge($supported, [
        'items',
        'options_source',
        'multiple',
      ]);
      break;
    default:
  }
  return $supported;
}

function _cluster_webform_allow_supported_validation(&$form) {
  $supported_validation = _cluster_webform_get_supported_component_validation($form['type']['#value']);
  foreach (element_children($form['validation']) as $key) {
    if (!in_array($key, $supported_validation)) {
      $form['validation'][$key]['#access'] = FALSE;
    }
  }
  $form['validation']['required']['#access'] = TRUE;
}

function _cluster_webform_get_supported_component_elements($type) {
  return array_merge(
    _cluster_webform_get_supported_component_extra($type),
    _cluster_webform_get_supported_component_validation($type)
  );
}

function _cluster_webform_allow_supported_extra(&$form) {
  $supported_extra = _cluster_webform_get_supported_component_extra($form['type']['#value']);
  foreach (element_children($form['extra']) as $key) {
    if (!in_array($key, $supported_extra)) {
      $form['extra'][$key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_webform_form_webform_configure_form_alter(&$form, &$form_state) {
  $form['submission']['redirection']['#access'] = FALSE;
  $form['submission']['total_submit_limit']['#access'] = FALSE;
  $form['submission']['submit_limit']['#access'] = FALSE;
  $form['role_control']['#access'] = FALSE;
  $form['progressbar']['#access'] = FALSE;
  $form['preview']['#access'] = FALSE;
  $form['advanced']['#access'] = FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function cluster_webform_menu_alter(&$items) {
  unset($items['node/%webform_menu/webform/conditionals']);
}

/**
 * Implements hook_webform_results_access().
 */
function cluster_webform_webform_results_access($node, $account = NULL) {
  if (isset($node->field_allow_public_result) && $node->field_allow_public_result[LANGUAGE_NONE][0]['value']) {
    return TRUE;
  }
}
