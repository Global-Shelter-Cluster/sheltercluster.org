<?php
/**
 * @file
 * Code for the Cluster Webform feature.
 * module_load_include('inc', 'webform', 'export');
 */

include_once 'cluster_webform.features.inc';
include_once 'export.inc';

/**
 * Implements hook_webform_component_info_alter().
 */
function cluster_webform_webform_component_info_alter(&$components) {
  $supported_components = _cluster_webform_get_supported_components();
  foreach ($components as $type => $value) {
    if (!in_array($type, $supported_components)) {
      unset($components[$type]);
    }
  }

  if (isset($components['file'])) {
    // For now, let's treat this as an "image" field. Later we may want to enable any files, which would involve a
    // different widget on the app, etc.
    $components['file']['label'] = t('Image');
  }
}

/**
 * Implements hook_element_info_alter().
 */
function cluster_webform_element_info_alter(&$type) {
  if (isset($type['webform_conditional'])) {
    $type['webform_conditional']['#process'] = ['_cluster_webform_conditional_expand'];
  }
}

/**
 * Alter conditional settings webform elements.
 */
function _cluster_webform_conditional_expand($element) {
  $element = webform_conditional_expand($element);
  // Remove subconditionnals.
  foreach ($element['rules'] as $i => &$rule) {
    unset($rule['add_subconditional']);
  }
  // Restrict 'invert' options (only allow show and not hide).
  foreach ($element['actions'] as $i => $action) {
    $element['actions'][$i]['invert']['#options'] = [0 => 'is'];
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_webform_form_webform_conditionals_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  $components = $node->webform['components'];
  $source_list = webform_component_list($node, 'conditional', 'path', TRUE);

  // Flatten select options for sources and targets, removing pagebreak groups.
  foreach ($source_list as $i => $element) {
    if (is_array($element)) {
      foreach ($element as $f => $component) {
        $source_list[$f] = $component;
      }
      unset($source_list[$i]);
    }
  }

  // Make lists of supported components for sources and targets.
  $supported_conditional_types = ['select'];
  $supported_actions = ['show' => 'shown'];
  $filtered_source_list = [];
  $non_page_targets = [];
  foreach ($components as $cid => $component) {
    // Filter the source list. Keep component types that are handled in the app.
    if (in_array($component['type'], $supported_conditional_types)) {
      $filtered_source_list[$cid] = $source_list[$cid];
    }
    // Remove pagebreak components from targets.
    if ($component['type'] != 'pagebreak') {
      $non_page_targets[$cid] = $source_list[$cid];
    }
  }

  // Reduce the conditional sources, targets and actions to the filtered and limited values.
  foreach (element_children($form['conditionals']) as $i) {
    if ($i === 'new') {
      continue;
    }
    $form['conditionals'][$i]['conditional']['#sources'] = $filtered_source_list;
    $form['conditionals'][$i]['conditional']['#targets'] = $non_page_targets;
    $form['conditionals'][$i]['conditional']['#actions'] = $supported_actions;
  }
}

/**
 * Implements hook_webform_conditional_operators_alter().
 */
function cluster_webform_webform_conditional_operators_alter(&$operators) {
  // Limit operators to those supported by the app.
  $supported_operators = ['equal', 'not_equal'];
  foreach ($operators as $type => $type_operators) {
    $operators[$type] = array_intersect_key($type_operators, array_flip($supported_operators));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_webform_form_webform_component_edit_form_alter(&$form, &$form_state) {
  if (!isset($form['type']['#value']))
    return;

  $is_add = $form['cid']['#value'] === NULL;

  $component_type = $form['type']['#value'];
  switch ($component_type) {
    case 'pagebreak':
      $form['extra']['next_page_label']['#access'] = FALSE;
      $form['extra']['prev_page_label']['#access'] = FALSE;
      break;

    case 'date':
      $form['display']['#access'] = FALSE;
      $form['analysis']['#access'] = FALSE;
      _cluster_webform_allow_supported_validation($form);
      _cluster_webform_allow_supported_extra($form);
      $form['validation']['start_date']['#default_value'] = $form['validation']['end_date']['#default_value'] = 0;
      $form['value']['#description'] = t('Default date must be in format (1972-09-24)');
      $form['#validate'][] = '_cluster_webform_validate_date';
      break;

    case 'time':
      $form['display']['#access'] = FALSE;
      $form['analysis']['#access'] = FALSE;
      _cluster_webform_allow_supported_validation($form);
      _cluster_webform_allow_supported_extra($form);
      $form['validation']['start_date']['#default_value'] = $form['validation']['end_date']['#default_value'] = 0;
      $form['value']['#description'] = t('Default time must be in 24h format (13:30)');
      $form['display']['hourformat']['#default_value'] = '24-hour';
      $form['#validate'][] = '_cluster_webform_validate_time';
      break;

    case 'file':
      // For now we're treating "file" as "image", hiding the "allowed extensions" input but setting it to all image types by default.
      if ($is_add)
        $form['validation']['extensions']['types']['webimages']['#default_value'] = $form['validation']['extensions']['types']['webimages']['#options'];
      $form['validation']['extensions'] = [
        '#type' => 'fieldset',
        '#attributes' => ['class' => ['element-hidden']],
        $form['validation']['extensions'],
      ];
      $form['display']['#access'] = FALSE;
      $form['analysis']['#access'] = FALSE;
      _cluster_webform_allow_supported_validation($form);
      _cluster_webform_allow_supported_extra($form);
      break;

    case 'geolocation':
      // Custom component @see cluster_geo module
      break;

    default:
      $form['display']['#access'] = FALSE;
      $form['analysis']['#access'] = FALSE;
      _cluster_webform_allow_supported_validation($form);
      _cluster_webform_allow_supported_extra($form);
      break;
  }
}

function _cluster_webform_get_supported_components() {
  return [
    'pagebreak',
    'markup',
    'textfield',
    'textarea',
    'number',
    'date',
    'time',
    'select',
    'file',
    'geolocation',
    // 'fieldset',
    // 'email',
    // 'grid',
    // 'hidden',
    // 'name',
  ];
}

function _cluster_webform_get_supported_component_validation($component_type) {
  switch ($component_type) {
    case 'number':
      return [
        'min',
        'max',
        'integer',
      ];
    case 'file':
      return [
        'extensions',
      ];
  }
  return [];
}


function _cluster_webform_get_supported_component_extra($component_type) {
  $supported = [
    'description',
  ];

  switch ($component_type) {
    case 'select':
      $supported = array_merge($supported, [
        'items',
        'options_source',
        'multiple',
      ]);
      break;

    case 'file':
      $supported = array_merge($supported, [
        'filtering',
      ]);
      break;

    case 'geolocation':
      $supported = array_merge($supported, [
        'current_coordinates',
      ]);
      break;

    default:
  }
  return $supported;
}

function _cluster_webform_allow_supported_validation(&$form) {
  $supported_validation = _cluster_webform_get_supported_component_validation($form['type']['#value']);
  if ($form['validation']) {
    foreach (element_children($form['validation']) as $key) {
      if (!in_array($key, $supported_validation)) {
        $form['validation'][$key]['#access'] = FALSE;
      }
    }
  }
  $form['validation']['required']['#access'] = TRUE;
}

function _cluster_webform_get_supported_component_elements($type) {
  return array_merge(
    _cluster_webform_get_supported_component_extra($type),
    _cluster_webform_get_supported_component_validation($type)
  );
}

function _cluster_webform_allow_supported_extra(&$form) {
  $supported_extra = _cluster_webform_get_supported_component_extra($form['type']['#value']);
  if ($form['extra']) {
    foreach (element_children($form['extra']) as $key) {
      if (!in_array($key, $supported_extra)) {
        $form['extra'][$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_webform_form_webform_configure_form_alter(&$form, &$form_state) {
  $form['submission']['redirection']['#access'] = FALSE;
  $form['submission']['total_submit_limit']['#access'] = FALSE;
  $form['submission']['submit_limit']['#access'] = FALSE;
  $form['role_control']['#access'] = FALSE;
  $form['progressbar']['#access'] = FALSE;
  $form['preview']['#access'] = FALSE;
  $form['advanced']['#access'] = FALSE;
}

/**
 * Allow only values in the form YYYY-MM-DD.
 */
function _cluster_webform_validate_date($form, &$form_state) {
  $date = $form_state['values']['value'];
  if (empty($date)) {
    return;
  }

  $form_set_error = function () {
    form_set_error('value', t('Not a valid date format for this field (YYYY-MM-DD)'));
  };

  $test = FALSE;
  try {
    $d = new DateTime($date);
    $test = $d->format('Y-m-d');
  } catch (Exception $e) {
    $form_set_error();
  }

  if ($date !== $test) {
    $form_set_error();
  }
}

/**
 * Allow only values in the form of 24h time.
 */
function _cluster_webform_validate_time($form, &$form_state) {
  $time = $form_state['values']['value'];
  if (empty($time)) {
    return;
  }

  $error = FALSE;
  $time_values = explode(':', $time);
  if (count($time_values) != 2) {
    $error = TRUE;
  }
  if (!((int)$time_values[0] >= 0) || !((int)$time_values[0] <= 23)) {
    $error = TRUE;
  }
  if (!((int)$time_values[1] >= 0) || !((int)$time_values[1] <= 59)) {
    $error = TRUE;
  }

  if ($error) {
    form_set_error('value', t('Not a valid 24h time format for this field (HH:MM)'));
  };

}

/**
 * Implements hook_webform_update_access().
 */
function cluster_webform_webform_update_access($node, $account) {
  return _cluster_webform_access_if_group_admin($node, $account);
}

/**
 * Implements hook_webform_submission_access().
 */
function cluster_webform_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  switch ($op) {
    case 'delete':
    case 'edit':
      return NULL;

    case 'view':
    case 'list':
      // If the user is a group admin, allow them to view/list the form submissions
    return _cluster_webform_access_if_group_admin($node, $account);
  }
}

/**
 * Implements hook_webform_results_access().
 */
function cluster_webform_webform_results_access($node, $account = NULL) {
  if (isset($node->field_allow_public_result) && $node->field_allow_public_result[LANGUAGE_NONE][0]['value']) {
    return TRUE;
  }

  return _cluster_webform_access_if_group_admin($node, $account);
}

function _cluster_webform_access_if_group_admin($node, $account) {
  if (!$account)
    return NULL;

  $gids = array_column($node->og_group_ref[LANGUAGE_NONE], 'target_id');
  if (count($gids) === 0)
    return NULL;

  foreach ($gids as $gid) {
    $roles = og_get_user_roles('node', $gid, $account->uid);
    if (in_array(OG_ADMINISTRATOR_ROLE, $roles))
      return TRUE;
  }

  return NULL;
}
