<?php
/**
 * @file
 * Code for the Cluster Home feature.
 */

include_once 'cluster_home.features.inc';
include_once 'export.inc';

/**
 * Implements hook_menu().
 */
function cluster_home_menu() {
  $items['new-dashboard-temp'] = [
    'title' => 'Temporary homepage dashboard',
    'page callback' => 'cluster_home_dashboard',
    'access arguments' => ['administer site configuration'],
    'type' => MENU_CALLBACK,
  ];

  $items['home/dashboard-export'] = array(
    'title' => 'Homepage dashboard Excel export',
    'page callback' => 'cluster_home_dashboard_export_excel',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function cluster_home_dashboard() {
  $data = _cluster_home_dashboard_data();

  $by_region_data = $data['count_by_region'];
  arsort($by_region_data);
  $by_region_data_values = [];
  $by_region_data_labels = [];
  foreach ($by_region_data as $region_nid => $region_count) {
    $by_region_data_values[] = $region_count;
    $by_region_data_labels[] = $data['node_names'][$region_nid];
  }
  $by_region = [
    '#theme' => 'cluster_chart_pie',
    '#data' => [
      'data' => $by_region_data_values,
      'backgroundColor' => explode(PHP_EOL, CLUSTER_CHART_COLOR_ACCENT_BLUE_x10),
    ],
    '#labels' => $by_region_data_labels,
    '#options' => [
//      'legend' => ['display' => FALSE],
      //      'maintainAspectRatio' => FALSE,
      'pieceLabel' => [
        'render' => $by_region_data_values,
        'fontColor' => 'white',
      ],
    ],
  ];

  $by_disaster_type_data = $data['count_by_disaster_type'];
  arsort($by_disaster_type_data);
  $by_disaster_type_data_values = [];
  $by_disaster_type_data_labels = [];
  foreach ($by_disaster_type_data as $disaster_type_nid => $disaster_type_count) {
    $by_disaster_type_data_values[] = $disaster_type_count;
    $by_disaster_type_data_labels[] = $data['term_names'][$disaster_type_nid];
  }
  $by_disaster_type = [
    '#theme' => 'cluster_chart_pie',
    '#data' => [
      'data' => $by_disaster_type_data_values,
      'backgroundColor' => explode(PHP_EOL, CLUSTER_CHART_COLOR_ACCENT_RED_x5),
    ],
    '#labels' => $by_disaster_type_data_labels,
    '#options' => [
//      'legend' => ['display' => FALSE],
      //      'maintainAspectRatio' => FALSE,
      'pieceLabel' => [
        'render' => $by_disaster_type_data_values,
        'fontColor' => 'white',
      ],
    ],
  ];

  $by_country_shelter_data = [
    [
      'data' => [],
      'label' => t('Reached'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_RED,
    ],
    [
      'data' => [],
      'label' => t('Gap'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
    ],
  ];
  $by_country_shelter_labels = [];
  uasort($data['countries'], function ($a, $b) {
    return $b['people_reached_shelter'] - $a['people_reached_shelter'];
  });
  foreach ($data['countries'] as $country_nid => $country_data) {
    $by_country_shelter_data[0]['data'][] = $country_data['people_reached_shelter'];
    $by_country_shelter_data[1]['data'][] = max(0, $country_data['people_targeted_shelter'] - $country_data['people_reached_shelter']);
    $by_country_shelter_labels[] = $data['node_names'][$country_nid];
  }
  $by_country_shelter = [
    '#theme' => 'cluster_chart_hbar',
    //    '#extra_css_classes' => ['fs_cat_chart'],
    '#data' => $by_country_shelter_data,
    '#labels' => $by_country_shelter_labels,
    '#options' => [
      'legend' => ['display' => FALSE],
      'maintainAspectRatio' => FALSE,
      'scales' => [
        'xAxes' => [
          [
            'stacked' => TRUE,
            'ticks' => ['beginAtZero' => TRUE, 'callback' => '[M]'],
          ],
        ],
        'yAxes' => [['stacked' => TRUE]],
      ],
    ],
  ];

  $by_country_nfi_data = [
    [
      'data' => [],
      'label' => t('Reached'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_DARK_BLUE,
    ],
    [
      'data' => [],
      'label' => t('Gap'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_LIGHT_BLUE,
    ],
  ];
  $by_country_nfi_labels = [];
  uasort($data['countries'], function ($a, $b) {
    return $b['people_reached_nfi'] - $a['people_reached_nfi'];
  });
  foreach ($data['countries'] as $country_nid => $country_data) {
    $by_country_nfi_data[0]['data'][] = $country_data['people_reached_nfi'];
    $by_country_nfi_data[1]['data'][] = max(0, $country_data['people_targeted_nfi'] - $country_data['people_reached_nfi']);
    $by_country_nfi_labels[] = $data['node_names'][$country_nid];
  }
  $by_country_nfi = [
    '#theme' => 'cluster_chart_hbar',
    //    '#extra_css_classes' => ['fs_cat_chart'],
    '#data' => $by_country_nfi_data,
    '#labels' => $by_country_nfi_labels,
    '#options' => [
      'legend' => ['display' => FALSE],
      'maintainAspectRatio' => FALSE,
      'scales' => [
        'xAxes' => [
          [
            'stacked' => TRUE,
            'ticks' => ['beginAtZero' => TRUE, 'callback' => '[M]'],
          ],
        ],
        'yAxes' => [['stacked' => TRUE]],
      ],
    ],
  ];

  $by_country_funding_data = [
    [
      'data' => [],
      'label' => t('Received'),
      'backgroundColor' => CLUSTER_CHART_COLOR_ACCENT_GREEN,
    ],
    [
      'data' => [],
      'label' => t('Gap'),
      'backgroundColor' => CLUSTER_CHART_COLOR_ACCENT_GREEN_SHADE,
    ],
  ];
  $by_country_funding_labels = [];
  uasort($data['countries'], function ($a, $b) {
    return $b['funding_received'] - $a['funding_received'];
  });
  foreach ($data['countries'] as $country_nid => $country_data) {
    $by_country_funding_data[0]['data'][] = $country_data['funding_received'];
    $by_country_funding_data[1]['data'][] = max(0, $country_data['funding_required'] - $country_data['funding_received']);
    $by_country_funding_labels[] = $data['node_names'][$country_nid];
  }
  $by_country_funding = [
    '#theme' => 'cluster_chart_hbar',
    //    '#extra_css_classes' => ['fs_cat_chart'],
    '#data' => $by_country_funding_data,
    '#labels' => $by_country_funding_labels,
    '#options' => [
      'legend' => ['display' => FALSE],
      'maintainAspectRatio' => FALSE,
      'scales' => [
        'xAxes' => [
          [
            'stacked' => TRUE,
            'ticks' => ['beginAtZero' => TRUE, 'callback' => '[M]'],
          ],
        ],
        'yAxes' => [['stacked' => TRUE]],
      ],
    ],
  ];

  return [
    '#theme' => 'cluster_home_dashboard',
    '#count_all_active' => $data['count_all_active'],
    '#people_supported' => $data['people_supported'],
    '#partners' => $data['partners'],
    '#by_region' => $by_region,
    '#by_disaster_type' => $by_disaster_type,
    '#by_country_shelter' => $by_country_shelter,
    '#by_country_nfi' => $by_country_nfi,
    '#by_country_funding' => $by_country_funding,
  ];
}

/**
 * Implements hook_theme().
 */
function cluster_home_theme($existing, $type, $theme, $path) {
  return [
    'cluster_home_dashboard' => [
      'template' => 'dashboard',
      'variables' => [
        'count_all_active' => 0,
        'people_supported' => 0,
        'partners' => 0,
        'by_region' => NULL,
        'by_disaster_type' => NULL,
        'by_country_shelter' => NULL,
        'by_country_nfi' => NULL,
        'by_country_funding' => NULL,
      ],
      'path' => drupal_get_path('module', 'cluster_home') . '/templates',
    ],
  ];
}

function _cluster_home_active_responses() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'response')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_response_status', 'value', 'active')
    ->execute();

  return isset($result['node'])
    ? array_keys($result['node'])
    : [];
}

function _cluster_home_dashboard_data() {
  $node_names = []; // [nid] => [string]
  $term_names = []; // [tid] => [string]

  $responses = node_load_multiple(_cluster_home_active_responses());

  $by_disaster_type = [];
  $by_region = [];
  $factsheets = []; // [response nid] => [factsheet data]
  $people_supported = 0;
  $people_supported_shelter = 0;
  $people_supported_nfi = 0;
  $count_all_active = 0;
  $partners = 0;
  $funding_received = 0;
  $countries = []; // [region nid] => (various values, see below)

  foreach ($responses as $response) {
    $wrapper = entity_metadata_wrapper('node', $response);

    $country = NULL; // first country found in response's related geographic_region nodes
    $top_region = NULL; // top region (one that doesn't have a parent) for the response

    foreach ($wrapper->field_associated_regions as $item) {
      $region = $item->value();

      if (is_null($country) && _cluster_home_is_country($region)) {
        $country = $region;
      }

      if (is_null($top_region)) {
        $top_region = _cluster_home_find_top_region($region);
      }

      if (!is_null($country) && !is_null($top_region)) {
        break;
      }
    }

    if (is_null($country) || is_null($top_region)) {
      continue;
    }

    $count_all_active++;

    $node_names[$top_region->nid] = $top_region->title;
    $by_region[$top_region->nid]++;

    $node_names[$country->nid] = $country->title;
    if (!isset($countries[$country->nid])) {
      $countries[$country->nid] = [
        'top_region' => $top_region->nid,
        'people_targeted_shelter' => 0,
        'people_reached_shelter' => 0,
        'people_targeted_nfi' => 0,
        'people_reached_nfi' => 0,
        'funding_required' => 0,
        'funding_received' => 0,
      ];
    }

    $response_data = _cluster_home_response_data($response, $wrapper, $term_names);
    $by_disaster_type[$response_data['disaster_type']]++;

    $factsheet = cluster_factsheets_last_published_for_group($response, TRUE);
    if ($factsheet) {
      $fs_data = cluster_factsheets_structured_data($factsheet);
      $factsheets[$response->nid] = $fs_data;

      $partners += $fs_data['partners'];
      $fs_funding_required = $fs_data['funding']['required'];
      $fs_funding_received = $fs_data['funding']['funded'];
      $funding_received += $fs_funding_received;
      $people_supported += $fs_data['people']['targeted'];

      $fs_people_targeted_shelter = $fs_data['people_totals']['shelter']['targeted'];
      $fs_people_reached_shelter = $fs_data['people_totals']['shelter']['reached'];
      $fs_people_targeted_nfi = $fs_data['people_totals']['nfi']['targeted'];
      $fs_people_reached_nfi = $fs_data['people_totals']['nfi']['reached'];

      $countries[$country->nid]['people_targeted_shelter'] += $fs_people_targeted_shelter;
      $countries[$country->nid]['people_reached_shelter'] += $fs_people_reached_shelter;
      $countries[$country->nid]['people_targeted_nfi'] += $fs_people_targeted_nfi;
      $countries[$country->nid]['people_reached_nfi'] += $fs_people_reached_nfi;
      $countries[$country->nid]['funding_required'] += $fs_funding_required;
      $countries[$country->nid]['funding_received'] += $fs_funding_received;

      $people_supported_shelter += $fs_people_reached_shelter;
      $people_supported_nfi += $fs_people_reached_nfi;
    }

    $countries[$country->nid]['responses'][$response->nid] = $response_data;
  }

  // Remove countries without any data
  $countries = array_filter($countries, function ($c) {
    return array_filter($c); // if all values are 0, removes the country from the list
  });

  return [
    'node_names' => $node_names,
    'term_names' => $term_names,

    'count_all_active' => $count_all_active,
    'partners' => $partners,
    'funding_received' => $funding_received,
    'people_supported' => $people_supported,
    'people_supported_shelter' => $people_supported_shelter,
    'people_supported_nfi' => $people_supported_nfi,

    // keys are tids, values are counts (int)
    'count_by_disaster_type' => $by_disaster_type,

    // keys are nids, values are counts (int)
    'count_by_region' => $by_region,

    'countries' => $countries,

    // keys are response nids
    'factsheets' => $factsheets,
  ];
}

function _cluster_home_is_country($node) {
  return
    is_array($node->field_geographic_region_type)
    && isset($node->field_geographic_region_type[LANGUAGE_NONE])
    && isset($node->field_geographic_region_type[LANGUAGE_NONE][0])
    && isset($node->field_geographic_region_type[LANGUAGE_NONE][0]['tid'])
    && $node->field_geographic_region_type[LANGUAGE_NONE][0]['tid'] == TAXONOMY_TERM_TID_COUNTRY;
}

function _cluster_home_find_top_region($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $parent = $wrapper->field_parent_region->value();
  if ($parent) {
    return _cluster_home_find_top_region($parent);
  }

  return _cluster_home_is_country($node) ? NULL : $node;
}

function _cluster_home_response_data($response, $wrapper, &$term_names) {
  $disaster_type = $wrapper->field_disaster_type->value();
  $term_names[$disaster_type->tid] = $disaster_type->name;

  return [
    'nid' => $response->nid,
    'year' => $wrapper->field_crisis_date_day->value()
      ? format_date((int) $wrapper->field_crisis_date_day->value(), 'custom', 'Y')
      : NULL,
    'disaster_type' => $disaster_type->tid,
  ];
}
