<?php
/**
 * @file
 * Code for the Cluster Events feature.
 */

include_once 'cluster_events.features.inc';
include_once 'cluster_events.pathauto.inc';

const CLUSTER_EVENTS_PER_PAGE = 10;

/**
 *  Implements hook_menu().
 */
function cluster_events_menu() {
  $items['node/%/events'] = array(
    'title' => 'events',
    'title callback' => '_cluster_events_title_callback',
    'title arguments' => array(1),
    'page callback' => 'cluster_search_events_page',
    'page arguments' => array(1),
    'access callback' => 'og_is_group',
    'access arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
  );

  $items['events'] = array(
    'title' => 'All events',
    'page callback' => 'cluster_search_events_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu title callback.
 */
function _cluster_events_title_callback($nid) {
  global $language;
  $title = t('Events');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilinigual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid), array('langcode' => LANGUAGE_NONE));
    return $wrapper->label();
  }
  catch (EntityMetadataWrapperException $exc) {
    _log_entity_metadata_wrapper_error($exc, 'cluster_context');
  }
  return $title;
}

/**
 * Page callback, lists of events using Search API.
 * @param $nid, if present, limit events that are part of group id audience.
 * @return Render array
 */
function cluster_events_all($nid) {
  module_load_include('inc', 'cluster_events', 'cluster_events.helpers');
  $all_events = !_cluster_events_all_events_only_upcoming_events();

  $order = $all_events ? 'DESC' : 'ASC';

  $date = new DateTime('12am today');
  $today = $date->format('Y-m-d 00:00:00');

  // Filter by event date with entity field query.
  $filter_by_date = new EntityFieldQuery();
  $filter_by_date->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_recurring_event_date2', 'value', $order);

  $filter_by_date_count = new EntityFieldQuery();
  $filter_by_date_count->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_recurring_event_date2', 'value', $order)
    ->count();

  if (!$all_events) {
    $filter_by_date->fieldCondition('field_recurring_event_date2', 'value', $today, '>=');
    $filter_by_date_count->fieldCondition('field_recurring_event_date2', 'value', $today, '>=');
  }

  if ($nid) {
    $filter_by_date->fieldCondition('og_group_ref', 'target_id', $nid);
    $filter_by_date_count->fieldCondition('og_group_ref', 'target_id', $nid);
  }

  $number_of_results = $filter_by_date_count->execute();

  $offset = pager_find_page() * CLUSTER_EVENTS_PER_PAGE;
  $filter_by_date->range($offset, CLUSTER_EVENTS_PER_PAGE);

  // Execute query to filter by event date.
  $query_date_filter_results = $filter_by_date->execute();

  pager_default_initialize($number_of_results, CLUSTER_EVENTS_PER_PAGE);

  if (empty($query_date_filter_results['node'])) {
    $content['events_toggle_button'] = _cluster_events_add_toggle_button(TRUE);
    $content['events']['#markup'] = t('No events scheduled at the moment.');
  }
  else {
    $content = array(
      "#theme" => 'cluster_og_all_events',
      '#events' => array(),
    );
    $nids = array_keys($query_date_filter_results['node']);
    $content['#events'] = cluster_events_format_list($nids);
  }

  $ret['content'] = $content;
  $ret['pager'] = array(
    '#theme' => 'pager',
  );

  return $ret;
}

function cluster_events_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'cluster_events');
  $theme_registry['node_preview']['file'] = 'cluster_events.module';
  $theme_registry['node_preview']['theme path'] = $path;
  $theme_registry['node_preview']['function'] = 'cluster_events_node_preview';
  $theme_registry['node_preview']['includes'] = [
    $path . '/cluster_events.module',
  ];
}

function cluster_events_node_preview($variables) {
  if (!$variables['node']->type == 'event') {
    return theme_node_preview($variables);
  }
  return '<div class="preview"><div class="node">' . t('Please preview your event before final submitting.') . '</div></div>';
}

/**
 * Get upcoming events.
 *
 * @return bool|string
 */
function cluster_events_upcoming() {
  return cluster_events_get_events('>', 'ASC');
}

/**
 * Get previous events.
 *
 * @return bool|string
 */
function cluster_events_previous() {
  return cluster_events_get_events('<', 'DESC');
}

/**
 * Get event nodes.
 *
 * @param string $operator
 *   The operator to use within the date field condition (i.e. less or greater
 *   than the specified date.
 * @param string $order
 *   The order to sort the results - e.g. 'ASC' or 'DESC'.
 *
 * @return bool|string
 */
function cluster_events_get_events($operator = '>', $order = 'ASC') {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition('field_recurring_event_date2', 'value', date('Y-m-d'), $operator)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_recurring_event_date2', 'value', $order)
    ->range(0, 3)
    ->execute();

  if (!isset($results['node'])) {
    return FALSE;
  }

  $nids = array_keys($results['node']);

  $entities = entity_load('node', $nids);
  $events = array();
  foreach ($entities as $entity) {
    $events[] = cluster_events_format_upcoming($entity->nid);
  }

  $is_previous = $operator === '<';

  return theme('cluster_og_upcoming_events', array(
    'events' => $events,
    'is_previous_events' => $is_previous,
    'all_events_link' => '/events',
    'global_events_link' => array(
      '#type' => 'link',
      '#href' => 'geographic-region/global/events',
      '#title' => 'See Global Events',
    ),
    'previous_events_link' => '',
  ));
}

function cluster_events_generate_map_url($geo) {
  if (!is_array($geo)
    || !array_key_exists('lat', $geo) || !array_key_exists('lon', $geo) || !array_key_exists('zoom', $geo)
    || !$geo['lat'] || !$geo['lon'] || !$geo['zoom']
  )
    return NULL;

  return 'https://www.google.com/maps/place/'
    . $geo['lat'] . ',' . $geo['lon'] . '/@'
    . $geo['lat'] . ',' . $geo['lon'] . ','
    . $geo['zoom'] . 'z';
}

function cluster_events_generate_static_map_url($geo, $width = 300, $height = 200) {
  if (!is_array($geo)
    || !array_key_exists('lat', $geo) || !array_key_exists('lon', $geo) || !array_key_exists('zoom', $geo)
    || !$geo['lat'] || !$geo['lon'] || !$geo['zoom']
  )
    return NULL;

  $query = [
    'center' => $geo['lat'] . ',' . $geo['lon'],
    'zoom' => $geo['zoom'],
    'scale' => 2,
    'size' => $width . 'x' . $height,
    'maptype' => 'roadmap',
    'format' => 'png',
    'visual_refresh' => 'true',
    'markers' => 'size:small|color:0x000000|label:1|' . $geo['lat'] . ',' . $geo['lon'],
  ];

  return 'http://maps.googleapis.com/maps/api/staticmap?' . http_build_query($query);
}

function cluster_events_format_upcoming($nid) {
  $node = node_load($nid);
  if (!$node || $node->type != 'event') {
    return FALSE;
  }

  try {
    /** @var EntityDrupalWrapper $wrapper */
    $wrapper = entity_metadata_wrapper('node', $node);

    // Render the date as per the teaser field display setting.
    $date = $wrapper->get('field_recurring_event_date2')->value();
    $date = strtotime($date[0]['value']);
    $date = format_date($date, 'custom', 'H:i - Y m d');

    $geo = _cluster_events_get_geocoordinates_from_address_field($wrapper->field_postal_address->value());

    $map_url = cluster_events_generate_map_url($geo);
    $map_link = $map_url ? l(t('map'), $map_url, array(
      'attributes' => array(
        'target' => '_blank',
      )
    )) : NULL;

    // Get contact(s).
    $contacts = $wrapper->field_event_contact->value();
    $contact_list = cluster_events_get_contact_list($contacts);

    $static_map = FALSE;
    if (!empty($geo)) {
      $static_map_url = cluster_events_generate_static_map_url($geo);
      $static_map_description = 'Map to ' . $wrapper->title->value();
      $static_map = theme('image', array(
        'path' => $static_map_url,
        'alt' => t($static_map_description),
        'title' => t($static_map_description),
      ));
    }

    // Add a link to the response.
    $response_link = l(
      $wrapper->get('og_group_ref')->label(),
      'node/' . $wrapper->getIdentifier()
    );

    $response = t('Response: !response_link', array(
      '!response_link' => $response_link
    ));

    return array(
      'date' => $date,
      'title' => $wrapper->title->value(),
      'link' => l($wrapper->title->value(), 'node/' . $node->nid),
      'location' => field_view_field('node', $node, 'field_postal_address', 'teaser'),
      'map_link' => $map_link,
      'static_map' => FALSE,
      'contact' => $contact_list,
      'ical' => l('iCal', sprintf('node/%d/%s/ical/addtocal.ics', $node->nid, 'field_recurring_event_date2')),
      'response' => $response,
    );
  }
  catch (EntityMetadataWrapperException $exception) {
    _log_entity_metadata_wrapper_error($exception, 'cluster_events');
  }
}

function cluster_events_format_list($nids) {
  $events = array();
  foreach ($nids as $nid) {
    $node = node_load($nid);
    if (!$node || $node->type != 'event') {
      return FALSE;
    }

    try {
      $wrapper = entity_metadata_wrapper('node', $node);
      $value = $wrapper->field_recurring_event_date2->value();
      $event_date = $value[0];
      $current_date = time();
      $is_future = $event_date > $current_date ? TRUE : FALSE;
      $is_past = !$is_future;

      // Render the date as per the teaser field display setting.
      $date = field_view_field('node', $node, 'field_recurring_event_date2', 'teaser');

      $geo = _cluster_events_get_geocoordinates_from_address_field($wrapper->field_postal_address->value());

      $map_url = cluster_events_generate_map_url($geo);
      $map_link = $map_url ? l(t('map'), $map_url, array(
        'attributes' => array(
          'target' => '_blank',
        )
      )) : NULL;

      // Get contact(s).
      $contacts = $wrapper->field_event_contact->value();
      $contact_list = cluster_events_get_contact_list($contacts);

      $static_map = cluster_events_create_map_with_link($geo, $wrapper->title->value());

      $events[] = array(
        'is_future' => $is_future,
        'is_past' => $is_past,
        'date' => $date,
        'title' => t($wrapper->title->value()),
        'link' => l($wrapper->title->value(), 'node/' . $node->nid),
        'location' => field_view_field('node', $node, 'field_postal_address', 'teaser'),
        'map_link' => $map_link,
        'static_map' => $static_map,
        'contact' => $contact_list,
        'description' => field_view_field('node', $node, 'body', 'teaser'),
      );
    }
    catch (EntityMetadataWrapperException $exception) {
      _log_entity_metadata_wrapper_error($exception, 'cluster_events');
    }
  }
  return $events;
}

/**
 * Implements hook_preprocess_node().
 */
function cluster_events_preprocess_node(&$variables) {
  if ($variables['type'] == 'event') {
    $variables['static_map'] = FALSE;
    $variables['map_link'] = FALSE;
    try {
      $wrapper = entity_metadata_wrapper('node', $variables['node']);
      $geo = _cluster_events_get_geocoordinates_from_address_field($wrapper->field_postal_address->value());

      // Get contact(s).
      $contacts = $wrapper->field_event_contact->value();
      $contact_list = cluster_events_get_contact_list($contacts);

      // Replace the field with our custom contact list.
      if ($contact_list) {
        $variables['content']['field_event_contact'] = array(
          '#weight' => 2,
          '#markup' => $contact_list,
          '#prefix' => '<div class="field"><div class="field-label">Contact:&nbsp;</div>',
          '#suffix' => '</div></div>'
        );
      }

      // Static map image.
      $variables['static_map'] = cluster_events_create_map_with_link($geo, $wrapper->title->value());
    }
    catch (EntityMetadataWrapperException $exception) {
      _log_entity_metadata_wrapper_error($exception, 'cluster_events');
    }
  }
}

/**
 * Returns a map linking back to the Google maps.
 */
function cluster_events_create_map_with_link($geo = NULL, $map_title = '') {
  $static_map = FALSE;
  if (!empty($geo)) {
    $map_url = cluster_events_generate_map_url($geo);
    if (!$map_url)
      return NULL;
    $static_map_url = cluster_events_generate_static_map_url($geo);
    $static_map_description = t('Map to ') . $map_title;
    $static_map = theme('image', array(
      'path' => $static_map_url,
      'alt' => $static_map_description,
      'title' => $static_map_description,
    ));
    $static_map = l($static_map, $map_url, array('html' => TRUE, 'attributes' => array('target' => '_blank')));
  }
  return $static_map;
}

/**
 * Returns a list of contact links.
 */
function cluster_events_get_contact_list($contacts = FALSE) {
  $contact_list = FALSE;

  if (!empty($contacts)) {
    $contact_email = '';
    $last_contact = count($contacts) - 1;

    // Get all the contacts and email address.
    foreach ($contacts as $index => $contact) {
      $separator = ", ";
      if ($index == $last_contact) {
        $separator = '';
      }

      if (empty($contact->field_email)) {
        $contact_list .= $contact->title . $separator;
        continue;
      }

      $contact_name = $contact->title;
      $contact_email = $contact->field_email['und']['0']['email'];

      $contact_link = '';
      $options = array();
      $contact_link = l(t($contact_name), 'mailto:' . $contact_email, $options, array('attributes' => array('class' => array('contact-link'))));

      $contact_list .= $contact_link . $separator;
    }
  }
  return $contact_list;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cluster_events_preprocess_partial(&$variables) {
  switch ($variables['name']) {
    case 'all_events':
      module_load_include('inc', 'cluster_events', 'cluster_events.helpers');

      $all_events = _cluster_events_all_events_only_upcoming_events();
      $button = _cluster_events_add_toggle_button($all_events);

      $variables['events_toggle_button'] = render($button);
      break;
  }
}

/**
 * Implements hook_field_access().
 */
function cluster_events_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op != 'view' && $field['field_name'] == 'field_recurring_event_date') {
    return FALSE;
  }
}

/**
 * Add a button to toggle between all events and only upcoming events.
 *
 * @var boolean $all_events
 *   (optional) Whether to show all events. Defaults to FALSE.
 *
 * @return array
 */
function _cluster_events_add_toggle_button($all_events = FALSE) {
  $options = array();

  if ($all_events) {
    $options['query']['all'] = NULL;
  }

  $path = url(current_path(), $options);
  $title = t('@', array('@' => $all_events ? 'View all events' : 'View only upcoming events'));

  return array(
    '#markup' => sprintf('<a href="%s">%s</a>', $path, $title),
    '#prefix' => '<p class="past-events-link">',
    '#suffix' => '</p>',
    '#weight' => -1,
  );
}

/**
 * Implements hook_TYPE_alter().
 */
function cluster_events_toggle_optional_fields_overridden_fields_alter(array &$fields) {
  $fields['node']['event'] = array(
    'field_event_contact' => TRUE,
    'field_postal_address' => TRUE,
    'field_recurring_event_date2' => TRUE,
    'language' => FALSE,
  );

  global $user;
  $fields['node']['event']['og_group_ref'] = shelter_base_get_group_count_for_user($user->uid) != 1;
}

/**
 * Implements hook_events_field_widget_form_alter().
 */
function cluster_events_field_widget_addressfield_autocomplete_form_alter(&$element, &$form_state, $context) {
  $widget = &$element['field_postal_address']['widget'];
  $widget['street_block']['thoroughfare']['#required'] = FALSE;
  $widget['locality_block']['locality']['#required'] = FALSE;
  $widget['locality_block']['postal_code']['#required'] = FALSE;
  $widget['locality_block']['administrative_area']['#required'] = FALSE;
  $path = drupal_get_path('module', 'cluster_events');
  $element[$element['#field_name']]['#attached']['js'][$path . '/js/map_widget_fix.js'] = array(
    'type' => 'file',
    'weight' => 10,
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function cluster_events_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['ical'] = array(
    'label' => t('iCal'),
    'custom settings' => TRUE,
  );
}

/**
 * Parse longitude and lattitude out of addressfield.
 */
function _cluster_events_get_geocoordinates_from_address_field($addressfield_values) {
  $data = unserialize($addressfield_values['data']);
  $zoom = isset($data['zoom']) ? $data['zoom'] : 15;
  return [
    'lon' => $data['longitude'],
    'lat' => $data['latitude'],
    'zoom' => $zoom,
  ];
}

function cluster_events_is_group_events_page() {
  $router_item = menu_get_item(current_path());

  if ($router_item && isset($router_item['path']))
    return $router_item['path'] === 'node/%/events';

  return FALSE;
}

function cluster_events_add_algolia_fields($item, &$item_to_index) {
  $node = node_load($item['nid']['value']);
  if (!$node)
    return;

  /** @var EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper('node', $node);

  $geo = _cluster_events_get_geocoordinates_from_address_field($wrapper->field_postal_address->value());

  $item_to_index['event_map_image'] = cluster_events_generate_static_map_url($geo, 150, 150);
  $item_to_index['event_map_link'] = cluster_events_generate_map_url($geo);

  $items = field_get_items('node', $node, 'field_postal_address');
  if ($items) {
    $view = field_view_value('node', $node, 'field_postal_address', $items[0]);
    $item_to_index['event_location_html'] = drupal_render($view);
  }
}

/**
 * Implements hook_schema_alter().
 */
function cluster_events_schema_alter(&$schema) {
  $schema['og_users_roles']['fields']['last_upcevt_push_notification'] = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ];
}

function _cluster_events_load_upcoming_events() {
  $ret = [];

  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)

    // "happens tomorrow"
    ->fieldCondition('field_recurring_event_date2', 'value', date('Y-m-d',strtotime('+1 day')), '>=')
    ->fieldCondition('field_recurring_event_date2', 'value', date('Y-m-d',strtotime('+2 day')), '<')

    ->execute();

  if (!$results || !$results['node'])
    return;

  $nids = array_keys($results['node']);

  $query = db_select('og_membership', 'om')
    ->fields('om', ['gid', 'etid'])
    ->condition('group_type', 'node')
    ->condition('entity_type', 'node')
    ->condition('etid', $nids, 'IN');

  $results = $query
    ->execute()
    ->fetchAll();

  foreach ($results as $result)
    $ret[$result->gid][] = $result->etid;

  return $ret;
}

function _cluster_events_upcoming_notification_body($event_nids, $langcode) {
  if (count($event_nids) === 1) {
    $event_nid = current($event_nids);

    $node = node_load($event_nid);
    if (!$node || $node->status != NODE_PUBLISHED || $node->type !== 'event')
      return '';

    return t('Upcoming event: @title', [
      '@title' => $node->title,
    ], [
      'langcode' => $langcode,
    ]);

  } elseif (count($event_nids) > 1) {

    return t('There are @count upcoming events.', [
      '@count' => count($event_nids),
    ], [
      'langcode' => $langcode,
    ]);
  }

  return '';
}

function _cluster_events_upcoming_notification_link_data($event_nids, $gid) {
  if (count($event_nids) === 1)
    return ['link' => 'event', 'id' => $event_nids[0]];

  return ['link' => 'group:events:upcoming', 'id' => $gid];
}

/**
 * Implements hook_cron().
 */
function cluster_events_cron() {
  // Upcoming events (events that happen tomorrow) push notifications
  $hour = 60 * 60; // const
  $timezones = cluster_api_daily_notification_timezones();

  $events_by_group = _cluster_events_load_upcoming_events();

  foreach ($events_by_group as $gid => $event_nids) {
    $group = node_load($gid);
    if (!og_is_group('node', $group))
      continue; // shouldn't happen
    $manager = GroupContentManager::getInstance($group);

    // Gets a list of users who match these conditions:
    // - they follow this group (filter by group role)
    // - it's a reasonable time right for them (filter by timezone)
    // - we haven't sent them an "upcoming events push notification" in the past 22 hours (for this particular group)
    $all_uids = $manager->getUsersByRole(
      CLUSTER_API_FOLLOWER_ROLE_NAME,
      $timezones,
      function (SelectQuery $query) use ($hour) {
        // The time of the last notification sent to this user, about this group, is at least 22 hours ago.
        $filter_time = REQUEST_TIME - (22 * $hour);
        $query->condition('og_ur.last_upcevt_push_notification', $filter_time, '<');
      }
    );
    if (!$all_uids)
      continue;

    foreach (cluster_api_split_users_by_langcode($all_uids) as $langcode => $uids) {
      $body = _cluster_events_upcoming_notification_body($event_nids, $langcode);
      if (!$body)
        continue;

      $title = cluster_api_group_notification_title($group, $langcode);
      $link_data = _cluster_events_upcoming_notification_link_data($event_nids, $gid);

      try {
        cluster_api_push_to_users(
          $uids,
          $title,
          $body,
          $link_data,
          FALSE
        );
      } catch (Exception $e) {
        watchdog('cluster_events', 'Error sending push notifications for gid @gid: @error. Notification was: @body', [
          '@gid' => $gid,
          '@error' => $e->getMessage(),
          '@body' => print_r(['title' => $title, 'body' => $body, 'link_data', $link_data], TRUE),
        ], WATCHDOG_ERROR);
      }

      $manager->updateUsersTimestamp(CLUSTER_API_FOLLOWER_ROLE_NAME, $uids, 'last_upcevt_push_notification');
    }
  }
}
