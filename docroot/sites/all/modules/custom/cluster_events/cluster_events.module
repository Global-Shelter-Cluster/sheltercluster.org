<?php
/**
 * @file
 * Code for the Cluster Events feature.
 */

include_once 'cluster_events.features.inc';
include_once 'cluster_events.pathauto.inc';

const CLUSTER_EVENTS_PER_PAGE = 10;

/**
 *  Implements hook_menu().
 */
function cluster_events_menu() {
  $items['node/%/events'] = array(
    'title' => 'events',
    'title callback' => '_cluster_events_title_callback',
    'title arguments' => array(1),
    'page callback' => 'cluster_events_all',
    'page arguments' => array(1),
    'access callback' => 'og_is_group',
    'access arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
  );

  $items['events'] = array(
    'title' => 'Events',
    'page callback' => 'cluster_events_all',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu title callback.
 */
function _cluster_events_title_callback($nid) {
  global $language;
  $title = t('Events');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilinigual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid), array('langcode' => LANGUAGE_NONE));
    return $wrapper->label();
  }
  catch (EntityMetadataWrapperException $exc) {
    _log_entity_metadata_wrapper_error($exc, 'cluster_context');
  }
  return $title;
}

/**
 * Page callback, shows a group's events using Search API.
 * @param $nid
 * @return Render array
 */
function cluster_events_all($nid) {

  // Filter by event date with entity field query.
  $filter_by_date = new EntityFieldQuery();
  $filter_by_date->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_recurring_event_date', 'value', 'DESC');

  $filter_by_date_count = new EntityFieldQuery();
  $filter_by_date_count->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_recurring_event_date', 'value', 'DESC')
    ->count();

  if($nid) {
    $filter_by_date->fieldCondition('og_group_ref', 'target_id', $nid);
    $filter_by_date_count->fieldCondition('og_group_ref', 'target_id', $nid);
  }

  $number_of_results = $filter_by_date_count->execute();

  $offset = pager_find_page() * CLUSTER_EVENTS_PER_PAGE;
  $filter_by_date->range($offset, CLUSTER_EVENTS_PER_PAGE);

  // Execute query to filter by event date.
  $query_date_filter_results = $filter_by_date->execute();

  pager_default_initialize($number_of_results, CLUSTER_EVENTS_PER_PAGE);

  if (! $query_date_filter_results['node']) {
    $content = array(
      '#markup' => t('No events scheduled at the moment.'),
    );
  }
  else {
    $content = array(
      "#theme" => 'cluster_og_all_events',
      '#events' => array(),
    );
    $nids = array_keys($query_date_filter_results['node']);
    $content['#events'] = cluster_events_format_list($nids);
  }

  $ret['content'] = $content;
  $ret['pager'] = array(
    '#theme' => 'pager',
  );

  return $ret;
}

/**
 * Implements hook_theme().
 */
function cluster_events_theme() {
  return array(
    'cluster_events_all' => array(
      'file' => 'theme/cluster_events.theme.inc',
      'render element' => 'element',
    ),
    'cluster_events_teaser' => array(
      'file' => 'theme/cluster_events.theme.inc',
      'render element' => 'element',
    ),
    'cluster_events_upcoming' => array(
      'file' => 'theme/cluster_events.theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_node_view_alter().
 */
function cluster_events_node_view_alter(&$build) {
  if ($build['#node']->type != 'event') {
    return;
  }
  switch ($build['#view_mode']) {
    case 'teaser':
      $build['#theme'] = 'cluster_events_teaser';

      break;
    default:
      // Do nothing.
  }
}

function cluster_events_upcoming() {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition('field_recurring_event_date', 'value', date('Y-m-d'), '>')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_recurring_event_date', 'value')
    ->range(0, 5)
    ->execute();

  if (!isset($results['node'])) {
    return FALSE;
  }

  $nids = array_keys($results['node']);

  $entities = entity_load('node', $nids);
  $events = array();
  foreach ($entities as $entity) {
    $events[] = cluster_events_format_upcoming($entity->nid);
  }

  return theme('cluster_og_all_events', array(
    'events' => $events,
    'all_events_link' => '/events',
  ));
}

function cluster_events_format_upcoming($nid) {
  $node = node_load($nid);
  if (!$node || $node->type != 'event') {
    return FALSE;
  }

  try {
    $wrapper = entity_metadata_wrapper('node', $node);

    $value = $wrapper->field_recurring_event_date->value();
    $from = $value[0];
    // $to   = strtotime($value['value2']);
    $format      = 'M. j' . '\<\s\u\p\>' . 'S' . '\<\/\s\u\p\>' . ' Y';
    // $format_from = 'M. j' . '\<\s\u\p\>' . 'S' . '\<\/\s\u\p\>';
    // $format_to   = 'M. j' . '\<\s\u\p\>' . 'S' . '\<\/\s\u\p\>' . ' Y';
    // if ($to > $from) {
    //   $date = date($format_from, $from);
    //   $date .= ' to ' . date($format_to, $to);
    // }
    // else {
      $date = date($format, $from);
    // }

    $geo = $wrapper->field_coordinates->value();
    $map_link = l(t('map'), 'https://www.google.ca/maps/place/' . $geo['lat'] . ',' . $geo['lon'] . '/@' . $geo['lat'] . ',' . $geo['lon'] . ',15z', array(
      'attributes' => array(
        'target' => '_blank',
      )
    ));

    // Get contact(s).
    $contact = $wrapper->field_event_contact->value();

    $contact_name = '';
    $contact_email = '';
    $last_group = count($contact) - 1;
    // Get all the contacts and email address.
    foreach ($contact as $index => $value) {
      $separator = ", ";
      if ($index == $last_group) {
        $separator = '';
      }
      $contacts = $value->title;
      $contact_email = $value->field_email['und']['0']['email'];

      $contact_link = '';
      $options = array();
      $contact_link = l(t($contacts), 'mailto:' . $contact_email, $options, array('attributes' => array('class' => array('contact-link'))));

      $contact_name .= $contact_link . $separator;
    }

    return array(
      'date' => $date,
      'title' => t($wrapper->title->value()),
      'link' => l($wrapper->title->value(), 'node/' . $node->nid),
      'location' => field_view_field('node', $node, 'field_postal_address', 'teaser'),
      'map_link' => $map_link,
      'contact' => $contact_name,
    );
  }
  catch (EntityMetadataWrapperException $exception) {
    _log_entity_metadata_wrapper_error($exception, 'cluster_events');
  }
}

function cluster_events_format_list($nids) {
  $events = array();
  foreach ($nids as $nid) {
    $node = node_load($nid);
    if (!$node || $node->type != 'event') {
      return FALSE;
    }

    try {
      $wrapper = entity_metadata_wrapper('node', $node);
      $value = $wrapper->field_recurring_event_date->value();
      $event_date = $value[0];
      $current_date = time();
      $is_future = $event_date > $current_date ? TRUE : FALSE;
      $is_past = !$is_future;
      $from = $event_date;
      // $to   = strtotime($value['value2']);
      $format      = 'M. j' . '\<\s\u\p\>' . 'S' . '\<\/\s\u\p\>' . ' Y';
      // $format_from = 'M. j' . '\<\s\u\p\>' . 'S' . '\<\/\s\u\p\>';
      // $format_to   = 'M. j' . '\<\s\u\p\>' . 'S' . '\<\/\s\u\p\>' . ' Y';
      // if ($to > $from) {
      //   $date = date($format_from, $from);
      //   $date .= ' to ' . date($format_to, $to);
      // }
      // else {
        $date = date($format, $from);
      // }

      $geo = $wrapper->field_coordinates->value();
      $map_link = l(t('map'), 'https://www.google.ca/maps/place/' . $geo['lat'] . ',' . $geo['lon'] . '/@' . $geo['lat'] . ',' . $geo['lon'] . ',15z', array(
        'attributes' => array(
          'target' => '_blank',
        )
      ));

      // Get contact(s).
      $contact = $wrapper->field_event_contact->value();

      $contact_name = '';
      $contact_email = '';
      $last_group = count($contact) - 1;
      // Get all the contacts and email address.
      foreach ($contact as $index => $value) {
        $separator = ", ";
        if ($index == $last_group) {
          $separator = '';
        }
        $contacts = $value->title;
        $contact_email = $value->field_email['und']['0']['email'];

        $contact_link = '';
        $options = array();
        $contact_link = l(t($contacts), 'mailto:' . $contact_email, $options, array('attributes' => array('class' => array('contact-link'))));

        $contact_name .= $contact_link . $separator;
      }


      $events[] = array(
        'is_future' => $is_future,
        'is_past' => $is_past,
        'date' => $date,
        'title' => t($wrapper->title->value()),
        'link' => l($wrapper->title->value(), 'node/' . $node->nid),
        'location' => field_view_field('node', $node, 'field_postal_address', 'teaser'),
        'map_link' => $map_link,
        'contact' => $contact_name,
      );
    }
    catch (EntityMetadataWrapperException $exception) {
      _log_entity_metadata_wrapper_error($exception, 'cluster_events');
    }
  }
  return $events;
}
