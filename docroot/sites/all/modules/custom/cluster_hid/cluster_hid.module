<?php

use Drupal\cluster_hid\ClusterHidHttpClient;
use Drupal\cluster_hid\ClusterHidUser;

/**
 * Implements hook_menu().
 */
function cluster_hid_menu() {
  return [
    'admin/config/shelter/hid-settings' => [
      'title' => 'Humanitarian Id Settings',
      'description' => 'Credentials (JWT) and configs for integration with Humanitarian.id.',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['cluster_hid_settings_form'],
      'access arguments' => ['administer site configuration'],
      'file' => 'cluster_hid.forms.inc',
    ],
    'admin/config/shelter/hid-search' => [
      'title' => 'Search Humanitarian.id',
      'description' => 'Search Humanitarian.id for users',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['cluster_hid_search_form'],
      'access arguments' => ['administer site configuration'],
      'file' => 'cluster_hid.forms.inc',
    ],
    'create-new-user-from-hid-id/%' => [
      'page callback' => 'cluster_hid_new_drupal_user',
      'page arguments' => [1],
      'access arguments' => ['administer site configuration'],
      'type' => MENU_CALLBACK,
    ],
    'update-user-from-hid-id/%' => [
      'page callback' => 'cluster_hid_update_drupal_user',
      'page arguments' => [1],
      'access arguments' => ['administer site configuration'],
      'type' => MENU_CALLBACK,
    ],

    // Update link from the profile page.
    'update-profile-from-hid-id/%' => [
      'page callback' => 'cluster_hid_update_drupal_profile',
      'page arguments' => [1],
      'access callback' => 'cluster_hid_synch_account_allowed',
      'access arguments' => [1],
      'type' => MENU_CALLBACK,
    ],

    'hid-search-user-search-autocomplete' => [
      'title' => 'Search Humanitarian.id autocomplete',
      'page callback' => 'cluster_hid_user_search_autocomplete',
      'access arguments' => ['administer site configuration'],
      'type' => MENU_CALLBACK,
    ],
    'hid-ajax-get-user-by-id/%' => [
      'page callback' => 'cluster_hid_get_user_by_id_as_table',
      'access arguments' => ['administer site configuration'],
      'page arguments' => [1],
      'type' => MENU_CALLBACK,
    ],
  ];
}

/**
 * Implements hook_theme.
 */
function cluster_hid_theme() {
  return [
    'hid_users' => [
      'variables' => [
        'users' => [],
      ],
      'template' => 'hid-users',
      'path' => drupal_get_path('module', 'cluster_hid') . '/template/',
    ],
  ];
}

/**
 * Implements hook_permissions.
 */
function cluster_hid_permission() {
  return [
    'synch humanitarian id profiles' => array(
      'title' => t('Synch Humanitarian Id profile'),
      'description' => t('Update user data from matching humanitarian id account.'),
    ),
  ];
}

function cluster_hid_synch_account_allowed($uid) {
  if (user_access('administer site configuration') || user_access('synch humanitarian id profiles')) {
    return TRUE;
  }
  global $user;
  if ($uid == $user->uid) {
    return TRUE;
  }
}

/**
 * Implements hook_preprocess_user_profile().
 */
function cluster_hid_preprocess_user_profile(&$variables) {
  // Humanitarian Id API has changed, this thows and error.
  return;

  $variables['synch_with_humanitarian_id_profile'] = FALSE;
  $user = $variables['elements']['#account'];
  $humanitarian_id = _cluster_hid_test_if_drupal_user_has_humanitarian_id($user->uid);
  if (!$humanitarian_id) {
    return;
  }
  if (!cluster_hid_synch_account_allowed($user->uid)) {
    return;
  }

  $variables['synch_with_humanitarian_id_profile'] = TRUE;
  $hidUser = cluster_hid_get_hid_user_by_id($humanitarian_id);
  $variables['synch_link'] = $hidUser->getUpdateLink();
}

/**
 * Implements hook_user_delete().
 */
function cluster_hid_user_delete($account) {
  db_delete('cluster_hid')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * @return The matching humanitarian id if found.
 */
function _cluster_hid_test_if_drupal_user_has_humanitarian_id($uid) {
  return ClusterHidUser::drupalUserHasHumanitarianId($uid);
}

/**
 * Autocomplete query callback.
 *
 * Search Humanitarian ID API for name matching string argument.
 */
function cluster_hid_user_search_autocomplete($string) {
  $matches = [];
  $argument_length = strlen($string);

  $min_length = 5;
  if ($argument_length < $min_length) {
    $matches[$string] = t('Need at least @min characters to perform search (@count more)', [
      '@min' => $min_length,
      '@count' => $min_length - $argument_length,
    ]);
    return drupal_json_output($matches);
  }

  $http_client = ClusterHidHttpClient::getInstance();
  $name = $string;
  $users = $http_client->searchUserByNameForAutocomplete($name);

  foreach ($users as $user) {
    $matches[$user->id] = _cluster_hid_format_user_for_autocomplete($user);
  }
  return drupal_json_output($matches);
}

/**
 * @param $user
 *  Json value from http request.
 */
function _cluster_hid_format_user_for_autocomplete($user) {
  $formated_user = $user->given_name . ' ' . $user->family_name . ' (' . $user->email . ')';
  if (isset($user->organization)) {
    $formated_user = $formated_user . ' -- ' . $user->organization->name;
  }
  return $formated_user;
}

/**
 * Given a humanitarian id, create a new Drupal user.
 */
function cluster_hid_new_drupal_user($hum_id) {
  $hid_user = cluster_hid_get_hid_user_by_id($hum_id);
  $new_user_id = $hid_user->createNewDrupalUser();
  return drupal_json_output($new_user_id);
}

/**
 * Menu callback for admin ajax call.
 * Update drupal user fields with values fetched from the humanitarian id database.
 */
function cluster_hid_update_drupal_user($hum_id) {
  $hid_user = cluster_hid_get_hid_user_by_id($hum_id);
  $updated_user_id = $hid_user->updateHidUserData();
  return drupal_json_output($updated_user_id);
}

/**
 * Menu callback for user profile page update.
 *
 * Update drupal user with values fetched from the humanitarian id database
 * and redirect to the user profile page.
 *
 * @param $uid
 * Drupal user id.
 */
function cluster_hid_update_drupal_profile($uid) {
  $hum_id = _cluster_hid_test_if_drupal_user_has_humanitarian_id($uid);
  if (!$hum_id) {
    return;
  }
  $hid_user = cluster_hid_get_hid_user_by_id($hum_id);
  if (!$hid_user) {
    drupal_set_message('No user with matching email found in Humanitarian.id database.');
  }
  $updated_user_id = $hid_user->updateHidUserData();
  drupal_set_message('User has been updated with data from Humanitarian.id.');
  drupal_goto('/user/' . $uid);
  return drupal_json_output($updated_user_id);
}

/**
 * Call humanitarianid API over http to get user information for matching humanitatian id.
 *
 * @param $hum_id
 *  humanitatian id
 * @return cluster_hid/ClusterHidUser
 */
function cluster_hid_get_hid_user_by_id($hum_id) {
  $http_client = ClusterHidHttpClient::getInstance();
  $user = NULL;
  $hid_user = $http_client->getUserById($hum_id);
  if ($hid_user) {
    $user = ClusterHidUser::create($hid_user);
  }
  return $user;
}

/**
 * Menu callback.
 * Returns table markup describing a user profile matching the given humanitarianid.
 */
function cluster_hid_get_user_by_id_as_table($hum_id) {
  $user = cluster_hid_get_hid_user_by_id($hum_id);
  $table = theme('hid_users', ['users' => [$user]]);
  return drupal_json_output($table);
}

/**
 * Implements hook_menu_alter().
 */
function cluster_hid_menu_alter(&$items) {
  $items['user/%user/hybridauth']['title'] = t('Humanitarian ID');
}
