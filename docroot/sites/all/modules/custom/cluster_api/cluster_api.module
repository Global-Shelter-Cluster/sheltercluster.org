<?php

include_once 'cluster_api.features.inc';

const CLUSTER_API_FOLLOWER_ROLE_NAME = 'follower';

function cluster_api_menu() {

  $items = [];

  $items['admin/config/shelter/cluser-api'] = [
    'title' => 'Cluster API settings',
    'description' => 'Set the cluster API configurations, such as local enpoint urls',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cluster_api_settings'],
    'access arguments' => ['administer site configuration'],
    'file' => 'cluster_api.form.inc',
    'type' => MENU_NORMAL_ITEM,
   ];

  return $items;
}

/**
 * Implements hook_services_resources().
 */
function cluster_api_services_resources() {
  return [
    'get-objects' => [
      'operations' => [
        'create' => [ // This isn't "creating" anything. REST verbs just suck.
          'help' => 'Load objects, including any related objects',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/get_objects',
          ],
          'callback' => '_cluster_api_get_objects',
          'args' => [
            [
              'name' => 'requests',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'A list of object ids (and their types) to load.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'follow' => [
      'operations' => [
        'create' => [
          'help' => 'Follow a group',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/follow',
          ],
          'callback' => '_cluster_api_follow',
          'args' => [
            [
              'name' => 'id',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'int',
              'description' => 'The id of the group node to follow or unfollow',
            ],
            [
              'name' => 'follow',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'The action name, follow or unfollow',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
  ];
}

/**
 * @param string $group_bundle e.g. "geographic_region"
 *
 * @return int
 * @throws \Exception
 */
function _cluster_api_get_follower_role_by_bundle($group_bundle) {
  $roles = array_flip(og_roles('node', $group_bundle));
  if (!array_key_exists(CLUSTER_API_FOLLOWER_ROLE_NAME, $roles))
    throw new Exception('Group bundle does not have follower role: ' . $group_bundle);
  return $roles[CLUSTER_API_FOLLOWER_ROLE_NAME];
}

/**
 * Send a push notification to all users logged in ("following") the given
 * group.
 *
 * @param integer $gid Node id for the group.
 * @param string $title
 * @param string $body Plain text
 * @param mixed $data This gets sent as json data to the app.
 * @param boolean $sound
 */
function cluster_api_push($gid, $title, $body = NULL, $data = NULL, $sound = TRUE) {
  $expo = new ClusterAPI_Expo();

  $group = node_load($gid);
  if (!og_is_group('node', $group))
    throw new Exception('Not a group id: ' . $id);

  $manager = new GroupContentManager($group);
  $uids = $manager->getUsersByRole(CLUSTER_API_FOLLOWER_ROLE_NAME, $group);
  $users = user_load_multiple($uids);
  $tokens = [];
  foreach ($users as $user) {
    foreach (field_get_items('user', $user, 'field_push_token') as $item) {
      $tokens[] = $item['value'];
    }
  }
  if (!count($tokens))
    return;

  $notification = array_filter([
    'title' => $title,
    'body' => $body,
    'data' => $data ? json_encode($data) : NULL,
  ]);

  if ($sound)
    $notification['sound'] = 'default';

  $expo->notify($tokens, $notification);
}

function _cluster_api_set_push_notification_token($user, $token) {
  // Test if the user already has the token.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_push_token', 'value', $token, '=')
    ->propertyCondition('uid', $user->uid)
    ->execute();

  if (count($result)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('user', $user);
  try {

  }
  catch(\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error: ' . $e->getMessage());
  }

}
