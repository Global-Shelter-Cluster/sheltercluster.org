<?php

include_once 'cluster_api.features.inc';

const CLUSTER_API_FOLLOWER_ROLE_NAME = 'follower';
const CLUSTER_API_DAILY_WINDOW_FROM_HOUR = 14;
const CLUSTER_API_DAILY_WINDOW_TO_HOUR = 18; // send daily notifications from 2pm to 6pm
const CLUSTER_API_DAY = 60 * 60 * 24;

function cluster_api_menu() {

  $items = [];

  $items['admin/config/shelter/cluster-api'] = [
    'title' => 'Cluster API settings',
    'description' => 'Set the cluster API configurations, such as local enpoint urls',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cluster_api_settings'],
    'access arguments' => ['administer site configuration'],
    'file' => 'cluster_api.form.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_services_resources().
 */
function cluster_api_services_resources() {
  return [
    'get-objects' => [
      'operations' => [
        'create' => [ // This isn't "creating" anything. REST verbs just suck.
          'help' => 'Load objects, including any related objects',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/get_objects',
          ],
          'callback' => '_cluster_api_get_objects',
          'args' => [
            [
              'name' => 'requests',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'A list of object ids (and their types) to load.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'signup' => [
      'operations' => [
        'create' => [
          'help' => 'Create a Drupal user',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/signup',
          ],
          'callback' => '_cluster_api_signup',
          'args' => [
            [
              'name' => 'credentials',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Account details for new user.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'forgot' => [
      'operations' => [
        'create' => [
          'help' => 'Request a new password for an existing Drupal user',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/forgot',
          ],
          'callback' => '_cluster_api_forgot',
          'args' => [
            [
              'name' => 'data',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Username or e-mail address.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'logout' => [
      'operations' => [
        'create' => [
          'help' => 'Logout',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/logout',
          ],
          'callback' => '_cluster_api_logout',
          'args' => [
            [
              'name' => 'credentials',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Details about user loging out',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'follow' => [
      'operations' => [
        'create' => [
          'help' => 'Follow a group',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/follow',
          ],
          'callback' => '_cluster_api_follow',
          'args' => [
            [
              'name' => 'id',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'int',
              'description' => 'The id of the group node to follow or unfollow',
            ],
            [
              'name' => 'follow',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'The action name, follow or unfollow',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'submit-assessment' => [
      'operations' => [
        'create' => [
          'help' => 'Submit an assessment submission',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/submit_assessment',
          ],
          'callback' => '_cluster_api_submit_assessment',
          'args' => [
            [
              'name' => 'form-service',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'string',
              'description' => 'The name of the service which will receive the submission, such as webform',
            ],
            [
              'name' => 'id',
              'optional' => FALSE,
              'source' => ['path' => 1],
              'type' => 'int',
              'description' => 'The id of the form receiving the submission',
            ],
            [
              'name' => 'submission',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'The form data being submitted',
            ],
          ],
          'access callback' => 'cluster_api_access_submit_assessment',
          'access arguments append' => TRUE,
        ],
      ],
    ],
    'get-files-size' => [
      'operations' => [
        'create' => [ // This isn't "creating" anything. REST verbs just suck.
          'help' => 'Retrieve size of given files path.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/get_files_size',
          ],
          'callback' => '_cluster_api_get_files_size',
          'args' => [
            [
              'name' => 'requests',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'A list of file paths.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
  ];
}

/**
 * @param string $group_bundle e.g. "geographic_region"
 *
 * @return int
 * @throws \Exception
 */
function _cluster_api_get_follower_role_by_bundle($group_bundle) {
  $roles = array_flip(og_roles('node', $group_bundle));
  if (!array_key_exists(CLUSTER_API_FOLLOWER_ROLE_NAME, $roles))
    throw new Exception('Group bundle does not have follower role: ' . $group_bundle);
  return $roles[CLUSTER_API_FOLLOWER_ROLE_NAME];
}

/**
 * Access callback.
 * Test if user is allowed to submit to an assemsment form.
 */
function cluster_api_access_submit_assessment() {
  return TRUE;
}

/**
 * Send a push notification to all users logged in ("following") the given
 * group.
 *
 * @param integer $gid Node id for the group.
 * @param string $title
 * @param string $body Plain text
 * @param mixed $data This gets sent as json data to the app.
 * @param boolean $sound
 */
function cluster_api_push_to_group($gid, $title, $body = NULL, $data = NULL, $sound = TRUE) {
  $group = node_load($gid);
  if (!og_is_group('node', $group)) {
    throw new Exception('Not a group id: ' . $gid);
  }

  $manager = GroupContentManager::getInstance($group);
  $uids = $manager->getUsersByRole(CLUSTER_API_FOLLOWER_ROLE_NAME);

  cluster_api_push_to_users($uids, $title, $body, $data, $sound);
}

function cluster_api_push_to_users($uids, $title, $body = NULL, $data = NULL, $sound = TRUE) {
  $users = user_load_multiple($uids);
  $tokens = [];
  foreach ($users as $user) {
    $field_items = field_get_items('user', $user, 'field_push_token');
    if (!$field_items) {
      continue;
    }
    foreach ($field_items as $k => $item) {
      $tokens[] = $item['value'];
    }
  }
  if (!count($tokens)) {
    return;
  }

  $data = ['title' => $title, 'body' => $body] + (array)$data;

  $notification = array_filter([
    'title' => $title,
    'body' => $body,
    'data' => $data,
  ]);

  if ($sound) {
    $notification['sound'] = 'default';
  }

  $expo = new ClusterAPI_Expo();
  $expo->notify($tokens, $notification);
}

/**
 * Add token to user profile.
 *
 * Remove token from other users' profiles.
 *
 * @param $user
 *  User entity.
 * @param $token
 *  Push notification token string.
 */
function _cluster_api_set_push_notification_token($user, $token) {
  // Test if the user already has the token.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_push_token', 'value', $token, '=')
    ->propertyCondition('uid', $user->uid)
    ->execute();

  if (count($result)) {
    return;
  }

  // Test if other users have the same token, and remove the token for those users.
  _cluster_api_clear_push_token($token);

  // Save the token to the user profile.
  $wrapper = entity_metadata_wrapper('user', $user);
  try {
    $wrapper->field_push_token[] = $token;
    $wrapper->save();
  } catch (\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error: ' . $e->getMessage());
  }

}

/**
 * Remove argued push notification from user entity.
 */
function _cluster_api_clear_push_token_for_user($token, $uid) {
  $user = user_load($uid);
  try {
    $wrapper = entity_metadata_wrapper('user', $user);
    $tokens = $wrapper->field_push_token->value();
    $remaining_tokens = array_diff($tokens, [$token]);
    $wrapper->field_push_token->set($remaining_tokens);
    $wrapper->save();
  } catch (\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error when removing push notification tokens: ' . $e->getMessage());
  }
}

/**
 * Remove push notification token from any user that may have it associated.
 */
function _cluster_api_clear_push_token($token) {
  $removed_count = 0;

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_push_token', 'value', $token, '=')
    ->execute();

  if (isset($result['user'])) {
    foreach (array_keys($result['user']) as $uid) {
      _cluster_api_clear_push_token_for_user($token, $uid);
      $removed_count++;
    }
  }

  return $removed_count;
}

/**
 * Keep track of how users where created.
 */
function cluster_api_track_users($uid, $origin) {
  $user = user_load($uid);
  try {
    $wrapper = entity_metadata_wrapper('user', $user);
    $wrapper->field_account_origin->set($origin);
    $wrapper->save();
  } catch (\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error when recording user account origin: ' . $e->getMessage());
  }
}

/**
 * Implements hook_cron().
 */
function cluster_api_cron() {
  // Daily push notifications
  $objects_by_gid = [];
  drupal_alter('daily_push_notification_objects', $objects_by_gid);

  $hour = 60 * 60; // const
  $timezones = _cluster_api_daily_notification_timezones();

  foreach ($objects_by_gid as $gid => $objects_by_module) {
    $group = node_load($gid);
    if (!og_is_group('node', $group))
      continue; // shouldn't happen
    $manager = GroupContentManager::getInstance($group);

    // Gets a list of users who match these conditions:
    // - they follow this group (filter by group role)
    // - it's a reasonable time right for them (filter by timezone)
    // - we haven't sent them a "daily push notification" in the past 22 hours (for this particular group)
    $uids = $manager->getUsersByRole(
      CLUSTER_API_FOLLOWER_ROLE_NAME,
      $timezones,
      function (SelectQuery $query) use ($hour) {
        // The time of the last notification sent to this user, about this group, is at least 22 hours ago.
        $filter_time = REQUEST_TIME - (22 * $hour);
        $query->condition('og_ur.last_daily_push_notification', $filter_time, '<');
      }
    );
    if (!$uids)
      continue;

    $body = _cluster_api_daily_notification_body($objects_by_module);
    if (!$body)
      continue;

    $title = _cluster_api_daily_notification_title($group);
    $link_data = _cluster_api_daily_notification_link_data($objects_by_module, $gid);

    try {
      cluster_api_push_to_users(
        $uids,
        $title,
        $body,
        $link_data,
        FALSE
      );
    } catch (Exception $e) {
      watchdog('cluster_api', 'Error sending push notifications for gid @gid: @error. Notification was: @body', [
        '@gid' => $gid,
        '@error' => $e->getMessage(),
        '@body' => print_r(['title' => $title, 'body' => $body, 'link_data', $link_data], TRUE),
      ], WATCHDOG_ERROR);
    }

    $manager->updateUsersTimestamp(CLUSTER_API_FOLLOWER_ROLE_NAME, $uids, 'last_daily_push_notification');
  }
}

/**
 * Returns data to be sent with the push notification, used to link to the appropriate place.
 *
 * @param array $objects_by_module Objects for a single group. See hook_daily_push_notification_objects_alter().
 * @param int $gid Group id
 * @return array
 */
function _cluster_api_daily_notification_link_data($objects_by_module, $gid) {
  if (count($objects_by_module) > 1)
    // There are multiple types of objects, so just link to the group screen.
    return ['link' => 'group', 'id' => $gid];

  $module = key($objects_by_module);

  return module_invoke($module, 'cluster_api_link_data', $objects_by_module[$module], $gid);
}

/**
 * If there is a single object, calls
 *
 * @param array $object_ids_by_module Objects for a single group. See hook_daily_push_notification_objects_alter().
 * @return string
 */
function _cluster_api_daily_notification_body($object_ids_by_module) {
  $data = [];
  foreach ($object_ids_by_module as $module => $object_ids) {
    $label = module_invoke($module, 'cluster_api_objects_label', $object_ids);
    if (!$label)
      continue;

    $data[$module] = [
      'label' => $label,
      'ids' => $object_ids,
      'weight' => module_invoke($module, 'cluster_api_weight'),
    ];
  }

  if (count($data) === 0)
    return '';

  if (count($data) === 1) {
    $module = key($data);
    $datum = current($data);
    $object_ids = $datum['ids'];
    $label = $datum['label'];

    if (count($object_ids) === 1) {
      // E.g. 'A document was added recently: "My document title"'

      $title = module_invoke($module, 'cluster_api_object_title', current($object_ids));
      if (!$title)
        return '';

      return t('@object was added recently: @title', [
        '@object' => drupal_ucfirst($label),
        '@title' => $title,
      ]);
    } else {
      // E.g. '4 documents were added recently.'
      return t('@objects were added recently.', [
        '@objects' => drupal_ucfirst($label),
      ]);
    }
  }

  // E.g. "4 documents, 2 pages and a factsheet were added recently."
  usort($data, function ($a, $b) {
    return $a['weight'] - $b['weight'];
  });
  $items = [];
  foreach ($data as $module => $datum)
    $items[] = $datum['label'];
  return t('@objects were added recently.', ['@objects' => _cluster_api_list_and($items, TRUE)]);
}

function _cluster_api_list_and($items, $ucfirst) {
  if ($ucfirst && count($items) > 0)
    $items[0] = ucfirst($items[0]);

  switch (count($items)) {
    case 0:
      return '';
    case 1:
      return $items[0];
    default:
      return implode(', ', array_slice($items, 0, count($items) - 1))
        . ' and ' . array_pop($items);
  }
}

/**
 * @param stdClass $group Node object
 * @return string E.g. "Vanuatu Ambae Volcano 2018 (response)", "Africa (region)"
 */
function _cluster_api_daily_notification_title($group) {
  $display = GroupDisplayProvider::getDisplayProvider($group);

  $title = $group->title;

  $type_label = $display->getGroupTypeLabel();
  if ($type_label)
    $title .= ' (' . $type_label . ')';

  return $title;
}

/**
 * Get a list of timezones for which it's acceptable to send a "daily notification" right now,
 * i.e. the current time is anywhere from 2pm to 6pm.
 */
function _cluster_api_daily_notification_timezones() {
  $all_timezones = array_keys(system_time_zones());

  $filter = function ($timezone) {
    $d = new DateTime('now', new DateTimeZone($timezone));
    $hour = intval($d->format('H'), 10);
    return $hour >= CLUSTER_API_DAILY_WINDOW_FROM_HOUR && $hour < CLUSTER_API_DAILY_WINDOW_TO_HOUR;
  };

  return array_values(array_filter($all_timezones, $filter));
}

/**
 * Implements hook_schema_alter().
 */
function cluster_api_schema_alter(&$schema) {
  $schema['og_users_roles']['fields']['last_daily_push_notification'] = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ];
  $schema['og_users_roles']['fields']['last_weekly_push_notification'] = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ];
}
