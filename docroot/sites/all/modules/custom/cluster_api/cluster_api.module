<?php

include_once 'cluster_api.features.inc';

const CLUSTER_API_FOLLOWER_ROLE_NAME = 'follower';
const CLUSTER_API_DAY = 60 * 60 * 24;
const CLUSTER_API_WEEK = 60 * 60 * 24 * 7;
const CLUSTER_API_NOTIF_ACCESS_THRESHOLD = 60 * 60 * 24 * 30 * 6; // 6 months

// send daily push notifications from 2pm to 6pm
const CLUSTER_API_DAILY_PUSH_NOTIFICATION_FROM = 14;
const CLUSTER_API_DAILY_PUSH_NOTIFICATION_TO = 18;

function cluster_api_menu() {

  $items = [];

  $items['admin/config/shelter/cluster-api'] = [
    'title' => 'Cluster API settings',
    'description' => 'Set the cluster API configurations, such as local endpoint urls',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cluster_api_settings'],
    'access arguments' => ['administer site configuration'],
    'file' => 'cluster_api.form.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['node/%node/devel/cluster_api'] = array(
    'title' => 'Cluster API',
    'page callback' => 'cluster_api_devel',
    'page arguments' => array(0, 1),
    'access arguments' => array('access devel information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 900,
  );

  $items['user/%user/devel/cluster_api'] = array(
    'title' => 'Cluster API',
    'page callback' => 'cluster_api_devel',
    'page arguments' => array(0, 1),
    'access arguments' => array('access devel information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 900,
  );

  return $items;
}

/**
 * Implements hook_services_resources().
 */
function cluster_api_services_resources() {
  return [
    'get-objects' => [
      'operations' => [
        'create' => [ // This isn't "creating" anything. REST verbs just suck.
          'help' => 'Load objects, including any related objects',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/get_objects',
          ],
          'callback' => '_cluster_api_get_objects',
          'args' => [
            [
              'name' => 'requests',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'A list of object ids (and their types) to load.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'signup' => [
      'operations' => [
        'create' => [
          'help' => 'Create a Drupal user',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/signup',
          ],
          'callback' => '_cluster_api_signup',
          'args' => [
            [
              'name' => 'credentials',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Account details for new user.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'update-user' => [
      'operations' => [
        'create' => [
          'help' => 'Update a Drupal user',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/update_user',
          ],
          'callback' => '_cluster_api_update_user',
          'args' => [
            [
              'name' => 'data',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Modified values for user',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'forgot' => [
      'operations' => [
        'create' => [
          'help' => 'Request a new password for an existing Drupal user',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/forgot',
          ],
          'callback' => '_cluster_api_forgot',
          'args' => [
            [
              'name' => 'data',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Username or e-mail address.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'logout' => [
      'operations' => [
        'create' => [
          'help' => 'Logout',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/logout',
          ],
          'callback' => '_cluster_api_logout',
          'args' => [
            [
              'name' => 'credentials',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'Details about user loging out',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'follow' => [
      'operations' => [
        'create' => [
          'help' => 'Follow a group',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/follow',
          ],
          'callback' => '_cluster_api_follow',
          'args' => [
            [
              'name' => 'id',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'int',
              'description' => 'The id of the group node to follow or unfollow',
            ],
            [
              'name' => 'follow',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'The action name, follow or unfollow',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'submit-assessment' => [
      'operations' => [
        'create' => [
          'help' => 'Submit an assessment submission',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/submit_assessment',
          ],
          'callback' => '_cluster_api_submit_assessment',
          'args' => [
            [
              'name' => 'form-service',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'string',
              'description' => 'The name of the service which will receive the submission, such as webform',
            ],
            [
              'name' => 'id',
              'optional' => FALSE,
              'source' => ['path' => 1],
              'type' => 'int',
              'description' => 'The id of the form receiving the submission',
            ],
            [
              'name' => 'submission',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'The form data being submitted',
            ],
          ],
          'access callback' => 'cluster_api_access_submit_assessment',
          'access arguments append' => TRUE,
        ],
      ],
    ],
    'get-files-size' => [
      'operations' => [
        'create' => [ // This isn't "creating" anything. REST verbs just suck.
          'help' => 'Retrieve size of given files path.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/get_files_size',
          ],
          'callback' => '_cluster_api_get_files_size',
          'args' => [
            [
              'name' => 'requests',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'array',
              'description' => 'A list of file paths.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'app-timezones' => [
      'operations' => [
        'index' => [
          'help' => 'Get list of available timezones.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_api',
            'name' => 'resources/app_timezones',
          ],
          'args' => [],
          'callback' => '_cluster_api_get_timezones',
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
  ];
}

/**
 * @param string $group_bundle e.g. "geographic_region"
 *
 * @return int
 * @throws \Exception
 */
function cluster_api_get_follower_role_by_bundle($group_bundle) {
  $roles = array_flip(og_roles('node', $group_bundle));
  if (!array_key_exists(CLUSTER_API_FOLLOWER_ROLE_NAME, $roles))
    throw new Exception('Group bundle does not have follower role: ' . $group_bundle);
  return $roles[CLUSTER_API_FOLLOWER_ROLE_NAME];
}

/**
 * Access callback.
 * Test if user is allowed to submit to an assemsment form.
 */
function cluster_api_access_submit_assessment() {
  return TRUE;
}

/**
 * Send a push notification to all users logged in ("following") the given
 * group.
 *
 * @param integer $gid Node id for the group.
 * @param string $title
 * @param string $body Plain text
 * @param mixed $data This gets sent as json data to the app.
 * @param boolean $sound
 */
function cluster_api_push_to_group($gid, $title, $body = NULL, $data = NULL, $sound = TRUE) {
  $group = node_load($gid);
  if (!og_is_group('node', $group)) {
    throw new Exception('Not a group id: ' . $gid);
  }

  $manager = GroupContentManager::getInstance($group);
  $uids = $manager->getUsersByRole(CLUSTER_API_FOLLOWER_ROLE_NAME);

  cluster_api_push_to_users($uids, $title, $body, $data, $sound);
}

function cluster_api_push_to_users($uids, $title, $body = NULL, $data = NULL, $sound = TRUE) {
  $users = user_load_multiple($uids);
  $tokens = [];
  foreach ($users as $user) {
    $field_items = field_get_items('user', $user, 'field_push_token');
    if (!$field_items) {
      continue;
    }
    foreach ($field_items as $k => $item) {
      $tokens[] = $item['value'];
    }
  }
  if (!count($tokens)) {
    return;
  }

  $data = ['title' => $title, 'body' => $body] + (array)$data;

  $notification = array_filter([
    'title' => $title,
    'body' => $body,
    'data' => $data,
  ]);

  if ($sound) {
    $notification['sound'] = 'default';
  }

  $expo = new ClusterAPI_Expo();
  $expo->notify($tokens, $notification);
}

/**
 * Add token to user profile.
 *
 * Remove token from other users' profiles.
 *
 * @param $user
 *  User entity.
 * @param $token
 *  Push notification token string.
 */
function _cluster_api_set_push_notification_token($user, $token) {
  watchdog('cluster_api_token', json_encode([$user->uid, $token]));
  // Test if the user already has the token.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_push_token', 'value', $token, '=')
    ->propertyCondition('uid', $user->uid)
    ->execute();

  if (count($result)) {
    return;
  }

  // Test if other users have the same token, and remove the token for those users.
  _cluster_api_clear_push_token($token);

  // Save the token to the user profile.
  $wrapper = entity_metadata_wrapper('user', $user);
  try {
    $wrapper->field_push_token[] = $token;
    $wrapper->save();
  } catch (\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error: ' . $e->getMessage());
  }

}

/**
 * Remove argued push notification from user entity.
 */
function _cluster_api_clear_push_token_for_user($token, $uid) {
  $user = user_load($uid);
  try {
    $wrapper = entity_metadata_wrapper('user', $user);
    $tokens = $wrapper->field_push_token->value();
    $remaining_tokens = array_diff($tokens, [$token]);
    $wrapper->field_push_token->set($remaining_tokens);
    $wrapper->save();
  } catch (\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error when removing push notification tokens: ' . $e->getMessage());
  }
}

/**
 * Remove push notification token from any user that may have it associated.
 */
function _cluster_api_clear_push_token($token) {
  $removed_count = 0;

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_push_token', 'value', $token, '=')
    ->execute();

  if (isset($result['user'])) {
    foreach (array_keys($result['user']) as $uid) {
      _cluster_api_clear_push_token_for_user($token, $uid);
      $removed_count++;
    }
  }

  return $removed_count;
}

/**
 * Keep track of how users where created.
 */
function cluster_api_track_users($uid, $origin) {
  $user = user_load($uid);
  try {
    $wrapper = entity_metadata_wrapper('user', $user);
    $wrapper->field_account_origin->set($origin);
    $wrapper->save();
  } catch (\Exception $e) {
    watchdog('cluster_api', 'Entity metadata wrapper error when recording user account origin: ' . $e->getMessage());
  }
}

/**
 * Get a list of users who match these conditions:
 * - they follow the given group (filter by group role)
 * - it's a reasonable time right for them to receive a notification (filter by timezone)
 * - we haven't sent them this type of notification in a while (for this particular group)
 * - they haven't disabled this type of notification (boolean fields in account entity)
 * - they've accessed the site in the last 6 months (can be overridden)
 *
 * @param GroupContentManager $manager
 * @param string[]|NULL $timezones
 *    See cluster_api_daily_notification_timezones(). NULL for no restriction.
 * @param string|NULL $last_notification_field
 *    Field in the og_users_roles table that stores the last timestamp when we notified
 *    this user. See $manager->updateUsersTimestamp().
 * @param int|NULL $threshold
 *    Hours that must have passed until we can send a notification to this user again
 *    (only applicable if $last_notification_field is set).
 * @param string|NULL $enabled_field
 *    Name of boolean field in the account entity, to filter out users who have disabled
 *    this type of notification.
 * @param int|NULL $access_threshold
 *    Users that haven't access the site (or the mobile app through the api) before this
 *    interval are not returned (stops, for example, users who have never logged in from
 *    getting email notifications).
 *
 * @return int[] User IDs
 */
function cluster_api_get_followers($manager, $timezones = NULL, $last_notification_field = NULL, $threshold = NULL, $enabled_field = NULL, $access_threshold = CLUSTER_API_NOTIF_ACCESS_THRESHOLD) {
  $hour = 60 * 60; // const

  return $manager->getUsersByRole(
    CLUSTER_API_FOLLOWER_ROLE_NAME,
    $timezones,
    $access_threshold,
    function (SelectQuery $query) use ($hour, $last_notification_field, $threshold, $access_threshold, $enabled_field) {
      if (!is_null($last_notification_field)) {
        // The time of the last notification sent to this user, about this group, is at least 22 hours ago.
        $filter_time = REQUEST_TIME - ($threshold * $hour);
        $query->condition('og_ur.'.$last_notification_field, $filter_time, '<');
      }

      if (!is_null($enabled_field)) {
        $query->join('field_data_'.$enabled_field, 'ef', 'ef.entity_type = \'user\' AND ef.entity_id = u.uid');
        $query->condition('ef.'.$enabled_field.'_value', 1);
      }
    }
  );
}

/**
 * Implements hook_cron().
 */
function cluster_api_cron() {
  // Daily push notifications
  $last_notification_field = 'last_daily_push_notification';
  $enabled_field = 'field_notif_push_daily';
  $timezones = cluster_api_timezones(CLUSTER_API_DAILY_PUSH_NOTIFICATION_FROM, CLUSTER_API_DAILY_PUSH_NOTIFICATION_TO);

  $objects_by_gid = [];
  drupal_alter('daily_push_notification_objects', $objects_by_gid);

  foreach ($objects_by_gid as $gid => $objects_by_module) {
    $group = node_load($gid);
    if (!og_is_group('node', $group))
      continue; // shouldn't happen
    $manager = GroupContentManager::getInstance($group);

    $all_uids = cluster_api_get_followers(
      $manager,
      $timezones,
      $last_notification_field,
      22,
      $enabled_field
    );
    if (!$all_uids)
      continue;

    foreach (cluster_api_split_users_by_langcode($all_uids) as $langcode => $uids) {
      $body = _cluster_api_daily_notification_body($objects_by_module, $langcode);
      if (!$body)
        continue;

      $title = cluster_api_group_notification_title($group, $langcode);
      $link_data = _cluster_api_daily_notification_link_data($objects_by_module, $gid);

      try {
        cluster_api_push_to_users(
          $uids,
          $title,
          $body,
          $link_data,
          FALSE
        );
      } catch (Exception $e) {
        watchdog('cluster_api', 'Error sending push notifications for gid @gid: @error. Notification was: @body', [
          '@gid' => $gid,
          '@error' => $e->getMessage(),
          '@body' => print_r(['title' => $title, 'body' => $body, 'link_data', $link_data], TRUE),
        ], WATCHDOG_ERROR);
      }

      $manager->updateUsersTimestamp(CLUSTER_API_FOLLOWER_ROLE_NAME, $uids, $last_notification_field);
    }
  }
}

/**
 * @param array $uids user ids, e.g. [12,34,56,78,90]
 * @return array keyed by langcode, values are arrays of uids, e.g. ['en' => [12,34,56], 'fr' => [78, 90]]
 */
function cluster_api_split_users_by_langcode($uids) {
  $ret = [];

  foreach (user_load_multiple($uids) as $user) {
    $langcode = $user->language;
    if (!$langcode)
      $langcode = 'en';

    if (!array_key_exists($langcode, $ret))
      $ret[$langcode] = [];

    $ret[$langcode][] = $user->uid;
  }

  return $ret;
}

/**
 * Returns data to be sent with the push notification, used to link to the appropriate place.
 *
 * @param array $objects_by_module Objects for a single group. See hook_daily_push_notification_objects_alter().
 * @param int $gid Group id
 * @return array
 */
function _cluster_api_daily_notification_link_data($objects_by_module, $gid) {
  if (count($objects_by_module) > 1)
    // There are multiple types of objects, so just link to the group screen.
    return ['link' => 'group', 'id' => $gid];

  $module = key($objects_by_module);

  return module_invoke($module, 'cluster_api_link_data', $objects_by_module[$module], $gid);
}

/**
 * If there is a single object, calls
 *
 * @param array $object_ids_by_module Objects for a single group. See hook_daily_push_notification_objects_alter().
 * @param string $langcode
 * @return string
 */
function _cluster_api_daily_notification_body($object_ids_by_module, $langcode = 'en') {
  $data = [];
  foreach ($object_ids_by_module as $module => $object_ids) {
    $label = module_invoke($module, 'cluster_api_objects_label', $object_ids, $langcode);
    if (!$label)
      continue;

    $data[$module] = [
      'label' => $label,
      'ids' => $object_ids,
      'weight' => module_invoke($module, 'cluster_api_weight'),
    ];
  }

  if (count($data) === 0)
    return '';

  if (count($data) === 1) {
    $module = key($data);
    $datum = current($data);
    $object_ids = $datum['ids'];
    $label = $datum['label'];

    if (count($object_ids) === 1) {
      // E.g. 'A document was added recently: "My document title"'

      $title = module_invoke($module, 'cluster_api_object_title', current($object_ids), $langcode);
      if (!$title)
        return '';

      return t('@object was added recently: @title', [
        '@object' => drupal_ucfirst($label),
        '@title' => $title,
      ], [
        'langcode' => $langcode,
      ]);
    } else {
      // E.g. '4 documents were added recently.'
      return t('@objects were added recently.', [
        '@objects' => drupal_ucfirst($label),
      ], [
        'langcode' => $langcode,
      ]);
    }
  }

  // E.g. "4 documents, 2 pages and a factsheet were added recently."
  usort($data, function ($a, $b) {
    return $a['weight'] - $b['weight'];
  });
  $items = [];
  foreach ($data as $module => $datum)
    $items[] = $datum['label'];
  return t('@objects were added recently.', [
    '@objects' => _cluster_api_list_and($items, TRUE, $langcode),
  ], [
    'langcode' => $langcode,
  ]);
}

function _cluster_api_list_and($items, $ucfirst, $langcode = 'en') {
  if ($ucfirst && count($items) > 0)
    $items[0] = ucfirst($items[0]);

  switch (count($items)) {
    case 0:
      return '';
    case 1:
      return $items[0];
    default:
      return t('@a and @b', [
        '@a' => implode(', ', array_slice($items, 0, count($items) - 1)),
        '@b' => array_pop($items),
      ], [
        'langcode' => $langcode,
      ]);
  }
}

/**
 * @param stdClass $group Node object
 * @param string $langcode
 * @return string E.g. "Vanuatu Ambae Volcano 2018 (response)", "Africa (region)"
 */
function cluster_api_group_notification_title($group, $langcode = 'en') {
  $display = GroupDisplayProvider::getDisplayProvider($group);

  $title = $group->title;

  $type_label = $display->getGroupTypeLabel();
  if ($type_label)
    $title .= ' (' . t($type_label, [], [
        'langcode' => $langcode,
      ]) . ')';

  return $title;
}

/**
 * Get a list of timezones within a range of hours
 * (e.g. where the current time is anywhere from 2pm to 6pm.)
 *
 * @param int $from E.g. 14 (aka. 2 pm)
 * @param int $to E.g. 18 (aka. 6 pm)
 * @param int[]|NULL $days_of_week Optionally filter by days of the week (0 = sunday)
 * @return string[]
 */
function cluster_api_timezones($from, $to, $days_of_week = NULL) {
  $all_timezones = array_keys(system_time_zones());

  $filter = function ($timezone) use ($from, $to, $days_of_week) {
    $d = new DateTime('now', new DateTimeZone($timezone));
    $hour = intval($d->format('H'), 10);
    $dow = intval($d->format('w'), 10);

    $hour_check = $hour >= $from && $hour < $to;
    if (!$hour_check)
      return FALSE;

    if (!is_null($days_of_week))
      return in_array($dow, $days_of_week);

    return TRUE;
  };

  return array_values(array_filter($all_timezones, $filter));
}

/**
 * Implements hook_schema_alter().
 */
function cluster_api_schema_alter(&$schema) {
  $schema['og_users_roles']['fields']['last_daily_push_notification'] = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ];
  $schema['og_users_roles']['fields']['last_weekly_push_notification'] = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ];
}

/**
 * Maintains a json file which can communicate configs to the cluster_app.
 */
function cluster_api_update_app_config($key, $value) {
  // App currently supports only flat [key, value] pairs.
  $content = @file_get_contents("app_config.json");
  $config = $content ? json_decode($content) : new stdClass();
  $config->{$key} = $value;
  $config->updatedAt = time();
  file_put_contents("app_config.json", json_encode($config, JSON_PRETTY_PRINT));
}

/**
 * @param string $data_base64 E.g. "data://..."
 * @param string $dir E.g. 'public://my/dir"
 * @param string $basename E.g. "picture" yields something like "public://my/dir/picture.jpg"
 * @return int|NULL Created file's fid, or NULL if for any reason it couldn't be created
 * @throws Exception
 */
function _cluster_api_receive_file($data_base64, $dir, $basename) {
  // This reads from a base64 string (e.g. "data:image/jpeg;base64,...")
  $data = file_get_contents($data_base64);
  if (!$data)
    return NULL;

  // Figure out the extension from the mime type
  $ext = _cluster_api_mime2ext(mime_content_type($data_base64));
  $ext = $ext ? '.' . $ext : '';

  // Make sure the directory exists
  if (file_exists($dir) && !is_dir($dir))
    throw new Exception("Not a directory: ".$dir);
  if (!file_exists($dir))
    drupal_mkdir($dir, NULL, TRUE);

  // Now save as a file
  $path = $dir . '/' . $basename . $ext;
  $file = file_save_data($data, $path, FILE_EXISTS_RENAME);
  if ($file === FALSE)
    return NULL;

  return $file->fid;
}

/**
 * Adapted from: https://stackoverflow.com/a/53662733
 */
function _cluster_api_mime2ext($mime) {
  $mime_map = [
    'video/3gpp2' => '3g2',
    'video/3gp' => '3gp',
    'video/3gpp' => '3gp',
    'application/x-compressed' => '7zip',
    'audio/x-acc' => 'aac',
    'audio/ac3' => 'ac3',
    'application/postscript' => 'ai',
    'audio/x-aiff' => 'aif',
    'audio/aiff' => 'aif',
    'audio/x-au' => 'au',
    'video/x-msvideo' => 'avi',
    'video/msvideo' => 'avi',
    'video/avi' => 'avi',
    'application/x-troff-msvideo' => 'avi',
    'application/macbinary' => 'bin',
    'application/mac-binary' => 'bin',
    'application/x-binary' => 'bin',
    'application/x-macbinary' => 'bin',
    'image/bmp' => 'bmp',
    'image/x-bmp' => 'bmp',
    'image/x-bitmap' => 'bmp',
    'image/x-xbitmap' => 'bmp',
    'image/x-win-bitmap' => 'bmp',
    'image/x-windows-bmp' => 'bmp',
    'image/ms-bmp' => 'bmp',
    'image/x-ms-bmp' => 'bmp',
    'application/bmp' => 'bmp',
    'application/x-bmp' => 'bmp',
    'application/x-win-bitmap' => 'bmp',
    'application/cdr' => 'cdr',
    'application/coreldraw' => 'cdr',
    'application/x-cdr' => 'cdr',
    'application/x-coreldraw' => 'cdr',
    'image/cdr' => 'cdr',
    'image/x-cdr' => 'cdr',
    'zz-application/zz-winassoc-cdr' => 'cdr',
    'application/mac-compactpro' => 'cpt',
    'application/pkix-crl' => 'crl',
    'application/pkcs-crl' => 'crl',
    'application/x-x509-ca-cert' => 'crt',
    'application/pkix-cert' => 'crt',
    'text/css' => 'css',
    'text/x-comma-separated-values' => 'csv',
    'text/comma-separated-values' => 'csv',
    'application/vnd.msexcel' => 'csv',
    'application/x-director' => 'dcr',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'docx',
    'application/x-dvi' => 'dvi',
    'message/rfc822' => 'eml',
    'application/x-msdownload' => 'exe',
    'video/x-f4v' => 'f4v',
    'audio/x-flac' => 'flac',
    'video/x-flv' => 'flv',
    'image/gif' => 'gif',
    'application/gpg-keys' => 'gpg',
    'application/x-gtar' => 'gtar',
    'application/x-gzip' => 'gzip',
    'application/mac-binhex40' => 'hqx',
    'application/mac-binhex' => 'hqx',
    'application/x-binhex40' => 'hqx',
    'application/x-mac-binhex40' => 'hqx',
    'text/html' => 'html',
    'image/x-icon' => 'ico',
    'image/x-ico' => 'ico',
    'image/vnd.microsoft.icon' => 'ico',
    'text/calendar' => 'ics',
    'application/java-archive' => 'jar',
    'application/x-java-application' => 'jar',
    'application/x-jar' => 'jar',
    'image/jp2' => 'jp2',
    'video/mj2' => 'jp2',
    'image/jpx' => 'jp2',
    'image/jpm' => 'jp2',
    'image/jpeg' => 'jpg',
    'image/jpg' => 'jpg',
    'image/pjpeg' => 'jpg',
    'application/x-javascript' => 'js',
    'application/json' => 'json',
    'text/json' => 'json',
    'application/vnd.google-earth.kml+xml' => 'kml',
    'application/vnd.google-earth.kmz' => 'kmz',
    'text/x-log' => 'log',
    'audio/x-m4a' => 'm4a',
    'application/vnd.mpegurl' => 'm4u',
    'audio/midi' => 'mid',
    'application/vnd.mif' => 'mif',
    'video/quicktime' => 'mov',
    'video/x-sgi-movie' => 'movie',
    'audio/mpeg' => 'mp3',
    'audio/mpg' => 'mp3',
    'audio/mpeg3' => 'mp3',
    'audio/mp3' => 'mp3',
    'video/mp4' => 'mp4',
    'video/mpeg' => 'mpeg',
    'application/oda' => 'oda',
    'audio/ogg' => 'ogg',
    'video/ogg' => 'ogg',
    'application/ogg' => 'ogg',
    'application/x-pkcs10' => 'p10',
    'application/pkcs10' => 'p10',
    'application/x-pkcs12' => 'p12',
    'application/x-pkcs7-signature' => 'p7a',
    'application/pkcs7-mime' => 'p7c',
    'application/x-pkcs7-mime' => 'p7c',
    'application/x-pkcs7-certreqresp' => 'p7r',
    'application/pkcs7-signature' => 'p7s',
    'application/pdf' => 'pdf',
    'application/octet-stream' => 'pdf',
    'application/x-x509-user-cert' => 'pem',
    'application/x-pem-file' => 'pem',
    'application/pgp' => 'pgp',
    'application/x-httpd-php' => 'php',
    'application/php' => 'php',
    'application/x-php' => 'php',
    'text/php' => 'php',
    'text/x-php' => 'php',
    'application/x-httpd-php-source' => 'php',
    'image/png' => 'png',
    'image/x-png' => 'png',
    'application/powerpoint' => 'ppt',
    'application/vnd.ms-powerpoint' => 'ppt',
    'application/vnd.ms-office' => 'ppt',
    'application/msword' => 'ppt',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation' => 'pptx',
    'application/x-photoshop' => 'psd',
    'image/vnd.adobe.photoshop' => 'psd',
    'audio/x-realaudio' => 'ra',
    'audio/x-pn-realaudio' => 'ram',
    'application/x-rar' => 'rar',
    'application/rar' => 'rar',
    'application/x-rar-compressed' => 'rar',
    'audio/x-pn-realaudio-plugin' => 'rpm',
    'application/x-pkcs7' => 'rsa',
    'text/rtf' => 'rtf',
    'text/richtext' => 'rtx',
    'video/vnd.rn-realvideo' => 'rv',
    'application/x-stuffit' => 'sit',
    'application/smil' => 'smil',
    'text/srt' => 'srt',
    'image/svg+xml' => 'svg',
    'application/x-shockwave-flash' => 'swf',
    'application/x-tar' => 'tar',
    'application/x-gzip-compressed' => 'tgz',
    'image/tiff' => 'tiff',
    'text/plain' => 'txt',
    'text/x-vcard' => 'vcf',
    'application/videolan' => 'vlc',
    'text/vtt' => 'vtt',
    'audio/x-wav' => 'wav',
    'audio/wave' => 'wav',
    'audio/wav' => 'wav',
    'application/wbxml' => 'wbxml',
    'video/webm' => 'webm',
    'audio/x-ms-wma' => 'wma',
    'application/wmlc' => 'wmlc',
    'video/x-ms-wmv' => 'wmv',
    'video/x-ms-asf' => 'wmv',
    'application/xhtml+xml' => 'xhtml',
    'application/excel' => 'xl',
    'application/msexcel' => 'xls',
    'application/x-msexcel' => 'xls',
    'application/x-ms-excel' => 'xls',
    'application/x-excel' => 'xls',
    'application/x-dos_ms_excel' => 'xls',
    'application/xls' => 'xls',
    'application/x-xls' => 'xls',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'xlsx',
    'application/vnd.ms-excel' => 'xlsx',
    'application/xml' => 'xml',
    'text/xml' => 'xml',
    'text/xsl' => 'xsl',
    'application/xspf+xml' => 'xspf',
    'application/x-compress' => 'z',
    'application/x-zip' => 'zip',
    'application/zip' => 'zip',
    'application/x-zip-compressed' => 'zip',
    'application/s-compressed' => 'zip',
    'multipart/x-zip' => 'zip',
    'text/x-scriptzsh' => 'zsh',
  ];

  return isset($mime_map[$mime]) ? $mime_map[$mime] : false;
}

function cluster_api_devel($type, $object, $name = NULL) {
  $wrapper = entity_metadata_wrapper($type, $object);
  $bundle = $wrapper->getBundle();
  $id = $wrapper->getIdentifier();

  if (!isset(ClusterAPI_Type::$entity_map[$type]) || !isset(ClusterAPI_Type::$entity_map[$type][$bundle]))
    return 'Not exported through the API.';

  $api_type = ClusterAPI_Type::$entity_map[$type][$bundle];

  global $user;
  $api = new ClusterAPI_Object($user);

  $objects = $api->getObjects([['type' => $api_type, 'id' => $id]]);
  return kdevel_print_object($objects);
}
