<?php
/**
 * @file
 * Code for the cluster_user feature.
 */

include_once 'cluster_user.features.inc';
/**
 * @file
 * Feature module which hanldes user parameters.
 */

/**
 * Implements hook_action_info().
 */
function cluster_user_action_info() {
  return array(
    'cluster_user_block_account' => array(
      'type' => 'user',
      'label' => t('Block user account'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'cluster_user_unblock_account' => array(
      'type' => 'user',
      'label' => t('Unblock user account'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Block the user account, set status to 0.
 */
function cluster_user_block_account(&$entity, $context) {
  $entity->status = 0;
}

/**
 * Unblock the user account, set status to 1.
 */
function cluster_user_unblock_account(&$entity, $context) {
  $entity->status = 1;
}

/**
 * Implements hook_views_default_views_alter().
 */
function cluster_user_views_default_views_alter(&$views) {
  // Modify the user admin_views to include our custom actions.
  if (isset($views['admin_views_user'])) {
    $handler = &$views['admin_views_user']->display['default']->handler;
    $vbo = &$handler->display->display_options['fields']['views_bulk_operations']['vbo_operations'];
    $vbo['action::cluster_user_block_account'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 0,
      'skip_permission_check' => 0,
      'override_label' => 0,
      'label' => '',
    );
    $vbo['action::cluster_user_unblock_account'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 0,
      'skip_permission_check' => 0,
      'override_label' => 0,
      'label' => '',
    );
  }
}

/**
 * Implements hook_menu().
 */
function cluster_user_menu() {
  return [
    'user/me/edit' => [
      'title' => 'Redirecting to user edit page',
      'access callback' => TRUE,
      'page callback' => 'cluster_user_edit_redirect',
      'type' => MENU_CALLBACK,
    ],
  ];
}

function cluster_user_edit_redirect() {
  global $user;

  if (isset($_GET['destination'])) {
    $destination = $_GET['destination'];
    unset($_GET['destination']);
  }

  if ($user->uid) {
    drupal_goto('user/'.$user->uid.'/edit', [
      'query' => ['destination' => $destination],
    ]);
  } else
    drupal_goto('user/login', [
      'query' => ['destination' => 'user/me/edit'],
    ]);
}

/**
 * Implements hook_custom_theme().
 */
function cluster_user_custom_theme() {
  if (arg(0) === 'user' && arg(2) === 'edit') {
    return variable_get('theme_default');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function cluster_user_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'custom_theme' && isset($implementations['cluster_user'])) {
    $group = $implementations['cluster_user'];
    unset($implementations['cluster_user']);
    $implementations['cluster_user'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_user_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#pre_render'][] = '_cluster_user_register_form_pre_render';

  $groups = ['group_profile', 'group_preferences', 'group_user', 'group_groups', 'group_notifications'];
  $form['#group_children'] = array_filter($form['#group_children'], function($current_group) use ($groups) {
    return !in_array($current_group, $groups);
  });
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#pre_render'][] = '_cluster_user_edit_form_pre_render';

  $form['picture']['picture_delete']['#access'] = FALSE;
  unset($form['picture']['picture_upload']['#description']);

  // Fancy "groups" tableselect field so users can remove themselves from groups.

  $uid = $form['#user']->uid;
  $options = [];
  $default_value = [];

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition('group_type', 'node')
    ->propertyCondition('etid', $uid)
    ->propertyCondition('entity_type', 'user')
    ->execute();

  $gids = [];
  $default_value = [];
  if (!empty($result['og_membership'])) {
    $memberships = og_membership_load_multiple(array_keys($result['og_membership']));
    foreach ($memberships as $membership) {
      $gid = $membership->gid;
      $gids[] = $gid;
      $default_value[$gid] = TRUE;
    }
  }

  $global_id = variable_get('cluster_og_global_id');
  if ($global_id && !in_array($global_id, $gids))
    $gids[] = $global_id;

  foreach ($gids as $gid) {
    $group = node_load($gid);
    $display = GroupDisplayProvider::getDisplayProvider($group);
    $roles = array_filter(
      og_get_user_roles('node', $gid, $uid),
      function($role) {
        return !in_array($role, [OG_AUTHENTICATED_ROLE, OG_ANONYMOUS_ROLE]);
      }
    );

    $options[$gid] = [
      'name' => l($group->title, 'node/'.$group->nid, [
        'attributes' => ['target' => '_blank'],
      ]),
      'type' => $display->getGroupTypeLabel(),
      'role' => implode(', ', $roles),
      'type_machine_name' => $group->type,
      'gid' => $group->nid,
    ];
  }

  $weights_by_type = [
    'geographic_region' => 0,
    'response' => 1,
    'working_group' => 2,
    'hub' => 3,
    'strategic_advisory' => 4,
    'community_of_practice' => 5,
  ];

  uasort($options, function($a, $b) use ($global_id, $weights_by_type) {
    // Global group always comes first
    if ($a['gid'] === $global_id)
      return -1;
    if ($b['gid'] === $global_id)
      return 1;

    // Now sort by group type
    if ($a['type_machine_name'] !== $b['type_machine_name']) {
      if (!isset($weights_by_type[$a['type_machine_name']]))
        $weights_by_type[$a['type_machine_name']] = 100;
      if (!isset($weights_by_type[$b['type_machine_name']]))
        $weights_by_type[$b['type_machine_name']] = 100;
      return $weights_by_type[$a['type_machine_name']] - $weights_by_type[$b['type_machine_name']];
    }

    // Finally, sort alphabetically
    return strcmp($a['name'], $b['name']);
  });

  $header = array(
    'name' => t('Name'),
    'type' => t('Type'),
    'role' => t('Role'),
  );

  $form['cluster_groups'] = array(
    '#type' => 'tableselect',
    '#suffix' => '<p><em>' . t('Uncheck any group to un-follow.') . '</em></p>',
    '#header' => $header,
    '#options' => $options,
    '#multiple' => TRUE,
    '#default_value' => $default_value,
  );

  $form['#group_children']['cluster_groups'] = 'group_groups';
  $form['#submit'][] = 'cluster_user_edit_groups_submit';

  $form['#attached']['js'][] = drupal_get_path('module', 'cluster_user') . '/js/user-edit.js';
}

function cluster_user_edit_groups_submit($form, &$form_state) {
  $user = $form['#user'];

  $groups_input = $form_state['values']['cluster_groups'];
  $gids_to_add = array_keys(array_filter($groups_input));
  $gids_to_remove = array_keys(array_filter($groups_input, function($value) {return !$value;}));

  foreach ($gids_to_add as $gid) {
    $membership = og_get_membership('node', $gid, 'user', $user->uid);
    if (!$membership)
      cluster_og_follow($user, node_load($gid));
  }

  $membership_ids = [];
  foreach ($gids_to_remove as $gid) {
    $membership = og_get_membership('node', $gid, 'user', $user->uid);
    if ($membership)
      $membership_ids[] = $membership->identifier();
  }
  if (!empty($membership_ids))
    og_membership_delete_multiple($membership_ids);
}

function _cluster_user_edit_form_pre_render($elements) {
  unset($elements['group_tabs']['group_preferences']['timezone']['#theme_wrappers']);
  unset($elements['group_tabs']['group_preferences']['locale']['#theme_wrappers']);
  unset($elements['group_tabs']['group_groups']['og_user_node1']['und']['#theme_wrappers']);

  unset($elements['group_tabs']['group_preferences']['timezone']['timezone']['#description']);
  unset($elements['group_tabs']['group_preferences']['locale']['language']['#description']);

  return $elements;
}

function _cluster_user_register_form_pre_render($elements) {
  unset($elements['timezone']['#theme_wrappers']);
  unset($elements['locale']['#theme_wrappers']);
  unset($elements['timezone']['timezone']['#description']);
  unset($elements['locale']['language']['#description']);

  return $elements;
}

/**
 * Implements hook_user_insert().
 *
 * Auto-follows the "Global" group.
 */
function cluster_user_user_insert(&$edit, $account, $category) {
  if ($global_id = variable_get('cluster_og_global_id')) {
    cluster_og_follow($account, node_load($global_id));
  }
}
