<?php
/**
 * @file
 * Code for the cluster_user feature.
 */

include_once 'cluster_user.features.inc';
/**
 * @file
 * Feature module which hanldes user parameters.
 */

/**
 * Implements hook_action_info().
 */
function cluster_user_action_info() {
  return array(
    'cluster_user_block_account' => array(
      'type' => 'user',
      'label' => t('Block user account'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'cluster_user_unblock_account' => array(
      'type' => 'user',
      'label' => t('Unblock user account'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Block the user account, set status to 0.
 */
function cluster_user_block_account(&$entity, $context) {
  $entity->status = 0;
}

/**
 * Unblock the user account, set status to 1.
 */
function cluster_user_unblock_account(&$entity, $context) {
  $entity->status = 1;
}

/**
 * Implements hook_views_default_views_alter().
 */
function cluster_user_views_default_views_alter(&$views) {
  // Modify the user admin_views to include our custom actions.
  if (isset($views['admin_views_user'])) {
    $handler = &$views['admin_views_user']->display['default']->handler;
    $vbo = &$handler->display->display_options['fields']['views_bulk_operations']['vbo_operations'];
    $vbo['action::cluster_user_block_account'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 0,
      'skip_permission_check' => 0,
      'override_label' => 0,
      'label' => '',
    );
    $vbo['action::cluster_user_unblock_account'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 0,
      'skip_permission_check' => 0,
      'override_label' => 0,
      'label' => '',
    );
  }
}

/**
 * Implements hook_menu().
 */
function cluster_user_menu() {
  return [
    'user/me/edit' => [
      'title' => 'Redirecting to user edit page',
      'access callback' => TRUE,
      'page callback' => 'cluster_user_edit_redirect',
      'type' => MENU_CALLBACK,
    ],
  ];
}

function cluster_user_edit_redirect() {
  global $user;

  if (isset($_GET['destination'])) {
    $destination = $_GET['destination'];
    unset($_GET['destination']);
  }

  if ($user->uid) {
    drupal_goto('user/'.$user->uid.'/edit', [
      'query' => ['destination' => $destination],
    ]);
  } else
    drupal_goto('user/login', [
      'query' => ['destination' => 'user/me/edit'],
    ]);
}

/**
 * Implements hook_custom_theme().
 */
function cluster_user_custom_theme() {
  if (arg(0) === 'user' && arg(2) === 'edit') {
    return variable_get('theme_default');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function cluster_user_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'custom_theme' && isset($implementations['cluster_user'])) {
    $group = $implementations['cluster_user'];
    unset($implementations['cluster_user']);
    $implementations['cluster_user'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
//  dpm($form);
  $form['#pre_render'][] = '_cluster_user_edit_form_pre_render';

  $form['picture']['picture_delete']['#access'] = FALSE;
  unset($form['picture']['picture_upload']['#description']);
}

function _cluster_user_edit_form_pre_render($elements) {
  unset($elements['group_tabs']['group_preferences']['timezone']['#theme_wrappers']);
  unset($elements['group_tabs']['group_preferences']['locale']['#theme_wrappers']);
  unset($elements['group_tabs']['group_groups']['og_user_node1']['und']['#theme_wrappers']);

  unset($elements['group_tabs']['group_preferences']['timezone']['timezone']['#description']);
  unset($elements['group_tabs']['group_preferences']['locale']['language']['#description']);

  return $elements;
}
