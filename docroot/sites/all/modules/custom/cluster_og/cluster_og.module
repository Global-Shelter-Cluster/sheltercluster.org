<?php
/**
 * @file
 * Handles all OG related funcitonalities.
 */

include_once 'cluster_og.features.inc';

/**
 * Implements hook_menu().
 */
function cluster_og_menu() {
  $items = array();

  // Generate the geographic_regions menu.
  $query = new EntityFieldQuery();
  $res = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'geographic_region')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute();

  if (isset($res['node'])) {
    // Loop over all geographic_region nodes to create menu items.
    foreach (node_load_multiple(array_keys($res['node'])) as $node) {
      $wrapper = entity_metadata_wrapper('node', $node);
      $path = _cluster_og_generate_region_path($wrapper);
      $items[$path] = array(
        'title' => $wrapper->label(),
        'page callback' => 'cluster_og_geographic_region',
        'page arguments' => array("$node->nid", "$path"),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'menu-regions',
      );
    }
  }

  return $items;
}

/**
 * Generate path for a Geographic region group by prefixing all parents and ancestors labels
 * to the group label.
 */
function _cluster_og_generate_region_path($wrapper, $path = '') {
  $path = strtolower($wrapper->label() . '/' . $path);
  if ($wrapper->field_parent_region->value()) {
    return _cluster_og_generate_region_path($wrapper->field_parent_region, $path);
  }
  return trim($path, '/');
}

/**
 * Page callback.
 * Display a Region Group page.
 * @param $nid
 *  The geographic_region node id.
 * @param $path
 *  The associated menu item path.
 */
function cluster_og_geographic_region($nid, $path) {
  $content['region-group'] = node_view(node_load($nid), 'full');
  return $content;
}

/**
 * Implements hook_node_insert().
 */
function cluster_og_node_insert($node) {
  // Clear the menu cache to add the new region to the menu.
  if ($node->type == 'geographic_region') {
    menu_rebuild();
  }
}

/**
 * @return
 *  Regions menu render array.
 */
function _cluster_og_get_regions_menu() {
  $tree = menu_tree_page_data('menu-regions', NULL, TRUE);
  $output = menu_tree_output($tree);
  return $output;
}

/**
 * Implements hook_theme().
 */
function cluster_og_theme() {
  return array();
}

/**
 * Implements hook_preprocess_page().
 */
function cluster_og_preprocess_page(&$vars) {
  // Add the Region Groups menu to the page.
  $vars['page']['footer_firstcolumn'][] = _cluster_og_get_regions_menu();
}