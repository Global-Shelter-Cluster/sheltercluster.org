<?php
/**
 * @file
 * Handles all OG related funcitonalities.
 */

include_once 'cluster_og.features.inc';

/**
 * Implements hook_menu().
 */
function cluster_og_menu() {
  module_load_include('inc', 'cluster_og', 'includes/cluster_og.menu');
  $items = array();
  // Generate the geographic_regions menu.
  $items = array_merge(cluster_og_menu_region(), $items);
  return $items;
}

/**
 * Page callback.
 * Display a Region Group page.
 * @param $nid
 *  The geographic_region node id.
 * @param $path
 *  The associated menu item path.
 */
function cluster_og_geographic_region($nid, $path) {
  $content['region_group'] = node_view(node_load($nid), 'full');
  return $content;
}

/**
 * Node API.
 */

/**
 * Implements hook_node_load().
 */
function cluster_og_node_view($node) {
  $bundle = $node->type;

  // Group specific actions.
  if (og_is_group_type('node', $bundle)) {
    $gid = $node->nid;

    // Make a list of contact member users.
    if ($contact_member_rid = _cluster_og_get_role_id_by_name($bundle, 'contact member')) {
      if ($contact_members_ids = _cluster_og_get_group_users_by_role($gid, $contact_member_rid)) {
        $accounts = user_load_multiple($contact_members_ids);
        // Prepare a render array.
        $member = array(
          '#theme_wrappers' => array('cluster_og_contact_member'),
          'total' => count($accounts),
        );

        // Add account render arrays.
        foreach ($accounts as $account) {
          $member[$account->uid] = array(user_view($account, 'contact_member'));
        }
        $node->content['contact_members'] = $member;
      }
    }

  }
}

/**
 * Implements hook_node_insert().
 */
function cluster_og_node_insert($node) {
  // Clear the menu cache to add the new region to the menu.
  if ($node->type == 'geographic_region') {
    menu_rebuild();
  }
}

/**
 * Theme API.
 */

/**
 * Implements hook_theme().
 */
function cluster_og_theme() {
  return array(
    'cluster_og_contact_member' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluter_og_region_reference_field' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function cluster_og_preprocess_page(&$vars) {
  module_load_include('inc', 'cluster_og', 'theme/cluster_og.theme');
  _cluster_og_preprocess_page($vars);
}

/**
 * Implements hook_preprocess_field().
 */
function cluster_og_preprocess_field(&$vars) {
  module_load_include('inc', 'cluster_og', 'theme/cluster_og.theme');
  _cluster_og_preprocess_field($vars);
}

/**
 * Helpers.
 */

/**
 * Get the role id for a group from the role name.
 * @param $bundle,
 *  Group entity bundle name.
 * @param $role_name
 *  The role name as stored in the database.
 */
function _cluster_og_get_role_id_by_name($bundle, $role_name) {
  return db_select('og_role', 'og_r')
    ->fields('og_r', array('rid'))
    ->condition('group_bundle', $bundle)
    ->condition('name', $role_name)
    ->execute()->fetchField();
}

/**
 * Get all users with specified role for a group.
 * @param $gid
 *  Group id.
 * @param $rid
 *  OG role id.
 * @return
 *  array of user ids.
 */
function _cluster_og_get_group_users_by_role($gid, $rid) {
  return db_select('og_users_roles', 'og_ur')
    ->fields('og_ur', array('uid'))
    ->condition('gid', $gid)
    ->condition('rid', $rid)
    ->execute()->fetchCol();
}

/**
 * Returns render array for a given menu.
 * @param $menu_name
 *  Machine name of the required menu.
 * @param $current_page_only
 *  If TRUE menu is only expended for the currently viewed page / path.
 *  If FALSE the whole menu tree is provided.
 * @return
 *  Regions menu render array.
 */
function _cluster_og_get_regions_menu($menu_name, $current_page_only = TRUE) {
  if ($current_page_only) {
    $tree = menu_tree_page_data($menu_name, NULL, TRUE);
  }
  else {
    $tree = menu_tree_all_data($menu_name); 
  }
  $output = menu_tree_output($tree);
  return $output;
}

/**
 * Generate path for a Geographic region group by prefixing all parents and ancestors labels
 * to the group label.
 * @param $wrapper
 *  Entity metadata wrapper.
 * @param $path
 *  Recursively obtained path for previous wrappers in the hierarchy.
 * @return
 *  Path string to a geographic_region entity that includes the label of all parent and ancestor geographic_region,
 *  such as asia/philippines/manilla.
 */
function _cluster_og_generate_region_path($wrapper, $path = '') {
  $path = strtolower($wrapper->label() . '/' . $path);
  if ($wrapper->field_parent_region->value()) {
    return _cluster_og_generate_region_path($wrapper->field_parent_region, $path);
  }
  return trim($path, '/');
}