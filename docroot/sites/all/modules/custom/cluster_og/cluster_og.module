<?php
/**
 * @file
 * Handles all OG related funcitonalities.
 */

include_once 'cluster_og.features.inc';
include_once 'cluster_og.pathauto.inc';

const MAX_FOLLOWED_GROUPS = 10;

const TAXONOMY_TERM_TID_COUNTRY = 135;
const TAXONOMY_TERM_TID_REGION = 136;

/**
 *  Implements hook_entity_info_alter().
 */
function cluster_og_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['related_response'] = array(
    'label' => t('Related Response'),
    'custom settings' => FALSE,
  );

  $entity_info['node']['view modes']['related_hub'] = array(
    'label' => t('Related Hub'),
    'custom settings' => FALSE,
  );
}

/**
 * Node API.
 */

/**
 * Implements hook_node_view().
 */
function cluster_og_node_view($node, $view_mode) {
  $bundle = $node->type;
  // Group specific actions.
  if (og_is_group_type('node', $bundle)) {
    $node->content['join_links'] = $view_mode == 'full' ? cluster_og_join_links($node->nid) : FALSE;
    // Get a display provider for the current view mode.
    $group_content = GroupDisplayProvider::getDisplayProvider($node, $view_mode);
    $node->content['editor_menu'] = $group_content->getEditorMenu();
    $node->content['contact_members'] = $group_content->getContactMembers();
    $node->content['featured_documents'] = $group_content->getFeaturedDocuments();
//    $node->content['key_documents'] = $group_content->getKeyDocuments();
    $node->content['recent_documents'] = $group_content->getRecentDocuments();
    $node->content['recent_discussions'] = $group_content->getRecentDiscussions();
    $node->content['dashboard_menu'] = $group_content->getDashboardMenu($node->nid);
    $node->content['contextual_navigation'] = $group_content->getContextualNavigation();
    $node->content['upcoming_events'] = $group_content->getUpcomingEvents();
    $node->content['factsheet'] = $group_content->getFactsheet();
//    $node->content['translation'] = $group_content->getAvailableTranslations();
  }
}

/**
 * Implements hook_node_insert().
 */
function cluster_og_node_insert($node) {
  if (og_is_group('node', $node)) {
    cluster_og_create_alias($node, 'insert');
  }

  // Clear the menu cache to add the new region to the menu.
  if ($node->type == 'geographic_region') {
    menu_rebuild();
  }
}

/**
 *  Implements hook_node_update().
 */
function cluster_og_node_update($node) {
  if (og_is_group('node', $node)) {
    cluster_og_create_alias($node, 'update');
  }
}

/**
 * Theme API.
 */

/**
 * Implements hook_theme().
 */
function cluster_og_theme() {
  return array(
    'cluster_og_contextual_navigation' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_contact_member' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_related_responses' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_related_hubs' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_featured_documents' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_recent_documents' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_recent_discussions' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_upcoming_events' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'variables' => array(
        'global_events_link' => FALSE,
        'all_events_link' => NULL,
        'events' => NULL
      ),
    ),
    'cluster_og_all_events' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'variables' => array(
        'all_events_link' => NULL,
        'events' => NULL
      ),
    ),
    'cluster_og_no_upcoming_event' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'variables' => array(
        'all_events_link' => NULL,
        'events' => array(),
      ),
    ),
    'cluster_og_join_links' => array(
      'template' => 'theme/cluster-og-join-links',
      'variables' => array(
        'header' => t('Join This Group'),
        'instructions' => t('Register and join this group'),
        'link' => FALSE,
      ),
    ),
    'cluster_og_hot_responses' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'template' => 'theme/cluster-og-hot-responses',
      'variables' => array(
        'icons' => FALSE,
        'responses' => FALSE,
      ),
    ),
    'cluster_og_translations' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'template' => 'theme/cluster-og-translations',
      'variables' => array(
        'translations' => [],
      ),
    ),
    'cluster_og_anon_follow' => array(
      'template' => 'theme/cluster-og-anon-follow',
      'variables' => array(
        'group_type' => '',
        'follow_path' => '',
        'form' => NULL,
      ),
    ),
    'cluster_og_email_subscribe' => [
      'template' => 'subscribe-email',
      'variables' => [
        'logo' => '',
        'langcode' => '',
        'confirm_path' => '',
        'group_name' => '',
      ],
      'path' => drupal_get_path('module', 'cluster_og') . '/templates',
    ],
  );
}

function cluster_og_anon_email_subscribe_form($form, &$form_state) {
  $form['email'] = [
    '#type' => 'textfield',
    '#title' => t('Or enter your email address to subscribe without a user account:'),
    '#attributes' => ['placeholder' => t('Email address')],
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Subscribe without an account'),
  ];

  return $form;
}

function cluster_og_anon_email_subscribe_form_validate($form, &$form_state) {
  $email = trim($form_state['values']['email']);
  if (!$email)
    form_set_error('email', t('Email address is required'));
  if (!valid_email_address($email))
    form_set_error('email', t('Invalid email address'));

  if (user_load_by_mail($email)) {
    $display_provider = cluster_nav_get_display_provider();
    form_set_error('email', t('The given email address belongs to an existing user account. Please log in to follow this @group_type.', [
      '@group_type' => $display_provider->getGroupTypeLabel(),
    ]));
  }
}

function cluster_og_anon_email_subscribe_form_submit($form, &$form_state) {
  $email = trim($form_state['values']['email']);
  $display_provider = cluster_nav_get_display_provider();
  $group = $display_provider->getGroup();
  $wrapper = entity_metadata_wrapper('node', $group);

  $subscribers = $wrapper->field_subscribers->value();
  foreach ($subscribers as $subscriber) {
    if (strtolower($email) === strtolower($subscriber)) {
      drupal_set_message(t('You are already subscribed to this @group_type. Please check your spam folder.', [
        '@group_type' => $display_provider->getGroupTypeLabel(),
      ]), 'warning');
      return;
    }
  }

  $gid = $group->nid;
  $hash = drupal_random_key(24);
  $record = [
    'gid' => $gid,
    'hash' => $hash,
    'email' => $email,
    'created' => REQUEST_TIME,
  ];
  $result = drupal_write_record('cluster_og_pending_email_subs', $record);
  if (!$result) {
    drupal_set_message(t('Unknown error: @error', ['@error' => $result]), 'error');
    return;
  }
  $confirm_path = "subscribe/$gid/$hash";

  global $language;
  $langcode = $language->language;

  try {
    $params = [
      'confirm_path' => $confirm_path,
      'group' => $group,
      'langcode' => $langcode,
    ];

    drupal_mail('cluster_og', 'subscribe', $email, $langcode, $params);

    drupal_set_message(t('Please check your email (@email) to confirm your subscription to the "@title" @group_type.', [
      '@email' => $email,
      '@title' => $group->title,
      '@group_type' => $display_provider->getGroupTypeLabel(),
    ]));
  } catch (Exception $e) {
    drupal_set_message(t('Error sending subscription confirmation email. Please try again later.'), 'error');

    watchdog('cluster_og', 'Error sending subscribe email to @email: @error', [
      '@email' => $email,
      '@error' => $e->getMessage(),
    ], WATCHDOG_ERROR);
  }
}

/**
 * Create the join or login link markup for a group that allows members to join.
 * @return
 *  Themed join or login link.
 */
function cluster_og_join_links($gid) {
  global $user;
  $node = node_load($gid);

  // Show leave link.
  if (og_is_member('node', $gid)) {

    // Test if current user is the manager of the group.
    if ($user->uid == $node->uid) {
      return FALSE;
    }

    $vars = array(
      'header' => t('Leave this group'),
      'instructions' => t('Leave this group.'),
      'link' => l(t('Leave'), 'group/node/' . $gid . '/unsubscribe'),
    );
  }
  else {

    // Test if the group is open for joining or invite only.
    if (!og_user_access('node', $gid, 'subscribe')) {
      return FALSE;
    }

    // Show login link.
    if (user_is_anonymous()) {
      $vars = array(
        'header' => t('Login or register'),
        'instructions' => t('Login with an existing account or create a new account to be able to join this group.'),
        'link' => l(t('Login or register'), 'user', array('query' => array('destination' => 'node/'.$gid))),
      );
    }

    // Show join link.
    else {
      $vars = array(
        'header' => t('Join this group'),
        'instructions' => t('Join this group.'),
        'link' => l(t('Join'), 'group/node/' . $gid . '/subscribe'),
      );
    }
  }

  return theme('cluster_og_join_links', $vars);
}

/**
 * Implements hook_preprocess_page().
 */
function cluster_og_preprocess_page(&$vars) {
  module_load_include('inc', 'cluster_og', 'theme/cluster_og.theme');
  _cluster_og_preprocess_page($vars);
}

/**
 * Helpers.
 */

/**
 * Returns render array for a given menu.
 * @param $menu_name
 *  Machine name of the required menu.
 * @param $current_page_only
 *  If TRUE menu is only expended for the currently viewed page / path.
 *  If FALSE the whole menu tree is provided.
 * @return
 *  Regions menu render array.
 */
function _cluster_og_get_regions_menu($menu_name, $current_page_only = TRUE) {
  if ($current_page_only) {
    $tree = menu_tree_page_data($menu_name, NULL, TRUE);
  }
  else {
    $tree = menu_tree_all_data($menu_name);
  }
  $output = menu_tree_output($tree);
  return $output;
}

/**
 *  Implements hook_node_presave().
 */
function cluster_og_node_presave($node) {
  if ($node->type == 'geographic_region') {
    $node->path['alias'] = _cluster_og_region_alias($node);

    $node->menu['enabled'] = 1;
    $node->menu['menu_name'] = 'menu-regions';
    $node->menu['link_title'] = $node->title;
    $node->menu['description'] = '';

    $wrapper = entity_metadata_wrapper('node', $node);
    $parent = $wrapper->field_parent_region->value();
    if ($parent) {
      $mlid = db_select('menu_links', 'ml')
        ->condition('ml.link_path', 'node/'.$parent->nid)
        ->condition('ml.menu_name', 'menu-regions')
        ->fields('ml', array('mlid'))
        ->execute()
        ->fetchField();

      if ($mlid) {
        $node->menu['plid'] = $mlid;
      }
    }
  }
}

/**
 * Recursive function to generate a region node's alias.
 */
function _cluster_og_region_alias($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $parent = $wrapper->field_parent_region->value();

  module_load_include('inc', 'pathauto');
  $prefix = $parent ? _cluster_og_region_alias($parent).'/' : '';
  return $prefix . pathauto_cleanstring($node->title);
}

/**
 * Calls node_save() on all regions, in the correct order so that the aliases and
 * menu links get regenerated.
 * Call this without any parameters.
 */
function cluster_og_regenerate_region_aliases($parent_nid = NULL) {
  if (is_null($parent_nid)) {
    // Delete the whole regions menu on the main call to this function.
    menu_delete_links('menu-regions');
  }

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->condition('n.type', 'geographic_region')
    ->addJoin('LEFT', 'field_data_field_parent_region', 'f', 'f.entity_type = :type AND f.entity_id = n.nid', array(':type' => 'node'));

  if ($parent_nid) {
    $query->condition('f.field_parent_region_target_id', $parent_nid);
  }
  else {
    $query->isNull('f.field_parent_region_target_id');
  }

  foreach ($query->execute()->fetchCol() as $child_nid) {
    $node = node_load($child_nid);
    node_save($node);

    cluster_og_regenerate_region_aliases($child_nid);
  }
}

/**
 * Returns themed the hot responses content.
 */
function cluster_og_hot_responses() {
  // Get the response types terms.
  // @TODO make this more robust to withstand term / vocab changes in the admin interface.
  $vocab = taxonomy_vocabulary_machine_name_load('disaster_type');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocab->vid));
  foreach ($terms as $term) {
    $icon = str_replace(' ', '-', strtolower($term->name));
    $term->icon_name = $icon;
    $term->icon_class = $icon . '-icon';
  }

  // Get hot response nodes.
  if ($nodes = cluster_og_get_hot_response_nodes()) {
    $responses = array();
    foreach ($nodes as $node) {
      try {
        // @TODO manage multilingual entity wrapper.
        $wrapper = entity_metadata_wrapper('node', $node);
        $responses[$node->nid] = array(
          'link' => l($wrapper->label(), 'node/' . $node->nid, array('attributes' => array('title' => $wrapper->field_disaster_type->name->value()))),
          'type' => $terms[$wrapper->field_disaster_type->value()->tid],
        );
      }
      catch (EntityMetadataWrapperException $exc) {
        watchdog(
          'cluster_ogs',
          'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
           NULL,
           WATCHDOG_ERROR
        );
      }
    }
    return array(
      '#theme' => 'cluster_og_hot_responses',
      '#responses' => $responses,
      '#icons' => $terms,
    );
  }
  return FALSE;
}

/**
 * Provides a render array of a list of all the hot responses, linked to the node.
 */
function cluster_og_hot_responses_list() {
  $items = array();
  // Get hot response nodes.
  if ($nodes = cluster_og_get_hot_response_nodes()) {
    $responses = array();
    foreach ($nodes as $node) {
      try {
        // @TODO manage multilingual entity wrapper.
        $wrapper = entity_metadata_wrapper('node', $node);
        $items[] = l($wrapper->label(), 'node/' . $node->nid);
      }
      catch (EntityMetadataWrapperException $exc) {
        watchdog(
          'cluster_ogs',
          'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
           NULL,
           WATCHDOG_ERROR
        );
      }
    }
  }
  return array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#suffix' => $items[] = l(t('All current operations'), 'current-operations', array('attributes' => array('class' => array('see-all')))),
  );
}

/**
 * EntityFieldQuery wrapper
 * @return
 *   All featured responses node in the nodequeue.
 */
function cluster_og_get_hot_response_nodes() {
  $featured_responses_queue = nodequeue_load_queue_by_name('featured_responses');
  $nodes = nodequeue_load_nodes($featured_responses_queue->qid, FALSE, 0, 0);

  if (count($nodes) == 0) {
    return FALSE;
  }

  return $nodes;
}

/**
 * @return array
 */
function cluster_og_get_hot_response_nids() {
  $nids = cluster_og_get_hot_response_nodes();
  if ($nids === FALSE)
    $nids = [];
  else
    $nids = array_values(array_map(function($node) {return intval($node->nid);}, $nids));
  return $nids;
}

/**
 * Implements hook_url_outbound_alter().
 * Changes region URL to response URL when field_response_auto_redirect is set.
 */
function cluster_og_url_outbound_alter(&$path, &$options, $original_path) {
  if (!preg_match('/^node\/(\d+)$/', $path, $matches)) {
    // Not a "node view" path.
    return;
  }
  $nid = $matches[1];

  $node = node_load($nid);

  if ($node->type != 'geographic_region') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($response = $wrapper->field_response_auto_redirect->value()) {
    $path = drupal_get_path_alias('node/' . $response->nid);
  }
}

/**
 * Implements hook_init().
 * Redirects to response page if the current is a region with field_response_auto_redirect set.
 */
function cluster_og_init() {
  $node = menu_get_object();
  if (!$node || $node->type != 'geographic_region' || arg(2)) {
    // If arg(2) is set, then this is not the "node view" page.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($response = $wrapper->field_response_auto_redirect->value()) {
    drupal_goto('node/' . $response->nid);
  }
}

/**
 * Implements hook_menu().
 */
function cluster_og_menu() {
  $items['cluster_og/groups/autocomplete'] = array(
    'page callback' => 'cluster_og_groups_autocomplete',
    'file' => 'cluster_og.ajax.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer nodes'),
  );

  $items['admin/config/shelter/og'] = [
    'title' => 'Cluster group settings',
    'description' => 'Settings related to groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cluster_og_settings'],
    'access arguments' => ['administer site configuration'],
    'file' => 'cluster_og.form.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['node/%node/follow'] = [
    'title' => 'Follow group',
    'page callback' => 'cluster_og_follow_callback',
    'page arguments' => [1],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['node/%node/un-follow'] = [
    'title' => 'Un-follow group',
    'page callback' => 'cluster_og_unfollow_callback',
    'page arguments' => [1],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['node/%/followers'] = array(
    'title' => 'Followers',
    'page callback' => 'cluster_og_followers',
    'page arguments' => array(1),
    'access callback' => 'cluster_og_followers_access',
    'access arguments' => array(1),
    'title callback' => '_cluster_og_followers_title_callback',
    'title arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['subscribe/%/%'] = [
    'page callback' => 'cluster_og_email_subscribe',
    'page arguments' => [1, 2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['unsubscribe/%/%'] = [
    'page callback' => 'cluster_og_email_unsubscribe',
    'page arguments' => [1, 2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

function cluster_og_email_subscribe($gid, $hash) {
  if (!is_numeric($gid) || $gid <= 0
    || empty($hash) || !is_string($hash)
  ) {
    drupal_goto('<front>');
  } // Something ain't valid

  $gid = intval($gid, 10);

  $row = db_select('cluster_og_pending_email_subs', 's')
    ->fields('s', ['email'])
    ->condition('gid', $gid)
    ->condition('hash', $hash)
    ->execute()
    ->fetchAssoc();

  if (!$row) {
    return MENU_NOT_FOUND;
  }

  $email = $row['email'];

  $group = node_load($gid);
  if (!og_is_group('node', $group)) {
    drupal_goto('<front>');
  } // Referenced gid isn't a group (shouldn't happen)

  $wrapper = entity_metadata_wrapper('node', $group);
  $display_provider = GroupDisplayProvider::getDisplayProvider($group);

  if (!$wrapper->field_enable_email_subscriptions->value()) {
    drupal_set_message(t('Email subscriptions no longer enabled for this @group_type.', [
      '@group_type' => $display_provider->getGroupTypeLabel(),
    ]), 'warning');
    drupal_goto('node/' . $gid);
  }

  $subscribers = $wrapper->field_subscribers->value();
  if (!in_array($email, $subscribers)) {
    $wrapper->field_subscribers[] = $email;
    $wrapper->save();
  }

  db_delete('cluster_og_pending_email_subs')
    ->condition('gid', $gid)
    ->condition('email', $email)
    ->execute();

  drupal_set_message(t('You have been successfully subscribed to this @group_type (@email).', [
    '@group_type' => $display_provider->getGroupTypeLabel(),
    '@email' => $email,
  ]));
  drupal_goto('node/' . $gid);
}

/**
 * Implements hook_mail().
 */
function cluster_og_mail($key, &$message, $params) {
  if ($key !== 'subscribe')
    throw new Exception("Unknown key: ".$key);

  // E.g. "Ecuador Earthquake 2016 (response)"
  $group_name = cluster_api_group_notification_title($params['group'], $params['langcode']);

  $body = [
    '#theme' => 'cluster_og_email_subscribe',
    '#logo' => url('sites/all/themes/shelter/assets/svg/replacement/logo-global-shelter-cluster-4x.png', ['absolute' => TRUE]),
    '#langcode' => $params['langcode'],
    '#confirm_path' => $params['confirm_path'],
    '#group_name' => $group_name,
  ];

  $message['subject'] = t('Confirm subscription to @group', ['@group' => $group_name]);
  $message['from_name'] = $group_name;
  $message['body'] = [drupal_render($body)];
}

function cluster_og_email_unsubscribe($gid, $email) {
  if (!is_numeric($gid) || $gid <= 0
    || empty($email) || !valid_email_address($email)
  ) {
    drupal_goto('<front>');
  } // Something ain't valid

  $gid = intval($gid, 10);

  $group = node_load($gid);
  if (!og_is_group('node', $group)) {
    drupal_goto('<front>');
  } // Referenced gid isn't a group (shouldn't happen)

  $wrapper = entity_metadata_wrapper('node', $group);
  $display_provider = GroupDisplayProvider::getDisplayProvider($group);

  $subscribers = $wrapper->field_subscribers->value();
  $idx = array_search($email, $subscribers);
  if ($idx !== FALSE) {
    $wrapper->field_subscribers[$idx]->set(NULL); // deletes it
    $wrapper->save();
  }

  drupal_set_message(t('You are no longer subscribed to this @group_type (@email).', [
    '@group_type' => $display_provider->getGroupTypeLabel(),
    '@email' => $email,
  ]));
  drupal_goto('node/' . $gid);
}

function cluster_og_followers_access($gid) {
  return og_is_group('node', $gid) && user_access('administer nodes');
}

function cluster_og_is_group_followers_page() {
  $router_item = menu_get_item(current_path());

  if ($router_item && isset($router_item['path']))
    return $router_item['path'] === 'node/%/followers';

  return FALSE;
}

function cluster_og_followers($gid) {
  $view = views_get_view('followers');
  return $view->render();
}

/**
 * Menu title callback.
 */
function _cluster_og_followers_title_callback($nid) {
  global $language;
  $title = t('Followers');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilingual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid));
    return $wrapper->label() . ' - ' . $title;
  }
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'cluster_og',
      'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
      NULL,
      WATCHDOG_ERROR
    );
  }
  return $title;
}

function cluster_og_follow($user, $group) {
  if (!og_is_group('node', $group))
    throw new Exception('Not a group');

  $followed_groups = ClusterAPI_Type_User::getFollowedGroups($user);

  $following = in_array($group->nid, $followed_groups);
  if ($following)
    return;

  if (count($followed_groups) >= MAX_FOLLOWED_GROUPS)
    throw new Exception('Cannot follow more groups, maximum reached');

  if (!og_is_member('node', $group->nid, 'user', $user)) {
    $m = og_membership_create('node', $group->nid, 'user', $user->uid, 'og_user_node1');
    $m->save();
  }

  og_role_grant('node', $group->nid, $user->uid, cluster_api_get_follower_role_by_bundle($group->type));
}

function cluster_og_follow_callback($group) {
  global $user;
  if (!user_is_logged_in())
    drupal_goto('user/login', ['query' => ['destination' => 'node/'.$group->nid.'/follow']]);

  cluster_og_follow($user, $group);
  drupal_goto('node/'.$group->nid);
}

function cluster_og_unfollow_callback($group) {
  global $user;
  if (!user_is_logged_in())
    drupal_goto('user/login', ['query' => ['destination' => 'node/' . $group->nid . '/follow']]);

  cluster_og_unfollow($user, $group);
  drupal_goto('node/'.$group->nid);
}

function cluster_og_unfollow($user, $group) {
  if (!og_is_group('node', $group))
    throw new Exception('Not a group');

  $followed_groups = ClusterAPI_Type_User::getFollowedGroups($user);

  $following = in_array($group->nid, $followed_groups);
  if (!$following)
    return;

  og_role_revoke('node', $group->nid, $user->uid, cluster_api_get_follower_role_by_bundle($group->type));

  $membership = og_get_membership('node', $group->nid, 'user', $user->uid);
  if (!$membership)
    return; // Shouldn't happen

  $roles = og_get_user_roles('node', $group->nid, $user->uid);
  $roles = array_filter($roles, function($role) {return $role !== OG_AUTHENTICATED_ROLE;}); // Because _of course_ they have this role.
  if (empty($roles))
    og_membership_delete($membership->identifier());
}

/**
 * Implements hook_node_access().
 *
 * Test if the user is allowed to manage a specific content type within the context
 * of the currently viewed organic group.  Managed means all operations except 'view', 'delete'.
 */
function cluster_og_node_access($node, $account, $op) {
  if ($op == 'view') {
    return NODE_ACCESS_IGNORE;
  }
  // Test if we are creating content in the context of a group.
  if ($key = _cluster_context_is_being_used()) {
    $q = drupal_get_query_parameters();
    if (! isset($q[$key])) {
      return NODE_ACCESS_IGNORE;
    }
    $gid = $q[$key];
    $node_type = is_object($node) ? $node->type : $node;

    // Test if the current user has specific permissions for the current node type being managed.
    if (og_user_access('node', $gid, 'manage_child_' . $node_type)) {
      // For safety, make it so that users need the global delete rights, not just og rights.
      if ($op != 'delete') {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_og_permission().
 *
 * Permissions will be checked in hook_node_grant implementation based on the assumption that the permission
 * is named 'manage_child_CONTENT_TYPE_MACHINE_NAME'.
 */
function cluster_og_og_permission() {
  return array(
    'manage_child_hub' => array(
      'title' => t('Manage child hub'),
      'description' => t("Allow user to manage child hubs."),
    ),
    'manage_child_strategic_advisory' => array(
      'title' => t('Manage child strategic advisory group'),
      'description' => t("Allow user to manage child strategic advisory group."),
    ),
    'manage_child_working_group' => array(
      'title' => t('Manage child working group'),
      'description' => t("Allow user to manage child technical working group."),
    ),
  );
}

/**
 * Implements hook_query_TAG_alter()
 */
function cluster_og_query_node_has_no_parent_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_parent_content', 'p', 'node.nid = p.entity_id');
  $query->isNull('p.field_parent_content_target_id');
}

function cluster_og_sort_response_nids_active_first(&$nids) {
  // Stable usort function from http://php.net/manual/en/array.sorting.php#119944
  $stable_usort = function(&$array, $cmp) {
    $i = 0;
    $array = array_map(function($elt)use(&$i) {
      return [$i++, $elt];
    }, $array);
    usort($array, function($a, $b)use($cmp) {
      return $cmp($a[1], $b[1]) ?: ($a[0] - $b[0]);
    });
    $array = array_column($array, 1);
  };

  $nodes = node_load_multiple($nids);

  $stable_usort($nids, function($a, $b) use ($nodes) {
    if (!array_key_exists($a, $nodes) || !array_key_exists($b, $nodes))
      return 0;

    $items_a = field_get_items('node', $nodes[$a], 'field_response_status');
    if (!$items_a)
      return 1;
    $items_b = field_get_items('node', $nodes[$b], 'field_response_status');
    if (!$items_b)
      return -1;

    return strcmp($items_a[0]['value'], $items_b[0]['value']);
  });
}

/**
 * This involves "pages" only (there is no cluster_pages module).
 *
 * Implements hook_daily_push_notification_objects_alter().
 */
function cluster_og_daily_push_notification_objects_alter(&$objects_by_gid) {
  return _cluster_og_notification_objects_alter($objects_by_gid, CLUSTER_API_DAY);
}

/**
 * Implements hook_daily_email_notification_objects_alter().
 */
function cluster_og_daily_email_notification_objects_alter(&$objects_by_gid) {
  return _cluster_og_notification_objects_alter($objects_by_gid, CLUSTER_API_DAY);
}

/**
 * Implements hook_weekly_email_notification_objects_alter().
 */
function cluster_og_weekly_email_notification_objects_alter(&$objects_by_gid) {
  return _cluster_og_notification_objects_alter($objects_by_gid, CLUSTER_API_WEEK);
}

function _cluster_og_notification_objects_alter(&$objects_by_gid, $period) {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['page', 'library', 'arbitrary_library', 'photo_gallery'], 'IN')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('created', REQUEST_TIME - $period, '>')
    ->execute();

  if (!$results || !$results['node'])
    return;

  $nids = array_keys($results['node']);

  $query = db_select('og_membership', 'om')
    ->fields('om', ['gid', 'etid'])
    ->condition('group_type', 'node')
    ->condition('entity_type', 'node')
    ->condition('etid', $nids, 'IN');

  $results = $query
    ->execute()
    ->fetchAll();

  foreach ($results as $result)
    $objects_by_gid[$result->gid]['cluster_og'][] = $result->etid;
}

/**
 * This involves "pages" only (there is no cluster_pages module).
 *
 * Implements hook_cluster_api_link_data().
 */
function cluster_og_cluster_api_link_data($objects, $gid) {
  if (count($objects) === 1) {
    $page_node = node_load($objects[0]);

    if (!$page_node || $page_node->status != NODE_PUBLISHED)
      // Shouldn't happen, but if it does, let's just go to the group
      return ['link' => 'group:pages', 'id' => $gid];

    switch ($page_node->type) {
      case 'page':
        $url = url('node/' . $page_node->nid, ['absolute' => TRUE]);
        $title = $page_node->title;
        return ['link' => $page_node->type, 'id' => $page_node->nid, 'page_url' => $url, 'page_title' => $title];

      case 'library':
      case 'arbitrary_library':
      case 'photo_gallery':
        return ['link' => $page_node->type, 'id' => $page_node->nid];

      default:
        // Again, shouldn't happen
        return ['link' => 'group:pages', 'id' => $gid];
    }
  }

  return ['link' => 'group:pages', 'id' => $gid];
}

/**
 * This involves "pages" only (there is no cluster_pages module).
 *
 * Implements hook_cluster_api_objects_label().
 */
function cluster_og_cluster_api_objects_label($ids, $langcode) {
  // Filter to make sure all ids are published nodes
  $query = new EntityFieldQuery();
  $all_count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['page', 'library', 'arbitrary_library', 'photo_gallery'], 'IN')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('nid', $ids, 'IN')
    ->count()
    ->execute();
  if ($all_count === 0)
    return '';

  return format_plural($all_count, 'a page', '@count pages', [], ['langcode' => $langcode]);
}

/**
 * This involves "pages" only (there is no cluster_pages module).
 *
 * Implements hook_cluster_api_object_title().
 */
function cluster_og_cluster_api_object_title($id, $langcode) {
  $node = node_load($id);
  return ($node->status == NODE_PUBLISHED && in_array($node->type, ['page', 'library', 'arbitrary_library', 'photo_gallery']))
    ? $node->title
    : NULL;
}

/**
 * This involves "pages" only (there is no cluster_pages module).
 *
 * Implements hook_cluster_api_weight().
 */
function cluster_og_cluster_api_weight() {
  return 20;
}

/**
 * Implements hook_cluster_email_render_data().
 */
function cluster_og_cluster_email_render_data($ids, $langcode) {
  // Filter to make sure all ids are published
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['page', 'library', 'arbitrary_library', 'photo_gallery'], 'IN')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('nid', $ids, 'IN');

  $results = $query->execute();
  if (!isset($results['node']))
    return NULL;

  $nids = array_keys($results['node']);
  $ret = [];
  foreach (node_load_multiple($nids) as $nid => $node) {
    $ret[$nid] = [
      'title' => $node->title,
      'link' => url('node/'.$nid, ['absolute' => TRUE]),
    ];
  }

  return $ret;
}
