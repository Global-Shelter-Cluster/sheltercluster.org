<?php
/**
 * @file
 * Handles all OG related funcitonalities.
 */

include_once 'cluster_og.features.inc';

/**
 *  Implements hook_entity_info_alter().
 */
function cluster_og_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['related_response'] = array(
    'label' => t('Related Response'),
    'custom settings' => FALSE,
  );

  $entity_info['node']['view modes']['related_hub'] = array(
    'label' => t('Related Hub'),
    'custom settings' => FALSE,
  );
}

/**
 * Node API.
 */

/**
 * Implements hook_node_view().
 */
function cluster_og_node_view($node, $view_mode) {
  $bundle = $node->type;

  // Group specific actions.
  if (og_is_group_type('node', $bundle)) {
    $group_content = new GroupPageContent($node, $view_mode);
    $node->content['contact_members'] = $group_content->getContactMembers();
    $node->content['related_hubs'] = $group_content->getRelatedHubs();
    $node->content['related_responses'] = $group_content->getRelatedResponses();
    $node->content['key_documents'] = $group_content->getKeyDocuments();
    $node->content['recent_documents'] = $group_content->getRecentDocuments();
    $node->content['recent_discussions'] = $group_content->getRecentDiscussions();
    $node->content['upcoming_event'] = NULL;
  }
}

/**
 * Implements hook_node_insert().
 */
function cluster_og_node_insert($node) {
  // Clear the menu cache to add the new region to the menu.
  if ($node->type == 'geographic_region') {
    menu_rebuild();
  }
}

/**
 * Theme API.
 */

/**
 * Implements hook_theme().
 */
function cluster_og_theme() {
  return array(
    'cluster_og_contextual_navigation' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_contact_member' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_related_responses' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_related_hubs' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_key_documents' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_key_documents_by_tag' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_recent_documents' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
    'cluster_og_recent_discussions' => array(
      'file' => 'theme/cluster_og.theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function cluster_og_preprocess_page(&$vars) {
  module_load_include('inc', 'cluster_og', 'theme/cluster_og.theme');
  _cluster_og_preprocess_page($vars);
}

/**
 * Helpers.
 */

/**
 * Returns render array for a given menu.
 * @param $menu_name
 *  Machine name of the required menu.
 * @param $current_page_only
 *  If TRUE menu is only expended for the currently viewed page / path.
 *  If FALSE the whole menu tree is provided.
 * @return
 *  Regions menu render array.
 */
function _cluster_og_get_regions_menu($menu_name, $current_page_only = TRUE) {
  if ($current_page_only) {
    $tree = menu_tree_page_data($menu_name, NULL, TRUE);
  }
  else {
    $tree = menu_tree_all_data($menu_name);
  }
  $output = menu_tree_output($tree);
  return $output;
}

/**
 *  Implements hook_node_presave().
 */
function cluster_og_node_presave($node) {
  if ($node->type == 'geographic_region') {
    $node->path['alias'] = _cluster_og_region_alias($node);

    $node->menu['enabled'] = 1;
    $node->menu['menu_name'] = 'menu-regions';
    $node->menu['link_title'] = $node->title;
    $node->menu['description'] = '';

    $wrapper = entity_metadata_wrapper('node', $node);
    $parent = $wrapper->field_parent_region->value();
    if ($parent) {
      $mlid = db_select('menu_links', 'ml')
        ->condition('ml.link_path', 'node/'.$parent->nid)
        ->condition('ml.menu_name', 'menu-regions')
        ->fields('ml', array('mlid'))
        ->execute()
        ->fetchField();

      if ($mlid) {
        $node->menu['plid'] = $mlid;
      }
    }
  }
}

/**
 * Recursive function to generate a region node's alias.
 */
function _cluster_og_region_alias($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $parent = $wrapper->field_parent_region->value();

  module_load_include('inc', 'pathauto');
  $prefix = $parent ? _cluster_og_region_alias($parent).'/' : '';
  return $prefix . pathauto_cleanstring($node->title);
}

/**
 * Calls node_save() on all regions, in the correct order so that the aliases and
 * menu links get regenerated.
 * Call this without any parameters.
 */
function cluster_og_regenerate_region_aliases($parent_nid = NULL) {
  if (is_null($parent_nid)) {
    // Delete the whole regions menu on the main call to this function.
    menu_delete_links('menu-regions');
  }

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->condition('n.type', 'geographic_region')
    ->addJoin('LEFT', 'field_data_field_parent_region', 'f', 'f.entity_type = :type AND f.entity_id = n.nid', array(':type' => 'node'));

  if ($parent_nid) {
    $query->condition('f.field_parent_region_target_id', $parent_nid);
  }
  else {
    $query->isNull('f.field_parent_region_target_id');
  }

  foreach ($query->execute()->fetchCol() as $child_nid) {
    $node = node_load($child_nid);
    node_save($node);

    cluster_og_regenerate_region_aliases($child_nid);
  }
}