<?php
/**
 * @file
 * Code for the cluster_search feature.
 */

include_once 'cluster_search.features.inc';
include_once 'includes/service.inc';

/**
 *  Implements hook_preprocess_page().
 */
function cluster_search_preprocess_page(&$variables) {
  $search_form = module_invoke('search', 'block_view', 'form');
  $search_form['content']['#attributes']['class'] = 'search';
  $search_form['content']['search_block_form']['#attributes']['placeholder'] = t('Search site');
  $variables['search_form'] = $search_form;

  // We need to load the form again to avoid duplicate IDs.
  $search_form = module_invoke('search', 'block_view', 'form');
  $search_form['content']['#attributes']['class'] = 'search';
  $search_form['content']['search_block_form']['#attributes']['placeholder'] = t('Search site');
  $variables['search_form_bottom'] = $search_form;
}

/**
 * Implements hook_facetapi_facet_info_alter().
 */
function cluster_search_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  if (!empty($facet_info['field_language'])) {
    $facet_info['field_language']['map callback'] = '_cluster_search_field_language_facet_map_callback';
  }
}

function _cluster_search_field_language_facet_map_callback(array $values, array $options = array()) {
  $map = array();
  $languages = language_list();

  foreach ($values as $value) {
    if (empty($languages[$value])) {
      continue;
    }

    $map[$value] = $languages[$value]->name;
  }

  return $map;
}

/**
 * Implements hook_search_api_service_info().
 */
function cluster_search_search_api_service_info() {
  $services['cluster_algolia'] = array(
    'name' => t('Algolia for Cluster site'),
    'description' => t('Provides integration with the Algolia search engine service'),
    'class' => 'SearchApiClusterAlgoliaService',
  );

  return $services;
}

/**
 * Implements hook_menu().
 */
function cluster_search_menu() {
  $items['admin/config/search/search_api/cluster_algolia'] = array(
    'title' => 'Algolia settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cluster_search_algolia_settings'),
    'access arguments' => array('administer search_api'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function cluster_search_algolia_settings() {
  $form = array();

  $form['cluster_search_algolia_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Algolia application ID'),
    '#default_value' => variable_get('cluster_search_algolia_app_id'),
    '#required' => TRUE,
  );

  $form['cluster_search_algolia_search_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Algolia search key'),
    '#default_value' => variable_get('cluster_search_algolia_search_key'),
    '#required' => TRUE,
  );

  $form['cluster_search_algolia_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Index prefix'),
    '#default_value' => variable_get('cluster_search_algolia_prefix', 'dev'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_cluster_mega_menu_alter().
 */
function cluster_search_cluster_mega_menu_alter(&$menu_output) {
  foreach ($menu_output as &$value) {
    if (isset($value['#attributes']) && isset($value['#attributes']['class'])) {
      $key = array_search('last', $value['#attributes']['class']);
      if ($key !== FALSE)
        unset($value['#attributes']['class'][$key]);
    }
  }
  $menu_output['cluster_search'] = [
    '#theme' => 'cluster_search_mega_menu',
  ];
  _cluster_search_common_attach($menu_output['cluster_search']);
}

function _cluster_search_common_attach(&$render_array) {
  if (!array_key_exists('#attached', $render_array))
    $render_array['#attached'] = [];

  $render_array['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/algolia.js';
  $render_array['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/lib/vue.min.js';
  $render_array['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/lib/algoliasearchLite.js';
//  $render_array['#attached']['js'][] = [
//    'type' => 'external',
//    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.3/vue.min.js'
//  ];
//  $render_array['#attached']['js'][] = [
//    'type' => 'external',
//    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/algoliasearch/3.24.5/algoliasearchLite.js'
//  ];
  $render_array['#attached']['js'][] = [
    'type' => 'setting',
    'data' => [
      'cluster_search' => [
        'algolia_app_id' => variable_get('cluster_search_algolia_app_id'),
        'algolia_search_key' => variable_get('cluster_search_algolia_search_key'),
        'algolia_prefix' => variable_get('cluster_search_algolia_prefix'),
      ]
    ]
  ];
}

/**
 * Implements hook_theme().
 */
function cluster_search_theme($existing, $type, $theme, $path) {
  return [
    'cluster_search_mega_menu' => [
      'template' => 'cluster_search_mega_menu',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
    'cluster_search_docs_list' => [
      'template' => 'cluster_search_docs_list',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
    'cluster_search_docs_facets' => [
      'template' => 'cluster_search_docs_facets',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
  ];
}

function cluster_search_docs_page($query = NULL, $show_facets = TRUE, $default_sort = NULL, $default_sort_direction = NULL, $excluded_facets = array(), $show_related_groups = FALSE) {
  $ret = [
    ['#theme' => 'cluster_search_docs_list'],
  ];

  if ($show_facets)
    $ret['side-column'] = ['#theme' => 'cluster_search_docs_facets'];

  _cluster_search_common_attach($ret);
  $ret['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/documents.js';
  $ret['#attached']['js'][] = [
    'type' => 'external',
    'data' => 'https://use.fontawesome.com/releases/v5.0.0/js/all.js'
  ];
  $ret['#attached']['js'][] = [
    'type' => 'setting',
    'data' => [
      'cluster_search' => [
        'taxonomies' => cluster_docs_taxonomies(TRUE),
        'taxonomy_groups' => cluster_docs_taxonomy_groups(),
      ]
    ]
  ];
  return $ret;
}
