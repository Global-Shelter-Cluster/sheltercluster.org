<?php
/**
 * @file
 * Code for the cluster_search feature.
 */

include_once 'cluster_search.features.inc';
include_once 'includes/service.inc';

/**
 *  Implements hook_preprocess_page().
 */
function cluster_search_preprocess_page(&$variables) {
  $search_form = module_invoke('search', 'block_view', 'form');
  $search_form['content']['#attributes']['class'] = 'search';
  $search_form['content']['search_block_form']['#attributes']['placeholder'] = t('Search site');
  $variables['search_form'] = $search_form;

  // We need to load the form again to avoid duplicate IDs.
  $search_form = module_invoke('search', 'block_view', 'form');
  $search_form['content']['#attributes']['class'] = 'search';
  $search_form['content']['search_block_form']['#attributes']['placeholder'] = t('Search site');
  $variables['search_form_bottom'] = $search_form;
}

/**
 * Implements hook_facetapi_facet_info_alter().
 */
function cluster_search_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  if (!empty($facet_info['field_language'])) {
    $facet_info['field_language']['map callback'] = '_cluster_search_field_language_facet_map_callback';
  }
}

function _cluster_search_field_language_facet_map_callback(array $values, array $options = array()) {
  $map = array();
  $languages = language_list();

  foreach ($values as $value) {
    if (empty($languages[$value])) {
      continue;
    }

    $map[$value] = $languages[$value]->name;
  }

  return $map;
}

/**
 * Implements hook_search_api_service_info().
 */
function cluster_search_search_api_service_info() {
  $services['cluster_algolia'] = array(
    'name' => t('Algolia for Cluster site'),
    'description' => t('Provides integration with the Algolia search engine service'),
    'class' => 'SearchApiClusterAlgoliaService',
  );

  return $services;
}

/**
 * Implements hook_menu().
 */
function cluster_search_menu() {
  $items['admin/config/search/search_api/cluster_algolia'] = array(
    'title' => 'Algolia settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cluster_search_algolia_settings'),
    'access arguments' => array('administer search_api'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function cluster_search_algolia_settings() {
  $form = array();

  $form['cluster_search_algolia_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Algolia application ID'),
    '#default_value' => variable_get('cluster_search_algolia_app_id'),
    '#required' => TRUE,
  );

  $form['cluster_search_algolia_search_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Algolia search key'),
    '#default_value' => variable_get('cluster_search_algolia_search_key'),
    '#required' => TRUE,
  );

  $form['cluster_search_algolia_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Index prefix'),
    '#default_value' => variable_get('cluster_search_algolia_prefix', 'dev'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_cluster_mega_menu_alter().
 */
function cluster_search_cluster_mega_menu_alter(&$menu_output) {
  foreach ($menu_output as &$value) {
    if (isset($value['#attributes']) && isset($value['#attributes']['class'])) {
      $key = array_search('last', $value['#attributes']['class']);
      if ($key !== FALSE)
        unset($value['#attributes']['class'][$key]);
    }
  }
  $menu_output['cluster_search'] = [
    '#theme' => 'cluster_search_mega_menu',
  ];
  _cluster_search_common_attach($menu_output['cluster_search']);
}

function _cluster_search_common_attach(&$render_array) {
  if (!array_key_exists('#attached', $render_array))
    $render_array['#attached'] = [];

  $render_array['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/algolia.js';
  $render_array['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/lib/vue.min.js';
  $render_array['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/lib/algoliasearchLite.js';
//  $render_array['#attached']['js'][] = [
//    'type' => 'external',
//    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.3/vue.min.js'
//  ];
//  $render_array['#attached']['js'][] = [
//    'type' => 'external',
//    'data' => 'https://cdnjs.cloudflare.com/ajax/libs/algoliasearch/3.24.5/algoliasearchLite.js'
//  ];
  $render_array['#attached']['js'][] = [
    'type' => 'setting',
    'data' => [
      'cluster_search' => [
        'algolia_app_id' => variable_get('cluster_search_algolia_app_id'),
        'algolia_search_key' => variable_get('cluster_search_algolia_search_key'),
        'algolia_prefix' => variable_get('cluster_search_algolia_prefix'),
      ]
    ]
  ];
}

/**
 * Implements hook_theme().
 */
function cluster_search_theme($existing, $type, $theme, $path) {
  return [
    'cluster_search_mega_menu' => [
      'template' => 'cluster_search_mega_menu',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
    'cluster_search_docs_list' => [
      'template' => 'cluster_search_docs_list',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
    'cluster_search_docs_facets' => [
      'template' => 'cluster_search_docs_facets',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
    'cluster_search_events_list' => [
      'template' => 'cluster_search_events_list',
      'path' => drupal_get_path('module', 'cluster_search').'/templates',
    ],
  ];
}

/**
 * @param array $facet_filters
 *   Keyed by field name (e.g. "field_document_type"), value is an array of term names (string keys) and TRUE (values).
 *   Filters defined by this param will prevent the facet from being shown.
 * @param array|NULL $nid_filter
 *   If specified, restricts to only show the given document nids (used for arbitrary libraries).
 * @param bool $show_facets
 *
 * @return array
 */
function cluster_search_docs_page($facet_filters = [], $nid_filter = NULL, $show_facets = TRUE) {
  $ret = [
    ['#theme' => 'cluster_search_docs_list'],
  ];

  if ($show_facets)
    $ret['side-column'] = ['#theme' => 'cluster_search_docs_facets'];

  _cluster_search_common_attach($ret);
  // Tell the frontend whether the current user has edit/delete permissions for
  // docs, for the relevant groups.
  $display_provider = cluster_nav_get_display_provider();
  $doc_permissions_by_group = [];
  if ($display_provider) {
    foreach ($display_provider->getSearchGroupNids() as $groupNid) {
      $doc_permissions_by_group[$groupNid] = [
        'edit' => og_user_access('node', $groupNid, 'edit document content'),
        'delete' => og_user_access('node', $groupNid, 'delete document content'),
      ];
    }
  }
  $ret['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/documents.js';
  $ret['#attached']['js'][] = [
    'type' => 'setting',
    'data' => [
      'cluster_search' => [
        'taxonomies' => cluster_docs_taxonomies(TRUE),
        'taxonomy_groups' => cluster_docs_taxonomy_groups(),
        'doc_permissions_by_group' => $doc_permissions_by_group,
        'initial_filters' => $facet_filters,
        'nid_filter' => $nid_filter,
      ]
    ]
  ];
  return $ret;
}

/**
 * @return array
 */
function cluster_search_events_page() {
  $ret = [
    ['#theme' => 'cluster_search_events_list'],
  ];

  _cluster_search_common_attach($ret);
  // Tell the frontend whether the current user has edit/delete permissions for
  // events, for the relevant groups.
  $display_provider = cluster_nav_get_display_provider();
  $event_permissions_by_group = [];
  if ($display_provider) {
    foreach ($display_provider->getSearchGroupNids() as $groupNid) {
      $event_permissions_by_group[$groupNid] = [
        'edit' => og_user_access('node', $groupNid, 'edit event content'),
        'delete' => og_user_access('node', $groupNid, 'delete event content'),
      ];
    }
  }
  $ret['#attached']['js'][] = drupal_get_path('module', 'cluster_search') . '/js/events.js';
  $ret['#attached']['css'][] = drupal_get_path('module', 'addressfield') . '/addressfield.css';
  $ret['#attached']['js'][] = [
    'type' => 'setting',
    'data' => [
      'cluster_search' => [
        'event_permissions_by_group' => $event_permissions_by_group,
      ]
    ]
  ];
  return $ret;
}

/**
 * Implements hook_cluster_og_dashboard_menu_alter().
 */
function cluster_search_cluster_og_dashboard_menu_alter(&$items) {
  $display_provider = cluster_nav_get_display_provider();

  if (cluster_docs_is_group_documents_page() && isset($items['documents'])) {
    $normal_label = t('Documents from this @type', ['@type' => $display_provider->getGroupTypeLabel()]);
    $key_label = t('Key documents');

    $subgroups_label = t('Include ' . _cluster_search_list_and($display_provider->getSubgroupTypes()));

    $items['documents']['#suffix'] = <<<EOS
    <ul class="optgroup" v-cloak v-if="showModes">
      <li><label><input type="radio" value="normal" v-model="mode"> $normal_label</label></li>
      <li><label><input type="radio" value="key" v-model="mode"> $key_label</label></li>
      <li v-if="hasSubgroups"><label><input type="radio" value="descendants" v-model="mode"> $subgroups_label</label></li>
    </ul>
EOS;
  }

  if (cluster_events_is_group_events_page() && isset($items['events'])) {
    $upcoming_label = t('Upcoming');
    $all_label = t('All events');

    $subgroups_label = t('Include ' . _cluster_search_list_and($display_provider->getSubgroupTypes()));

    $items['events']['#suffix'] = <<<EOS
    <ul class="optgroup" v-cloak v-if="showModes">
      <li><label><input type="radio" value="upcoming" v-model="mode"> $upcoming_label</label></li>
      <li><label><input type="radio" value="all" v-model="mode"> $all_label</label></li>
      <li v-if="hasSubgroups"><label><input type="radio" value="descendants" v-model="mode"> $subgroups_label</label></li>
    </ul>
EOS;
  }
}

function _cluster_search_list_and($items) {
  switch (count($items)) {
    case 0:
      return '';
    case 1:
      return $items[0];
    default:
      return implode(', ', array_slice($items, 0, count($items) - 1))
        . ' and ' . array_pop($items);
  }
}
