<?php
/**
 * @file
 * Code for the cluster_libraries feature.
 */

include_once 'cluster_libraries.features.inc';
include_once 'cluster_libraries.vbo.inc';

/**
 * Implements hook_node_view_alter().
 * 
 * Creates a document table list and appends it to the page content.
 * Most of the logic of this function has to do with applying filters to the
 * Search API query based on the library's configuration.
 * Depending on the content type, different filters will be applied to the query.
 */
function cluster_libraries_node_view_alter(&$build) {
  $node = $build['#node'];
  $valid_types = array('library', 'arbitrary_library');
  if (! in_array($node->type, $valid_types) || $build['#view_mode'] != 'full') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  // Keyed by field name, value is an array of term names (string keys) and TRUE (values)
  $filters = [];
  $nid_filter = NULL;

  switch ($node->type) {
    case 'library' :
      $fields = cluster_docs_taxonomies();
      foreach ($fields as $field) {
        if (!isset($node->$field))
          continue;

        $info = field_info_field($field);
        switch ($info['type']) {
          case 'language_field':
            if (!$node->field_language)
              continue;

            $filters[$field] = [$node->field_language[LANGUAGE_NONE][0]['name'] => TRUE];
            break;
          case 'taxonomy_term_reference':
            $value = $wrapper->$field->value();
            if (!$value)
              continue;

            $filters[$field] = [];
            foreach ((array) $value as $term) {
              $filters[$field][$term->name] = TRUE;
            }
            break;
        }
      }
      break;
    case 'arbitrary_library':
      $nid_filter = $wrapper->field_arbitrary_document_ref->raw();
      break;
  }

  $build[] = cluster_search_docs_page($filters, $nid_filter);
}
