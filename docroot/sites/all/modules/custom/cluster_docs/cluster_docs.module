<?php
/**
 * @file
 * Code for the cluster_docs feature.
 */

include_once 'cluster_docs.features.inc';
include_once 'cluster_docs.admin.inc';
include_once 'cluster_docs.pathauto.inc';

const CLUSTER_DOCS_PER_PAGE = 60;

/**
 *  Implements hook_menu().
 */
function cluster_docs_menu() {
  $items['node/%/documents'] = array(
    'title' => 'Documents',
    'page callback' => 'cluster_docs_all',
    'page arguments' => array(1),
    'access callback' => 'og_is_group',
    'access arguments' => array(0, 1),
    'title callback' => '_cluster_docs_title_callback',
    'title arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['search-documents'] = array(
    'title' => 'Search documents',
    'access arguments' => array('access content'),
    'page callback' => 'cluster_docs_global_search',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/doc_preview_update'] = array(
    'title' => 'Update PDF previews for documents',
    'access arguments' => array('edit any document content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cluster_docs_pdf_preview_update_form'],
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function _cluster_docs_pdf_preview_query() {
  $query = db_select('node', 'n');
  $query->join('field_data_field_file', 'f', 'f.entity_type = :type AND n.nid = f.entity_id', [':type' => 'node']);
  $query->join('file_managed', 'fm', 'f.field_file_fid = fm.fid');
  $query->leftJoin('field_data_field_preview', 'd', 'd.entity_type = :type AND n.nid = d.entity_id', [':type' => 'node']);
  $query->fields('n', array('nid'));
  $query->condition('d.field_preview_fid', NULL);
  $query->condition('n.type', 'document');
  $query->condition('fm.filemime', 'application/pdf');
  return $query;
}

function cluster_docs_pdf_preview_update_form() {
  $count = _cluster_docs_pdf_preview_query()->countQuery()->execute()->fetchField();

  $form[] = [
    '#type' => 'html_tag',
    '#tag' => 'p',
    '#value' => t('Documents without preview (includes non-PDF documents): %count', ['%count' => $count]),
  ];

  $form['limit'] = [
    '#type' => 'textfield',
    '#title' => t('Limit (how many batches to run, 0 or empty for no limit)'),
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Run for all documents without preview'),
  ];

  return $form;
}

function cluster_docs_pdf_preview_update_form_submit($form, &$form_state) {
  $count = _cluster_docs_pdf_preview_query()->countQuery()->execute()->fetchField();

  $num_operations = floor($count / 20); // Batches of 20 docs each
  if (intval($form_state['values']['limit']) > 0)
    $num_operations = min($num_operations, intval($form_state['values']['limit']));

  $operations = [];
  for ($i = $num_operations - 1; $i >= 0; $i--) {
    $operations[] = [
      'cluster_docs_pdf_preview_update_op',
      [$i],
    ];
  }


  batch_set([
    'operations' => $operations,
    'title' => 'Saving documents',
    'progress_message' => t('Processed batch @current out of @total (20 documents per batch).'),
  ]);
}

function cluster_docs_pdf_preview_update_op($operation_details, &$context) {
  $query = _cluster_docs_pdf_preview_query();
  $query->orderBy('nid');
  $page = $operation_details;
  $query->range($page * 20, 20);
  $result = $query->execute()->fetchCol();
  $nodes = entity_load('node', $result);

  foreach ($nodes as $node)
    node_save($node);
}

/**
 * Menu title callback.
 */
function _cluster_docs_title_callback($nid) {
  global $language;
  $title = t('Documents');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilingual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid));
    return $wrapper->label() . ' - ' . $title;
  }
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'cluster_docs',
      'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
       NULL,
       WATCHDOG_ERROR
    );
  }
  return $title;
}

/**
 * Return the 3 most recent documents.
 *
 * @return [type] [description]
 */
function cluster_docs_recent() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_report_meeting_date', 'value', 'DESC')
    ->addTag('cluster_docs_key_or_featured')
    ->range(0, 3);
  $results = $query->execute();
  if (!isset($results['node'])) {
    return FALSE;
  }
  $nids = array_keys($results['node']);
  $docs = cluster_docs_prepare_row_data($nids, TRUE);

  return theme('cluster_og_recent_documents', array(
    'docs' => $docs,
    'all_documents_link' => '/search-documents',
  ));
}

/**
 * Filter documents by those that are marked as either "key docs" or "featured".
 *
 * Implements hook_query_TAG_alter().
 */
function cluster_docs_query_cluster_docs_key_or_featured_alter(SelectQuery $query) {
  $query->join('field_data_field_key_document', 'fk', 'fk.entity_type = :entity_type AND fk.entity_id = node.nid', [':entity_type' => 'node']);
  $query->join('field_data_field_featured', 'ff', 'ff.entity_type = :entity_type AND ff.entity_id = node.nid', [':entity_type' => 'node']);
  $query->condition(db_or()
    ->condition('fk.field_key_document_value', 1)
    ->condition('ff.field_featured_value', 1)
  );
}

/**
 * Page callback, shows a group's documents using Search API.
 * @param $nid
 * @return Render array
 */
function cluster_docs_all($nid) {
  return cluster_search_docs_page();
}

function cluster_docs_is_group_documents_page() {
  $router_item = menu_get_item(current_path());

  if ($router_item && isset($router_item['path']))
    return $router_item['path'] === 'node/%/documents';

  return FALSE;
}

/**
 * Page callback to show all documents of the website.
 *
 * @return Render array
 */
function cluster_docs_global_search() {
  return cluster_search_docs_page();
}

/**
 * Returns a basic query for searching documents.
 * @return SearchApiQueryInterface
 */
function cluster_docs_query() {
  $query = search_api_query('default_node_index', array());

  $filter = $query->createFilter();
  $filter->condition('type', 'document');
  $query->filter($filter);

  return $query;
}

/**
 * Returns a list of taxonomy term fields used as facets in document list pages.
 * @param bool $labels If TRUE, returns machine names as keys and labels as values, otherwise just the machine names.
 * @return array
 */
function cluster_docs_taxonomies($labels = FALSE) {
  $machine_names = [
//    'search_api_language',
    'field_language',
    'field_document_type',
    // Basic tags
    'field_coordination_management',
    'field_information_management',
    'field_technical_support_design',
    // Advanced tags
    'field_assess_monitor_eval',
    'field_inter_cluster',
    'field_cross_cutting_issues',
    'field_response_phase',
    'field_intervention_materials',
    'field_intervention_programming',
    'field_settlement_type',
    'field_non_food_items',
    'field_issues',
    'field_toolkit',
    'field_meeting_management',
  ];

  if (!$labels)
    return $machine_names;

  $ret = [];
  foreach ($machine_names as $machine_name) {
    $field = field_info_instance('node', $machine_name, 'document');
    $ret[$machine_name] = $field['label'];
  }
  return $ret;
}

/**
 * Returns how many taxonomies are in each group (regular taxonomies, basic tags, advanced tags).
 * This matches what's returned by cluster_docs_taxonomies().
 * @return array
 */
function cluster_docs_taxonomy_groups() {
  $groups = [2, 3];
  $groups[] = count(cluster_docs_taxonomies()) - array_sum($groups);
  return $groups;
}

/**
 * Build a document list page. Returns a render array with the table, pager and
 * facets.
 * @param SearchApiQueryInterface $query
 * @param bool $show_facets
 * @param string|null $default_sort
 * @param string|null $default_sort_direction
 * @param array $excluded_facets
 * @param $show_related_groups: indicates that the function is meant to show the global docs search page.
 * @return array
 */
function cluster_docs_page($query, $show_facets = TRUE, $default_sort = NULL, $default_sort_direction = NULL, $excluded_facets = array(), $show_related_groups = FALSE) {
  // Figure out the sort column and direction from $_GET (store in $sort_key and $sort_direction).
  $sort_options = array(
    'title' => 'title_field',
    'size' => 'field_file:file:size',
    'date' => 'field_report_meeting_date',
  );
  $sort_key = $default_sort;
  $sort_direction = isset($_GET['sort_direction'])
    ? ($_GET['sort_direction'] == 'DESC' ? 'DESC' : 'ASC')
    : ($default_sort_direction ? $default_sort_direction : 'ASC');

  if (isset($_GET['sort']) && array_key_exists(strtolower($_GET['sort']), $sort_options)) {
    $sort_key = strtolower($_GET['sort']);
  }

  if ($sort_key) {
    $sort_field = $sort_options[$sort_key];
    $query->sort($sort_field, $sort_direction);
  }

  // If there is no sort key by default make the search by date on the DESC order.
  if (!$sort_key) {
    $sort_field = $sort_options['date'];
    $query->sort($sort_field, 'DESC');
  }

  // Build "query" params for the header links.
  $sort_link_params = array();
  foreach ($sort_options as $key => $data) {
    $params = array(
      'sort' => $key,
    );
    if (isset($_GET['f'])) {
      $params['f'] = $_GET['f'];
    }

    if ($sort_key == $key && $sort_direction == 'ASC') {
      // Already sorting in ASC, next click turns it into DESC.
      $params['sort_direction'] = 'DESC';
    }
    elseif ($sort_key == $key && $sort_direction == 'DESC') {
      // Sorting in DESC, next click disables sorting altogether.
      unset($params['sort']);
    }

    $sort_link_params[$key] = $params;
  }

  // Pagination.
  $offset = pager_find_page() * CLUSTER_DOCS_PER_PAGE;
  $query->range($offset, CLUSTER_DOCS_PER_PAGE);

  // Execute the actual query using Search API.
  $results = $query->execute();

  // This is necessary for the pager to work.
  pager_default_initialize($results['result count'], CLUSTER_DOCS_PER_PAGE);

  // "Reset filters" link (shown in two places)
  $reset_link_bottom = $reset_link = FALSE;
  if (isset($_GET['f'])) {
    $reset_link_bottom = $reset_link = array(
      '#theme' => 'link',
      '#text' => 'reset filters',
      '#path' => current_path(),
      '#options' => array(
        'html' => FALSE,
        'attributes' => array('class' => 'reset-filters'),
      ),
    );
    $reset_link_bottom['#prefix'] = '<small>';
    $reset_link_bottom['#suffix'] = '</small>';
  }

  // Facets
  $facets = array();

  if ($show_facets) {
    // This array defines which facets to show and in what order.
    $facets_to_show = array_diff(cluster_docs_taxonomies(), $excluded_facets);

    foreach (facetapi_get_block_info(array('block')) as $delta => $info) {
      $block_view = module_invoke('facetapi', 'block_view', $delta);
      if (is_null($block_view)) {
        continue;
      }
      $content = $block_view['content'];

      $facet = $content['#settings']->facet;
      if (!in_array($facet, $facets_to_show)) {
        continue;
      }

      switch ($facet) {
        case 'attachments_field_file':
          $content['#title'] = t('File Contains');
          break;
      }

      $content['#options'] = $content[$facet];

      $content['#theme'] = 'cluster_docs_facet';
      $content['#weight'] = array_search($facet, $facets_to_show);

      $facets[$delta] = $content;
    }

    $title = NULL;
    $document_contains = NULL;

    // Read the title filter value from the URL, if it exists.
    if (isset($_GET['f']) && is_array($_GET['f'])) {
      foreach ($_GET['f'] as $filter) {
        if (substr($filter, 0, 6) == 'title:') {
          $title = substr($filter, 6);
        }

        if (substr($filter, 0, 23) == 'attachments_field_file:') {
          $document_contains = substr($filter, 23);
        }
      }
    }

    $facets[] = array(
      '#weight' => -50,
      '#theme' => 'cluster_docs_facet',
      '#title' => 'Title Contains',
      '#options' => FALSE,
      '#child' => array(
        array(
          '#type' => 'textfield',
          '#name' => 'title',
          '#value' => $title,
        ),
        array(
          '#type' => 'button',
          '#name' => 'title_search',
          '#value' => 'Search',
        ),
        '#prefix' => '<div class="clearfix">',
        '#suffix' => '</div>',
      ),
    );

    // $facets[] = array(
    //   '#weight' => -49,
    //   '#theme' => 'cluster_docs_facet',
    //   '#title' => 'Document Contains',
    //   '#options' => FALSE,
    //   '#child' => array(
    //     array(
    //       '#type' => 'textfield',
    //       '#name' => 'document',
    //       '#value' => $document_contains,
    //     ),
    //     array(
    //       '#type' => 'button',
    //       '#name' => 'document_search',
    //       '#value' => 'Search',
    //     ),
    //     '#prefix' => '<div class="clearfix">',
    //     '#suffix' => '</div>',
    //   ),
    // );
  }

  drupal_add_js(drupal_get_path('module', 'cluster_docs') . '/js/search.js');

  $result_nids = FALSE;
  if (isset($results['results'])) {
    $result_nids = array_keys($results['results']);
  }

  $ret = array(
    array(
      '#theme' => 'cluster_docs_table_list',
      '#heading' => t('Documents') . ' (' . $results['result count'] . ')',
      '#docs' => $result_nids ? cluster_docs_prepare_row_data($result_nids, $show_related_groups) : FALSE,
      '#reset_link' => $reset_link ? render($reset_link) : NULL,
      '#sort_link_params' => $sort_link_params,
      '#sort_column' => $sort_key,
      '#sort_direction' => $sort_direction,
    ),
    'pager' => array('#theme' => 'pager'),
  );

  if ($show_facets) {
    $ret['side-column'] = array(
      '#prefix' => '<section class="facets">',
      '#suffix' => '</section>',
      'facets' => $facets,
      'reset_link' => $reset_link_bottom,
    );
  };

  return $ret;
}

/**
 *  Get all key docs for a group, grouped by category.
 * @param $gid
 *  Group node id.
 * @return
 *  Renderable array of documents grouped by vocabulary and displayed as cards.
 */
function cluster_docs_get_grouped_key_docs($gid) {
  // Use the field_group module API to generate a list of categories.
  $info = field_group_info_groups('node', 'document', 'form', TRUE);
  $basic_tag_fields = $info['group_basic_tags']->children;
  $advanced_tag_fields = $info['group_advanced_tags']->children;
  $categories = array_merge($basic_tag_fields, $advanced_tag_fields);

  $grouped_docs = array();
  foreach ($categories as $category_field) {
    $query = new EntityFieldQuery();
    $res = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'document')
      ->fieldCondition('og_group_ref', 'target_id', $gid)
      ->fieldCondition('field_featured', 'value', 1, '!=')
      ->fieldCondition('field_key_document', 'value', 1)
      ->fieldCondition($category_field, 'tid', 'NULL', '!=')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->execute();

    if (isset($res['node'])) {
      // Get the vocabulary associated with this field.
      $info = field_info_field($category_field);
      $vocab_machine_name = $info['settings']['allowed_values'][0]['vocabulary'];
      $vocab = taxonomy_vocabulary_machine_name_load($vocab_machine_name);
      $grouped_docs[] = array(
        '#theme' => 'cluster_docs_cards_list',
        '#heading' => $vocab->name,
        '#docs' => cluster_docs_prepare_card_data(array_keys($res['node'])),
      );
    }
  }
  return $grouped_docs;
}

/**
 * Prepare the data for document cards.
 * @param $nids
 *  Document node ids.
 * @return
 *  Array of document data ready to be used in cards lists.
 */
function cluster_docs_prepare_card_data($nids) {
  $docs = array();
  $properties = array('title', 'link', 'link_url', 'is_link', 'is_file', 'is_file_class', 'description', 'filesize',
    'file_extension', 'is_image', 'image_uri', 'has_preview', 'preview_uri', 'source',);

  // @TODO language negocitation.
  global $language;
  $langcode = $language->language;
  foreach (node_load_multiple($nids) as $node) {
    // Set default values.
    $doc = array_fill_keys($properties, FALSE);
    try {

      // @TODO insert language negociation in info array.
      $wrapper = entity_metadata_wrapper('node', $node);
      $doc['title'] = $wrapper->label();

      $url = url("node/{$node->nid}");
      $doc['link_url'] = $url;
      $doc['link'] = l('<span>' . $doc['title'] . '</span>', $url, array('attributes' => array('target' => '_blank'),'html' => TRUE));

      // Prepare the description.
      $desc = '';
      if ($body = $wrapper->body->value()) {
        // Use user supplied summary if available.
        if($body['safe_summary']) {
          $desc = $body['safe_summary'];
        }
        // Create summary.
        elseif ($body['safe_value']) {
          $alter = array(
            // @TODO get this value from the body field settings.
            'max_length' => 400,
            'ellipsis' => TRUE,
            'word_boundary' => TRUE,
            'html' => TRUE,
          );
          $desc = views_trim_text($alter, $body['safe_value']);
        }
      }
      $doc['description'] = $desc;

      // Test if this document is a file field.
      if ($file = $wrapper->field_file->value()) {
        $doc['is_file'] = TRUE;
        $doc['is_file_class'] = '';
        if ($doc['is_file']) {
          $doc['is_file_class'] = 'local-file';
        }

        $file_extension = pathinfo($file['filename'], PATHINFO_EXTENSION);
        $doc['file_extension'] = l($file_extension, $url, array('attributes' => array('target' => '_blank')));

        // Test if the attached file is an image.
        // @TODO the image file will probably not be the actual document file.
        switch ($file_extension) {
          case 'png':
          case 'jpg':
          case 'gif':
            $doc['is_image'] = TRUE;
            $doc['image_uri'] = $file['uri'];
            break;
        }
        $doc['filesize'] = number_format($file['filesize'] / 1048576, 2);
      }

      // Test if this document has a preview image.
      if ($file = $wrapper->field_preview->value()) {
        $doc['has_preview'] = TRUE;
        $doc['preview_uri'] = $file['uri'];
      }

      // Test if this document is a link field.
      if ($link = $wrapper->field_link->value()) {
        $doc['is_link'] = TRUE;
      }

      // Set the source value.
      if ($source = $wrapper->field_document_source->value()) {
        $doc['source'] = $source;
      }

      $docs[] = $doc;

    }
    catch (EntityMetadataWrapperException $exc) {
      watchdog(
        'cluster_docs',
        'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
         NULL,
         WATCHDOG_ERROR
      );
    }
  }
  return $docs;
}

function cluster_docs_get_download_url($node) {
  if ($node->type != 'document') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($file = $wrapper->field_file->value()) {
    return file_create_url($file['uri']);
  }
  else {
    return $wrapper->field_link->url->value();
  }
}

/**
 * Prepare the data for document table rows.
 * @param $nids
 *  Document node ids.
 * @return
 *  Array of document data ready to be used in cards lists.
 */
function cluster_docs_prepare_row_data($nids, $show_related_groups = FALSE) {
  $docs = array();
  $properties = array('title', 'link', 'link_url', 'is_link', 'is_file', 'is_file_class', 'description', 'filesize',
    'file_extension', 'is_image', 'image_uri', 'has_preview', 'preview_uri', 'source', 'tags');

  global $language;
  $langcode = $language->language;

  module_load_include('inc', 'cluster_docs', 'cluster_docs.helpers');

  foreach (node_load_multiple($nids) as $node) {
    // Set default values.
    $doc = array_fill_keys($properties, FALSE);
    try {
      // @TODO insert language negociation in info array.
      /** @var EntityDrupalWrapper $wrapper */
      $wrapper = entity_metadata_wrapper('node', $node);
      $wrapper->language($language->language);

      $doc['title'] = $wrapper->label();

      $doc['node_url'] = $wrapper->get('url')->value();

      // Insert the group on the table
      // Group logic
      $group_title = '';
      $group_wrapper = $wrapper->og_membership->value();

      // Create group links.
      $doc['group'] = '';
      if ($show_related_groups) {
        $doc['group'] = t('Response: ');
        $last_group = count($group_wrapper) - 1;
        // Get all the groups ids for a document.
        foreach ($group_wrapper as $index => $value) {
          $separator = ", ";
          if ($index == $last_group) {
            $separator = '';
          }
          $group_id = $value->gid;
          $group_node = node_load($group_id);
          $group_title = $group_node->title;
          $group_alias = drupal_get_path_alias('node/' . $group_id . '/documents');

          $group_link = '';
          $options = array();
          if (isset($_GET['f'])) {
            foreach ($_GET['f'] as $key => $facet_value) {
              // Add the f[] string to each array key.
              $facets['f[' . $key . ']'] = $facet_value;
            }
            $options['query'] = array($facets);
          }
          $group_link = l(t($group_title), '/' . $group_alias, $options, array('attributes' => array('class' => array('documents-link'))));

          $doc['group'] .= $group_link . $separator;
        }
      }

      $url = $wrapper->url->value();
      $doc['link_url'] = $url;
      $doc['link'] = l($doc['title'], $url, array('attributes' => array('target' => '_blank')));
      $doc['edit_link'] = node_access('update', $node) ? l('edit', 'node/'.$node->nid.'/edit') : '';

      $doc['download_link'] = array(
        '#markup' => l(t('Download'), $url),
        '#prefix' => '<span class="document-link">',
        '#suffix' => '</span>',
      );

      // Prepare the description.
      $desc = '';
      if ($body = $wrapper->body->value()) {
        // Use user supplied summary if available.
        if($body['safe_summary']) {
          $desc = strip_tags($body['safe_summary']);
        }
        // Create summary.
        elseif ($body['safe_value']) {
          $alter = array(
            // @TODO get this value from the body field settings.
            'max_length' => 100,
            'ellipsis' => TRUE,
            'word_boundary' => TRUE,
            'html' => TRUE,
          );
          $desc = views_trim_text($alter, strip_tags($body['safe_value']));
        }
      }

      if ($desc) {
        $doc['description'] = t('Description: !description', array(
          '!description' => $desc
        ));
      }
      else {
        $doc['description'] = '';
      }

      // Test if this document is a file field.
      if ($file = $wrapper->field_file->value()) {
        $doc['is_file'] = TRUE;
        $doc['is_file_class'] = '';
        if ($doc['is_file']) {
          $doc['is_file_class'] = 'local-file';
        }

        $file_extension = pathinfo($file['filename'], PATHINFO_EXTENSION);
        $file_extension = strtoupper($file_extension);
        $doc['file_extension'] = array(
          '#markup' => $file_extension,
          '#prefix' => '<span class="file-extension is-small">',
          '#suffix' => '</span>'
        );

        // Test if the attached file is an image.
        // @TODO the image file will probably not be the actual document file.
        switch ($file_extension) {
          case 'png':
          case 'jpg':
          case 'gif':
            $doc['is_image'] = TRUE;
            $doc['image_uri'] = $file['uri'];
            break;
        }
        $doc['filesize'] = number_format($file['filesize'] / 1048576, 2);
      }

      // Test if this document has a preview image.
      if ($file = $wrapper->field_preview->value()) {
        $doc['has_preview'] = TRUE;
        $doc['preview_uri'] = $file['uri'];
      }

      // Test if this document is a link field.
      if ($link = $wrapper->field_link->value()) {
        $doc['is_link'] = TRUE;
      }
      // Set the report/meeting date.
      $report_meeting_date = $wrapper->field_report_meeting_date->value();
      $doc['date'] = $report_meeting_date ? format_date($report_meeting_date, 'custom', 'Y m d') : NULL;

      // Set the publication date.
      $doc['publication_date'] = format_date($node->created, 'custom', 'Y/m/d');

      // Set the group referencing this
      $doc['group_references'] = $wrapper->og_group_ref->value();

      if ($tags = cluster_docs_get_tags_for_document($wrapper)) {
        // Display the tags as a list.
        $output = array();
        $output['#prefix'] = '<div class="tags">';
        $output['#suffix'] = '</div>';
        $output['#theme'] = 'item_list';
        $output['#title'] = t('Tags');

        // Create the items using only the term name.
        $output['#items'] = array_map(function(stdClass $tag) {
          return check_plain($tag->name);
        }, $tags);

        $doc['tags'] = render($output);
      }
      else {
        $doc['tags'] = '';
      }

      if ($source = $wrapper->get('field_document_source')->value()) {
        $doc['source'] = t('Source: !source', array('!source' => $source));
      }

      $docs[] = $doc;
    }
    catch (EntityMetadataWrapperException $exc) {
      watchdog(
        'cluster_docs',
        'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
         NULL,
         WATCHDOG_ERROR
      );
    }
  }
  return $docs;
}

/**
 * Implements hook_preprocess_search_result().
 */
function cluster_docs_preprocess_search_result(&$vars) {
  if (!isset($vars['result']['node'])) {
    return;
  }

  $node = $vars['result']['node'];
  if ($node->type != 'document') {
    return;
  }

  if (user_access('view document full node')) {
    return;
  }

  $vars['url'] = cluster_docs_get_download_url($node);
}

/**
 * Implements hook_theme().
 */
function cluster_docs_theme() {
  return array(
    'cluster_docs_all' => array(
      'file' => 'theme/cluster_docs.theme.inc',
      'render element' => 'element',
    ),
    'cluster_docs_cards_list' => array(
      'variables' => array(
        'heading' => FALSE,
        'docs' => array(),
        'all_documents_link' => FALSE,
      ),
      'template' => 'theme/cluster-docs-cards-list'
    ),
    'cluster_docs_table_list' => array(
      'variables' => array(
        'heading' => FALSE,
        'docs' => array(),
        'all_documents_link' => FALSE,
        'reset_link' => FALSE,
        'sort_link_params' => array(),
        'sort_column' => array(),
        'sort_direction' => array(),
      ),
      'template' => 'theme/cluster-docs-table-list'
    ),
    'cluster_docs_featured_documents' => array(
      'variables' => array(
        'docs' => array(),
      ),
      'template' => 'theme/cluster-docs-featured-documents'
    ),
    // @TODO more general for any link.
    'cluster_docs_all_docs_link' => array(
      'variables' => array(
        'path' => FALSE,
        'text' => t('Browse all documents'),
        'class' => 'browse-all-documents',
      ),
      'file' => 'theme/cluster_docs.theme.inc',
    ),
    'cluster_docs_facet' => array(
      'variables' => array(
        'title' => FALSE,
        'options' => array(),
        'child' => array(),
      ),
      'file' => 'theme/cluster_docs.theme.inc',
    )
  );
}

/**
 * Implements hook_node_presave().
 */
function cluster_docs_node_presave($node) {
  if ($node->type != 'document') {
    return;
  }

  if ($node->nid) {
    //Only do this for new nodes.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $groups = $wrapper->og_group_ref->value();
  $responses = array();
  $new_groups = array();
  foreach ($groups as $group) {
    if ($group->type == 'response') {
      $responses[] = $group->nid;
    }
    if (!in_array($group->type, array('working_group', 'hub', 'strategic_advisory'))) {
      continue;
    }
    $group_wrapper = entity_metadata_wrapper('node', $group);
    $parent_response = $group_wrapper->field_parent_response->value();
    if ($parent_response && !in_array($parent_response->nid, $responses)) {
      $new_groups[] = $parent_response;
      $responses[] = $parent_response->nid;
    }
  }

  if ($new_groups) {
    $wrapper->og_group_ref->set(array_merge($groups, $new_groups));
  }
}

/**
 * [cluster_docs_search_autocomplete description]
 * @param  [string] $string [String that user entered]
 * @return [array]         [The results of the query]
 */
function cluster_docs_search_autocomplete($string, $nid = NULL) {
  $matches = array();
  $query = db_select('node', 'dni');
  $query->fields('dni', array('title'));
  $query->condition('title', '%' . db_like($string) . '%', 'LIKE');
  $query->range(0, 20);

  if ($nid) {
    $query->condition('nid', $nid);
  }

  $results = $query->execute();

  // add matches to $matches
  foreach ($results as $row) {
    $matches[$row->title] = check_plain($row->title);
  }

  // return for JS
  drupal_json_output($matches);
  exit();
}

/**
 * Implements hook_TYPE_alter().
 */
function cluster_docs_toggle_optional_fields_overridden_fields_alter(array &$fields) {
  $fields['node']['document'] = array(
    'field_coordination_management' => TRUE,
    'field_document_type' => TRUE,
    'field_file' => TRUE,
    'field_information_management' => TRUE,
    'field_technical_support_design' => TRUE,
    'language' => FALSE,
  );

  global $user;
  $fields['node']['document']['og_group_ref'] = shelter_base_get_group_count_for_user($user->uid) != 1;
}

/**
 * Implements hook_field_access().
 */
function cluster_docs_field_access($op, $field, $entity_type, $entity, $account) {
  switch ($entity_type) {
    case 'node':
      if (!$entity)
        return TRUE;
      switch ($entity->type) {
        case 'document':
          switch ($field['field_name']) {
            case 'field_image':
              return FALSE;
          }
          break;
      }
      break;
  }
}

/**
 * Implements hook_date_combo_process_alter().
 */
function cluster_docs_date_combo_process_alter(&$element, &$form_state, $context) {
  if ($element['#field_name'] == 'field_featured_date') {

    $format = $element['value']['#date_format'];
    // Add first items to select.
    $options_raw = array(
      'today +1 week' => t('1 week from today'),
      'today +2 weeks' => t('2 weeks from today'),
      'today +1 month' => t('1 month from today'),
      'today +3 months' => t('3 months from today'),
      'today +6 months' => t('6 months from today'),
    );

    // If we are editing the node, maybe we want to add dates based on the
    // original saved date.
    $saved_date = $element['value']['#default_value'];
    $datetime = new \DateTime($saved_date);
    $today = new \DateTime('today');
    if (!empty($saved_date) && $datetime > $today) {
      $options_raw += array(
        "$saved_date" => t('Saved date (@date)', array('@date' => $datetime->format($format))),
      );
      $default_datetime = new \DateTime($saved_date);
      $default = $default_datetime->format($format);
    }
    else {
      // Set default to today +1 month only if thats a new node, else, if there
      // is no value, set default to "Never".
      $node = $element['#entity'];
      if (!isset($node->nid)) {
        $default_datetime = new \DateTime('today +1 month');
        $default = $default_datetime->format($format);
        $element['value']['#default_value'] = $default_datetime->format('Y-m-d H:i:s');
      }
      else {
        // Never.
        $element['value']['#default_value'] = '';
      }
    }

    // Never is the first item in the option, selecting it will erase the field.
    $options[''] = t('Never');
    foreach ($options_raw as $datetime => $option) {
      $date = new \DateTime($datetime);
      $formated = $date->format($format);
      $options[$formated] = $option;
    }

    $element['value']['unfeature_on'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#weight' => -1,
      '#attributes' => array('class' => array('unfeatured-select')),
      '#default_value' => $default,
    );
    $element['#attached']['js'][] = array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'cluster_docs') . '/js/unfeature.js',
    );
  }

}

/**
 * Implements hook_cron().
 */
function cluster_docs_cron() {
  $today = new \DateTime('today');
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_featured_date', 'value', $today->format('Y-m-d H:i:s'), '<')
    ->fieldCondition('field_featured', 'value', 1, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    foreach ($nodes as $node) {
      $entity = entity_metadata_wrapper('node', $node);
      $entity->field_featured->set(0);
      $entity->save();
    }
  }
}

/**
 * Implements hook_entity_load().
 *
 * Sets the value of field_preview to the same as field_file, if the following
 * conditions are met:
 *
 * 1. The value of field_preview is empty.
 * 2. The extension from the file in field_file matches the field_preview field
 *    instance configuration (i.e. it's an image).
 * 3. We're not editing the node.
 */
function cluster_docs_entity_load($entities, $type) {
  if ($type !== 'node')
    return;

  if (arg(0) === 'node' && arg(2) === 'edit')
    return; // Fails 3rd condition

  $extensions = NULL; // Only populated if needed

  foreach ($entities as $node) {
    if ($node->type !== 'document')
      continue;

    if ($node->field_preview)
      continue; // Fails 1st condition

    if (!$node->field_file)
      continue; // No file set in field_file
    $items = field_get_items('node', $node, 'field_file');
    if (!$items)
      continue;
    $file = file_load($items[0]['fid']);
    if (!$file)
      continue;

    if (is_null($extensions)) {
      $info = field_info_instance('node', 'field_preview', 'document');
      $extensions = $info['settings']['file_extensions'];
    }

    if (!file_validate_extensions($file, $extensions)) {
      // 2nd condition is met
      $node->field_preview = $node->field_file;
    }
  }
}

/**
 * Implements hook_daily_push_notification_objects_alter().
 */
function cluster_docs_daily_push_notification_objects_alter(&$objects_by_gid) {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('created', REQUEST_TIME - CLUSTER_API_DAY, '>')
    ->execute();

  if (!$results || !$results['node'])
    return;

  $nids = array_keys($results['node']);

  $query = db_select('og_membership', 'om')
    ->fields('om', ['gid', 'etid'])
    ->condition('group_type', 'node')
    ->condition('entity_type', 'node')
    ->condition('etid', $nids, 'IN');

  $results = $query
    ->execute()
    ->fetchAll();

  foreach ($results as $result)
    $objects_by_gid[$result->gid]['cluster_docs'][] = $result->etid;
}

/**
 * Implements hook_cluster_api_link_data().
 */
function cluster_docs_cluster_api_link_data($objects, $gid) {
  if (count($objects) === 1)
    return ['link' => 'document', 'id' => $objects[0]];

  return ['link' => 'group:documents:recent', 'id' => $gid];
}

/**
 * Implements hook_cluster_api_objects_label().
 */
function cluster_docs_cluster_api_objects_label($ids, $langcode) {
  // Filter to make sure all ids are published documents
  $query = new EntityFieldQuery();
  $all_count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('nid', $ids, 'IN')
    ->count()
    ->execute();
  if ($all_count === 0)
    return '';

  // Are all docs "featured"?
  $query = new EntityFieldQuery();
  $count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->fieldCondition('field_featured', 'value', 1)
    ->count()
    ->execute();
  if ($count === $all_count)
    return format_plural($all_count, 'a featured document', '@count featured documents', [], ['langcode' => $langcode]);

  // Are all docs "key"?
  $query = new EntityFieldQuery();
  $count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->fieldCondition('field_key_document', 'value', 1)
    ->count()
    ->execute();
  if ($count === $all_count)
    return format_plural($all_count, 'a key document', '@count key documents', [], ['langcode' => $langcode]);

  // At least some of the docs are just regular docs
  return format_plural($all_count, 'a document', '@count documents', [], ['langcode' => $langcode]);
}

/**
 * Implements hook_cluster_api_object_title().
 */
function cluster_docs_cluster_api_object_title($id, $langcode) {
  $node = node_load($id);
  return ($node->status == NODE_PUBLISHED && $node->type === 'document') ? $node->title : NULL;
}

/**
 * Implements hook_cluster_api_weight().
 */
function cluster_docs_cluster_api_weight() {
  return 10;
}
