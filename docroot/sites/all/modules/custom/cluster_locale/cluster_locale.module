<?php

/**
 * @file
 * Code for cluster_locale.module.
 */

define('CLUSTER_LOCALE_ADMIN_PATH', 'admin/config/shelter/app-translate-import');

/**
 * Implements hook_locale().
 */
function cluster_locale_locale($op = 'groups') {
  switch ($op) {
    case 'groups':
      return array(
        'cluster_app' => t('App'),
        'cluster_groups' => t('Responses and other groups'),
      );
  }
}

/**
 * Implements hook_menu().
 */
function cluster_locale_menu() {
  $items = array();
//  $items[CLUSTER_LOCALE_ADMIN_PATH] = array(
//    'title' => 'Import app translations',
//    'description' => 'Import po files to translate the app interface.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('locale_translate_import_form'),
//    'access arguments' => array('translate app interface'),
//    'file' => 'locale.admin.inc',
//    'file path' => drupal_get_path('module', 'locale'),
//  );
  $items['admin/config/shelter/update-translations'] = array(
    'title' => 'Update translations',
    'description' => 'Import translations from external spreadsheet.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cluster_locale_update_form'),
    'access arguments' => array('translate interface'),
  );
  $items['admin/config/shelter/enabled-languages'] = array(
    'title' => 'Enabled languages',
    'description' => 'Configure the enabled languages on app and website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cluster_locale_config_form'),
    'access arguments' => array('translate interface'),
    'file' => 'cluster_locale.admin.inc',
  );
  $items['select-language/%'] = array(
    'title' => 'Select language',
    'description' => 'Change the language on the current user.',
    'page callback' => 'cluster_locale_select_language',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

function cluster_locale_select_language($langcode) {
  global $user;

  if (!user_is_logged_in()) {
    $param = variable_get('locale_language_negotiation_session_param', 'language');
    $_SESSION[$param] = $langcode;
    drupal_goto(); // exits
  }

  if ($user->language === $langcode)
    drupal_goto();

  if (!in_array($langcode, (array) variable_get('cluster_locale_website_enabled_languages')))
    drupal_goto();

  $user->language = $langcode;
  user_save($user);

  drupal_goto();
}

/**
 * Implements hook_form_alter().
 *
 * Thats the same form from /admin/config/regional/translate/import but on a
 * custom path with some modifications.
 */
function cluster_locale_form_locale_translate_import_form_alter(&$form, &$form_state) {
  if (current_path() == CLUSTER_LOCALE_ADMIN_PATH) {
    // Make it always import to the cluster_app group.
    $form['import']['group'] = array(
      '#type' => 'value',
      '#value' => 'cluster_app',
    );

    // Custom redirect, redirect back to import page.
    $form['#submit'][] = 'cluster_locale_translate_import_form_submit_redirect';
  }
  $form['#submit'][] = '_cluster_locale_update_app_last_change';
}

/**
 * Remove the custom redirect to redirect back to the import page.
 */
function cluster_locale_translate_import_form_submit_redirect($form, &$form_state) {
  unset($form_state['redirect']);
}

/**
 * Implements hook_services_resources().
 */
function cluster_locale_services_resources() {
  return [
    'app-translations' => [
      'operations' => [
        'retrieve' => [
          'help' => 'Load app translation file.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_locale',
            'name' => 'resources/app_translations',
          ],
          'callback' => '_cluster_locale_translations_retrieve',
          'args' => [
            [
              'name' => 'language_code',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'string',
              'description' => 'A language key code.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'app-languages' => [
      'operations' => [
        'index' => [
          'help' => 'List all languages enabled on the app.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_locale',
            'name' => 'resources/app_languages',
          ],
          'callback' => '_cluster_locale_languages_index',
          'args' => [],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
  ];
}

function cluster_locale_get_enabled_app_languages() {
  $enabled_app_languages = variable_get('cluster_locale_mobile_enabled_languages', array());
  // English is always enabled;
  $enabled_app_languages['en'] = [];
  return array_intersect_key(language_list(), $enabled_app_languages);
}

function cluster_locale_form_cluster_locale_config_form_alter(&$form, &$form_state) {
  $form['#submit'][] = '_cluster_locale_update_last_change';
}

function _cluster_locale_update_app_last_change(&$form, &$form_state) {
  if ($form_state['values']['group'] == 'cluster_app') {
    _cluster_locale_update_last_change();
  }
}

function _cluster_locale_update_last_change() {
  cluster_api_update_app_config('lastLocaleUpdate', time());
}

/**
 * Implements hook_theme().
 */
function cluster_locale_theme($existing, $type, $theme, $path) {
  return [
    'cluster_locale_selector' => [
      'variables' => [
        'languages' => NULL,
        'current_language' => '',
        'current_path' => '',
      ],
      'template' => 'cluster_locale_selector',
      'path' => drupal_get_path('module', 'cluster_locale') . '/templates',
    ],
  ];
}

/**
 * Form to update translations from external (normally Google Sheets) spreadsheet.
 */
function cluster_locale_update_form($form, &$form_state) {
  $form['urls'] = [
    '#type' => 'fieldset',
    '#title' => t('Published spreadsheet URLs (CSV format)'),
    '#collapsible' => TRUE,
    '#collapsed' => !is_null(variable_get('cluster_locale_csv_website')),
  ];

  foreach (_cluster_locale_groupings() as $sheet)
  $form['urls'][$sheet] = [
    '#type' => 'textfield',
    '#title' => t(ucfirst($sheet)),
    '#default_value' => variable_get('cluster_locale_csv_'.$sheet),
    '#maxlength' => 255,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Import translations'),
  ];

  return $form;
}

function _cluster_locale_groupings() {
  return ['website', 'groups', 'menus', 'server', 'app'];
}

function _cluster_locale_groupings_map() {
  return [
    'website' => 'default',
    'groups' => 'default',
    'menus' => 'menu',
    'server' => 'default',
    'app' => 'cluster_app',
  ];
}

function cluster_locale_update_form_validate($form, &$form_state) {
  foreach (_cluster_locale_groupings() as $sheet) {
    if (!valid_url($form_state['values'][$sheet]))
      form_set_error($sheet, t('Invalid URL'));
  }
}

function cluster_locale_update_form_submit($form, &$form_state) {
  drupal_static_reset('language_list');
  $languages = language_list('language');
  $modified_langcodes = [];
  $groupings_map = _cluster_locale_groupings_map();

  foreach (_cluster_locale_groupings() as $sheet) {
    if (!isset($groupings_map[$sheet])) {
      drupal_set_message(t('Group not found for sheet @sheet, skipping it', ['@sheet' => $sheet]), 'error');
      continue;
    }
    $group = $groupings_map[$sheet];

    $url = $form_state['values'][$sheet];
    variable_set('cluster_locale_csv_' . $sheet, $url);

    $rows = explode(PHP_EOL, file_get_contents($url));

    $headers = str_getcsv(array_shift($rows));

    if (count($headers) !== count(array_unique(array_values($headers)))) {
      drupal_set_message(t('Duplicate headers in sheet @sheet, skipping it', ['@sheet' => $sheet]), 'warning');
      continue;
    }

    if (!in_array('en', $headers)) {
      drupal_set_message(t('Sheet @sheet has no English ("en") column, skipping it', ['@sheet' => $sheet]), 'warning');
      continue;
    }

    foreach ($headers as $header) {
      if (!in_array($header, ['msgctxt']) && !array_key_exists($header, $languages))
        drupal_set_message(t('Header not recognized in sheet @sheet: @header, ignoring it', ['@sheet' => $sheet, '@header' => $header]), 'warning');
    }

    foreach ($rows as $row) {
      $values = str_getcsv($row);

      foreach ($values as $k => $v) {
        if (trim($v) === '')
          continue;
        if (!isset($headers[$k]))
          continue;
        $langcode = $headers[$k];
        if ($langcode === 'en')
          continue;
        if (!array_key_exists($langcode, $languages))
          continue; // not a langcode (e.g. "msgctxt")
        $value = [
          'msgid' => $values[array_search('en', $headers)],
          'msgstr' => $v,
        ];
        $msgctxt_i = array_search('msgctxt', $headers);
        if ($msgctxt_i !== FALSE && isset($values[$msgctxt_i]))
          $value['msgctxt'] = $values[$msgctxt_i];

        if ($group === 'menu'
          && isset($value['msgctxt'])
          && preg_match('/^item:(\d+):title$/', $value['msgctxt'], $matches)
        ) {
          // Special case with menu items: force-save them to make the translations appear.
          // This is probably a bug in the menu module. Easier to do this than to try to debug it.
          $menu_link = menu_link_load($matches[1]);
          if ($menu_link
            && isset($menu_link['options'])
            && !isset($menu_link['options']['alter'])
          ) {
            $menu_link['options']['alter'] = TRUE;
            menu_link_save($menu_link);
          }
        }

        _locale_import_one_string('db-store', $value, LOCALE_IMPORT_OVERWRITE, $langcode, NULL, $group);
      }
    }
  }

  list($header_done, $additions, $updates, $deletes, $skips) = _locale_import_one_string('db-report');

  foreach ($modified_langcodes as $langcode)
    _locale_invalidate_js($langcode);
  cache_clear_all('locale:', 'cache', TRUE);
  menu_rebuild();
  drupal_set_message(t('The translations were successfully imported. There are %number newly created translated strings, %update strings were updated and %delete strings were removed.', array('%number' => $additions, '%update' => $updates, '%delete' => $deletes)));
  watchdog('cluster_locale', 'Imported from spreadsheet: %number new strings added, %update updated and %delete removed.', array('%number' => $additions, '%update' => $updates, '%delete' => $deletes));
  if ($skips) {
    $skip_message = format_plural($skips, 'One translation string was skipped because it contains disallowed HTML.', '@count translation strings were skipped because they contain disallowed HTML.');
    drupal_set_message($skip_message);
    watchdog('cluster_locale', '@count disallowed HTML string(s) from spreadsheet', array('@count' => $skips), WATCHDOG_WARNING);
  }
}
