<?php

/**
 * @file
 * Code for cluster_locale.module.
 */

define('CLUSTER_LOCALE_ADMIN_PATH', 'admin/config/shelter/app-translate-import');

/**
 * Implements hook_locale().
 */
function cluster_locale_locale($op = 'groups') {
  switch ($op) {
    case 'groups':
      return array(
        'cluster_app' => t('App'),
        'cluster_groups' => t('Responses and other groups'),
      );
  }
}

/**
 * Implements hook_menu().
 */
function cluster_locale_menu() {
  $items = array();
  $items[CLUSTER_LOCALE_ADMIN_PATH] = array(
    'title' => 'Import app translations',
    'description' => 'Import po files to translate the app interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('locale_translate_import_form'),
    'access arguments' => array('translate app interface'),
    'file' => 'locale.admin.inc',
    'file path' => drupal_get_path('module', 'locale'),
  );
  $items['admin/config/shelter/enabled-languages'] = array(
    'title' => 'Enabled languages',
    'description' => 'Configure the enabled languages on app and website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cluster_locale_config_form'),
    'access arguments' => array('translate interface'),
    'file' => 'cluster_locale.admin.inc',
  );
  $items['select-language/%'] = array(
    'title' => 'Select language',
    'description' => 'Change the language on the current user.',
    'page callback' => 'cluster_locale_select_language',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

function cluster_locale_select_language($langcode) {
  global $user;

  if (!user_is_logged_in()) {
    $param = variable_get('locale_language_negotiation_session_param', 'language');
    $_SESSION[$param] = $langcode;
    drupal_goto(); // exits
  }

  if ($user->language === $langcode)
    drupal_goto();

  if (!in_array($langcode, (array) variable_get('cluster_locale_website_enabled_languages')))
    drupal_goto();

  $user->language = $langcode;
  user_save($user);

  drupal_goto();
}

/**
 * Implements hook_form_alter().
 *
 * Thats the same form from /admin/config/regional/translate/import but on a
 * custom path with some modifications.
 */
function cluster_locale_form_locale_translate_import_form_alter(&$form, &$form_state) {
  if (current_path() == CLUSTER_LOCALE_ADMIN_PATH) {
    // Make it always import to the cluster_app group.
    $form['import']['group'] = array(
      '#type' => 'value',
      '#value' => 'cluster_app',
    );

    // Custom redirect, redirect back to import page.
    $form['#submit'][] = 'cluster_locale_translate_import_form_submit_redirect';
  }
  $form['#submit'][] = '_cluster_locale_update_app_last_change';
}

/**
 * Remove the custom redirect to redirect back to the import page.
 */
function cluster_locale_translate_import_form_submit_redirect($form, &$form_state) {
  unset($form_state['redirect']);
}

/**
 * Implements hook_services_resources().
 */
function cluster_locale_services_resources() {
  return [
    'app-translations' => [
      'operations' => [
        'retrieve' => [
          'help' => 'Load app translation file.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_locale',
            'name' => 'resources/app_translations',
          ],
          'callback' => '_cluster_locale_translations_retrieve',
          'args' => [
            [
              'name' => 'language_code',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'string',
              'description' => 'A language key code.',
            ],
          ],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
    'app-languages' => [
      'operations' => [
        'index' => [
          'help' => 'List all languages enabled on the app.',
          'file' => [
            'type' => 'inc',
            'module' => 'cluster_locale',
            'name' => 'resources/app_languages',
          ],
          'callback' => '_cluster_locale_languages_index',
          'args' => [],
          'access callback' => 'user_access',
          'access arguments' => ['access content'],
          'access arguments append' => FALSE,
        ],
      ],
    ],
  ];
}

function cluster_locale_get_enabled_app_languages() {
  $enabled_app_languages = variable_get('cluster_locale_mobile_enabled_languages', array());
  // English is always enabled;
  $enabled_app_languages['en'] = [];
  return array_intersect_key(language_list(), $enabled_app_languages);
}

function cluster_locale_form_cluster_locale_config_form_alter(&$form, &$form_state) {
  $form['#submit'][] = '_cluster_locale_update_last_change';
}

function _cluster_locale_update_app_last_change(&$form, &$form_state) {
  if ($form_state['values']['group'] == 'cluster_app') {
    _cluster_locale_update_last_change();
  }
}

function _cluster_locale_update_last_change() {
  cluster_api_update_app_config('lastLocaleUpdate', time());
}

/**
 * Implements hook_theme().
 */
function cluster_locale_theme($existing, $type, $theme, $path) {
  return [
    'cluster_locale_selector' => [
      'variables' => [
        'languages' => NULL,
        'current_language' => '',
        'current_path' => '',
      ],
      'template' => 'cluster_locale_selector',
      'path' => drupal_get_path('module', 'cluster_locale') . '/templates',
    ],
  ];
}
