<?php
/**
 * @file
 * Code for the Cluster Factsheets feature.
 */

include_once 'cluster_factsheets.features.inc';
include_once 'cluster_factsheets.pathauto.inc';
include_once 'cluster_factsheets.views.inc';

/**
 * Implements hook_menu().
 */
function cluster_factsheets_menu() {
  $items['node/%node/add-factsheet'] = [
    'title' => 'New Factsheet',
    'page callback' => 'cluster_factsheets_add',
    'page arguments' => [1],
    'access callback' => 'cluster_factsheets_add_access',
    'access arguments' => [1],
    'type' => MENU_CALLBACK,
  ];

  $items['node/%node/factsheets'] = [
    'title' => 'Factsheets',
    'page callback' => 'cluster_factsheets_all',
    'page arguments' => [1],
    'access callback' => 'og_is_group',
    'access arguments' => [0, 1],
    'title callback' => '_cluster_factsheets_title_callback',
    'title arguments' => [1],
    'type' => MENU_CALLBACK,
  ];

  $items['factsheets-temp'] = [
    'title' => 'Factsheets',
    'page callback' => 'cluster_factsheets_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['chart/factsheet/%node/%'] = [
    'page callback' => 'cluster_factsheets_chart',
    'page arguments' => [2, 3],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

function cluster_factsheets_chart($node, $type) {
  if (!$node || $node->type !== 'factsheet') {
    return MENU_NOT_FOUND;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  switch ($type) {
    case 'cat':
      $items = field_get_items('node', $node, 'field_coverage_against_targets');
      if (!$items) {
        return MENU_NOT_FOUND;
      }

      $chart_data = _cluster_factsheets_generate_cat_chart_data($items);

      if (!$chart_data['labels']) {
        return MENU_NOT_FOUND;
      }

      $data = $chart_data['data'];
      $colors = array_column($chart_data['data'], 'backgroundColor');

      cluster_chart_png_accumulatedhbar(
        $data, $chart_data['labels'], $colors,
        1000, 120 + 60 * count($data[0]['data']),
        NULL // TODO: filename
      );
      break;

    case 'people':
      if (
        (!is_null($in_need = $wrapper->field_fsi_in_need->value()))
        && (!is_null($targeted = $wrapper->field_fsi_targeted->value()))
      ) {
        if (!is_null($reached = $wrapper->field_fsi_reached->value())) {
          cluster_chart_png_hbar(
            [$in_need, $targeted, $reached],
            ['In need', 'Targeted', 'Reached'],
            [
              CLUSTER_CHART_COLOR_SHELTER_DARK_BLUE,
              CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
              CLUSTER_CHART_COLOR_SHELTER_RED,
            ],
            800, 320,
            NULL // TODO: filename
          );
        } else {
          cluster_chart_png_hbar(
            [$in_need, $targeted],
            ['In need', 'Targeted'],
            [
              CLUSTER_CHART_COLOR_SHELTER_DARK_BLUE,
              CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
            ],
            800, 280,
            NULL // TODO: filename
          );
        }
      }
      else {
        return MENU_NOT_FOUND;
      }
      break;

    case 'funding':
      if (
        (!is_null($required = $wrapper->field_fsi_funding_required->value()))
        && (!is_null($funded = $wrapper->field_fsi_funded->value()))
      ) {
        $funded_percentage = round($funded / $required * 100);

        if ($funded_percentage >= 100) {
          cluster_chart_png_pie([$funded], ['Funded'], [CLUSTER_CHART_COLOR_SHELTER_RED], 500, 500);
        }
        else {
          cluster_chart_png_pie(
            [$funded, $required - $funded],
            ['Funded', 'Gap'],
            [
              CLUSTER_CHART_COLOR_SHELTER_RED,
              CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
            ],
            500, 500);
        }
      }
      break;

    default:
      return MENU_NOT_FOUND;
  }
}

function cluster_factsheets_page() {
  // Get a list of group nids that have factsheets, and the dates of their most recent respective factsheets,
  // ordered (DESC) by that date.
  $group_nids_and_latest_factsheet_date = db_query(<<<EOS
    SELECT
      ngroup.nid,
      MAX(field_date.field_date_value)
    FROM {node} ngroup
      INNER JOIN {og_membership} ogm
        ON ngroup.nid = ogm.gid AND ogm.group_type = 'node' AND ogm.state = 1 AND ogm.type = 'og_membership_type_default'
      INNER JOIN {node} nfactsheet
        ON ogm.etid = nfactsheet.nid AND ogm.entity_type = 'node'
      INNER JOIN {field_data_field_date} field_date
        ON nfactsheet.nid = field_date.entity_id AND field_date.entity_type = 'node' AND field_date.bundle = 'factsheet' AND
           field_date.deleted = 0
    WHERE nfactsheet.type = 'factsheet'
          AND nfactsheet.status = 1
          AND ngroup.status = 1
    GROUP BY ngroup.nid
    ORDER BY MAX(field_date.field_date_value) DESC
EOS
  )->fetchAllKeyed();

  $factsheet_views = [];

  foreach ($group_nids_and_latest_factsheet_date as $gid => $fs_date) {
    $manager = GroupContentManager::getInstance(node_load($gid));
    $group_factsheets = $manager->getFactsheets(1);
    if (!$group_factsheets) {
      continue;
    } // Shouldn't happen

    $factsheet_views[] = node_view(node_load($group_factsheets[0]), 'preview_block');
  }

  return [
    'prefix' => ['#markup' => '<div class="factsheet-preview-list">'],
    'factsheets' => $factsheet_views,
    'suffix' => ['#markup' => '</div>'],
  ];
}

/**
 * Menu title callback.
 *
 * @see _cluster_docs_title_callback() (mostly copied from there)
 */
function _cluster_factsheets_title_callback($node) {
  return $node->title . ' - ' . t('Factsheets');
}

function cluster_factsheets_add_access($node) {
  if (!og_is_group('node', $node)) {
    return FALSE;
  }

  return og_user_access('node', $node->nid, 'create factsheet content');
}

function cluster_factsheets_add($group_node) {
  $options = ['query' => drupal_get_query_parameters()];
  if (isset($options['query']['group'])) {
    $options['query']['destination'] = 'node/' . $options['query']['group'];
  }

  $manager = GroupContentManager::getInstance($group_node);
  $factsheets = $manager->getFactsheets(1);
  if (count($factsheets)) {
    drupal_goto("node/{$factsheets[0]}/clone/" . clone_get_token($factsheets[0]), $options);
  }
  else {
    drupal_goto('node/add/factsheet', $options);
  }
}

/**
 * @param $node
 *
 * @return array
 */
function cluster_factsheets_all($node) {
  $manager = GroupContentManager::getInstance($node);
  $items = array_filter(array_map(function ($node) {
    return node_view($node, 'factsheet_preview_block');
  }, node_load_multiple($manager->getFactsheets())));
  return [
    '#theme' => 'factsheet_list',
    '#items' => $items,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cluster_factsheets_preprocess_field(&$variables) {
  if (
    $variables['element']['#field_name'] !== 'field_coverage_against_targets'
    || !isset($variables['element']['#object'])
    || $variables['element']['#object']->type !== 'factsheet'
  ) {
    return;
  }

  $variables['cluster_factsheets']['hh_abbr'] = _cluster_factsheets_hh_abbr($variables['element']['#object']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cluster_factsheets_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->type !== 'factsheet') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  switch ($variables['view_mode']) {
    case 'factsheet_preview_block': // fall-through
    case 'preview_block':
      $variables['cluster_factsheets']['indicators'] = cluster_factsheets_main_indicators($node);
      break;

    case 'factsheet_summary':
      $variables['cluster_factsheets']['indicators'] = cluster_factsheets_chart_indicators($node);
      $variables['cluster_factsheets']['full_factsheet'] = [
        '#theme' => 'link',
        '#text' => t('See full factsheet'),
        '#path' => 'node/' . $node->nid,
        '#options' => ['attributes' => []],
      ];
      break;

    case 'print':
      $variables['cluster_factsheets']['indicators'] = cluster_factsheets_api_indicators($node);
      $variables['cluster_factsheets']['cat'] = cluster_factsheets_api_cat($node);
      break;

    case 'full': // fall-through
    default:
      if ($prev = cluster_factsheets_prev($node)) {
        $prev_wrapper = entity_metadata_wrapper('node', $prev);
        $variables['cluster_factsheets']['prev'] = [
          '#theme' => 'link',
          '#text' => '< ' . date('M Y', $prev_wrapper->field_date->value()),
          // e.g. "Apr 2018"
          '#path' => 'node/' . $prev->nid,
          '#options' => ['attributes' => []],
        ];
      }
      if ($next = cluster_factsheets_next($node)) {
        $next_wrapper = entity_metadata_wrapper('node', $next);
        $variables['cluster_factsheets']['next'] = [
          '#theme' => 'link',
          '#text' => date('M Y', $next_wrapper->field_date->value()) . ' >',
          // e.g. "Apr 2018"
          '#path' => 'node/' . $next->nid,
          '#options' => ['attributes' => []],
        ];
      }

      $variables['cluster_factsheets']['indicators'] = cluster_factsheets_chart_indicators($node);

      // nfi & shelter pie charts shown above "coverage against targets"
      $variables['cluster_factsheets']['indicators_people'] = cluster_factsheets_chart_indicators_people($node);
  }

  $field_image = $wrapper->field_image->value();
  $variables['cluster_factsheets']['main_image_url'] = image_style_url('factsheet_image', $field_image['uri']);
  $variables['cluster_factsheets']['print_main_image_url'] = image_style_url('print_factsheet_image', $field_image['uri']);

  $variables['cluster_factsheets']['hh_abbr'] = _cluster_factsheets_hh_abbr($node);
}

function _cluster_factsheets_hh_abbr($node, $html = TRUE) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $figures_represent_households = (bool) $wrapper->field_household_figures->value();
  if (!$figures_represent_households) {
    return '';
  }

  if ($html) {
    return ' (<abbr'
      . drupal_attributes([
        'title' => t('@number people per household', [
          '@number' => $wrapper->field_people_per_household->value(),
        ]),
      ])
      . '>' . t('HH') . '</abbr>)';
  }
  else {
    return t('Households (@number people per household)', [
      '@number' => $wrapper->field_people_per_household->value(),
    ]);
  }
}

/**
 * Implements hook_theme().
 */
function cluster_factsheets_theme($existing, $type, $theme, $path) {
  return [
    'factsheet_list' => [
      'template' => 'factsheet-list',
      'variables' => ['items' => []],
      'path' => drupal_get_path('module', 'cluster_factsheets') . '/templates',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function cluster_factsheets_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id !== 'factsheet_node_form') {
    return;
  }

  $form['title']['#access'] = FALSE;

  if (arg(2) === 'clone') // Cloning a factsheet: reset the date to "today"
  {
    $form['field_date']['und'][0]['#default_value']['value'] = date('Y-m-d');
  }
}

/**
 * Implements hook_node_presave().
 */
function cluster_factsheets_node_presave($node) {
  if ($node->type !== 'factsheet') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $date = date('Y-m', $wrapper->field_date->value());
  $group = $wrapper->og_group_ref->value();
  $group_title = count($group) ? $group[0]->title : '';

  $node->title = $date . ' Factsheet' . ($group_title ? ' - ' . $group_title : '');
}

/**
 * Implements hook_node_validate().
 */
function cluster_factsheets_node_validate($node, $form, &$form_state) {
  if ($node->type !== 'factsheet') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $group = $wrapper->og_group_ref->value();
  if (!count($group)) {
    // This factsheet doesn't belong to any group
    form_set_error('og_group_ref', t('No response specified.'));
    return;
  }

  if ($wrapper->field_household_figures->value() && !$wrapper->field_people_per_household->value()) {
    form_set_error('field_people_per_household', t('This value is required if the figures represent households.'));
  }

  if ($node->status != NODE_PUBLISHED) // Date condition not required for unpublished nodes
  {
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'factsheet')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('og_group_ref', 'target_id', $group[0]->nid)
    ->fieldCondition('field_date', 'value', date('Y-m-d', $wrapper->field_date->value()))
    ->range(NULL, 1);

  if ($node->nid) // Exclude current node (if editing)
  {
    $query->propertyCondition('nid', $node->nid, '<>');
  }

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    if (count($nids) >= 1) {
      form_set_error('field_date', t('A factsheet already exists for this date.'));
    }
  }
}

function cluster_factsheets_is_group_factsheets_page() {
  $router_item = menu_get_item(current_path());

  if ($router_item && isset($router_item['path'])) {
    return $router_item['path'] === 'node/%/factsheets';
  }

  return FALSE;
}

function cluster_factsheets_number($value, $prefix = '') {
  if ($value > 100000) {
    return $prefix . number_format($value / 1000000, 1, '.', ' ') . ' M';
  }
  return $prefix . number_format($value, 0, '.', ' ');
}

;

function cluster_factsheets_main_indicators($node) {
  if (!$node || $node->type !== 'factsheet') {
    return [];
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $indicators = [];

  if (!is_null($partners = $wrapper->field_fsi_partners->value())) {
    $indicators[t('partners')] = $partners;
  }

  if (
    (!is_null($required = $wrapper->field_fsi_funding_required->value()))
    && (!is_null($funded = $wrapper->field_fsi_funded->value()))
  ) {
    $funding_source = trim($wrapper->field_funding_source->value());
    $source_prefix = $funding_source ? '<span' . drupal_attributes(['title' => t('Source') . ': ' . $funding_source]) . '>' : '';
    $source_suffix = $funding_source ? '</span>' : '';

    $funded_percentage = round($funded / $required * 100) . '%';
    $indicators[t('required (funded)')] = $source_prefix . cluster_factsheets_number($required, '$') . ' (' . $funded_percentage . ')' . $source_suffix;
  }

  if (
    (!is_null($in_need = $wrapper->field_fsi_in_need->value()))
    && (!is_null($targeted = $wrapper->field_fsi_targeted->value()))
  ) {
    if (!is_null($reached = $wrapper->field_fsi_reached->value()))
      $indicators[t('people in need / targeted / reached') . _cluster_factsheets_hh_abbr($node)] = cluster_factsheets_number($in_need) . ' / ' . cluster_factsheets_number($targeted) . ' / ' . cluster_factsheets_number($reached);
    else
      $indicators[t('people in need / targeted') . _cluster_factsheets_hh_abbr($node)] = cluster_factsheets_number($in_need) . ' / ' . cluster_factsheets_number($targeted);
  }

  return $indicators;
}

function cluster_factsheets_api_cat($node) {
  if (!$node || $node->type !== 'factsheet') {
    return [];
  }

  if (!_cluster_factsheets_generate_cat_data_exists($node)) {
    return [];
  }

  return array_filter([
    'description' => _cluster_factsheets_hh_abbr($node, FALSE),
    'chart' => url('chart/factsheet/' . $node->nid . '/cat', [
      'absolute' => TRUE,
      'query' => ['changed' => $node->changed], // cache buster
    ]),
  ]);
}

function cluster_factsheets_structured_data($node) {
  if (!$node || $node->type !== 'factsheet') {
    return [];
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $figures_represent_households = (bool) $wrapper->field_household_figures->value();
  $people_multiplier = $figures_represent_households
    ? floatval($wrapper->field_people_per_household->value())
    : 1;

  $partners = intval($wrapper->field_fsi_partners->value(), 10);
  $in_need = intval($wrapper->field_fsi_in_need->value(), 10);
  $targeted = intval($wrapper->field_fsi_targeted->value(), 10);
  $reached = intval($wrapper->field_fsi_reached->value(), 10);
  $required = intval($wrapper->field_fsi_funding_required->value(), 10);
  $funded = intval($wrapper->field_fsi_funded->value(), 10);

  $operational_intent_info = field_info_field('field_cat_operational_intent');
  $operational_intents = array_keys($operational_intent_info['settings']['allowed_values']);
  $cat_data = [];
  foreach ($operational_intents as $operational_intent) {
    $cat_data[$operational_intent] = [
      'targeted' => 0,
      'reached' => 0,
      'ongoing' => 0,
      'planned' => 0,
    ];
  }

  $cat_items = (array) field_get_items('node', $node, 'field_coverage_against_targets');
  foreach ($cat_items as $delta => $item) {
    if ($field_collection = field_collection_field_get_entity($item)) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $field_collection);

      $operational_intent = $wrapper->field_cat_operational_intent->value();
      if (!$operational_intent || !isset($cat_data[$operational_intent])) {
        continue;
      }

      $cat_data[$operational_intent]['targeted'] += round($people_multiplier * intval($wrapper->field_cat_targeted->value(), 10));
      $cat_data[$operational_intent]['reached'] += round($people_multiplier * intval($wrapper->field_cat_reached->value(), 10));
      $cat_data[$operational_intent]['ongoing'] += round($people_multiplier * intval($wrapper->field_cat_ongoing->value(), 10));
      $cat_data[$operational_intent]['planned'] += round($people_multiplier * intval($wrapper->field_cat_planned->value(), 10));
    }
  }

  return [
    'partners' => is_null($partners) ? 0 : $partners,
    'people' => [
      'in need' => round($people_multiplier * (is_null($in_need) ? 0 : $in_need)),
      'targeted' => round($people_multiplier * (is_null($targeted) ? 0 : $targeted)),
      'reached' => round($people_multiplier * (is_null($reached) ? 0 : $reached)),
    ],
    'funding' => [
      'required' => is_null($required) ? 0 : $required,
      'funded' => is_null($funded) ? 0 : $funded,
      'percentage' => !is_null($required) && $required > 0 ? round($funded / $required * 100) . '%' : NULL,
    ],
    'cat' => $cat_data,
  ];
}

function cluster_factsheets_last_published_for_group($group) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'factsheet')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('og_group_ref', 'target_id', $group->nid)
    ->fieldOrderBy('field_date', 'value', 'DESC')
    ->range(0, 1)
    ->execute();

  if (isset($result['node']) && count($result['node']) > 0) {
    return node_load(key($result['node']));
  }

  return NULL;
}

function cluster_factsheets_api_indicators($node) {
  if (!$node || $node->type !== 'factsheet') {
    return [];
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $indicators = [];

  if (!is_null($partners = $wrapper->field_fsi_partners->value())) {
    $indicators[] = [
      'type' => 'number',
      'label' => t('Cluster partners'),
      'value' => $partners,
    ];
  }

  if (
    (!is_null($in_need = $wrapper->field_fsi_in_need->value()))
    && (!is_null($targeted = $wrapper->field_fsi_targeted->value()))
  ) {
    $indicators[] = array_filter([
      'type' => 'chart',
      'title' => 'People',
      'description' => _cluster_factsheets_hh_abbr($node, FALSE),
      'chart' => url('chart/factsheet/' . $node->nid . '/people', [
        'absolute' => TRUE,
        'query' => ['changed' => $node->changed], // cache buster
      ]),
    ]);
  }

  if (
    (!is_null($required = $wrapper->field_fsi_funding_required->value()))
    && (!is_null($funded = $wrapper->field_fsi_funded->value()))
  ) {
    $funding_source = trim($wrapper->field_funding_source->value());
    $funded_percentage = round($funded / $required * 100) . '%';

    $indicators[] = [
      'type' => 'chart',
      'title' => t('Funding'),
      'smallImage' => TRUE,
      'description' => '<p><em>' . t('Total funding required') . ':</em></p><p><strong>' . check_plain(cluster_factsheets_number($required, '$')) . '</strong></p>'
        . '<p><em>' . t('Funded') . ': </em><span>' . check_plain($funded_percentage) . '</span></p>'
        . '<p><em>' . t('Source') . ': </em><span>' . check_plain($funding_source) . '</span></p>',
      'chart' => url('chart/factsheet/' . $node->nid . '/funding', [
        'absolute' => TRUE,
        'query' => ['changed' => $node->changed], // cache buster
      ]),
    ];
  }

  return $indicators;
}

function cluster_factsheets_chart_indicators($node) {
  if (!$node || $node->type !== 'factsheet') {
    return [];
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $indicators = [];

  if (!is_null($partners = $wrapper->field_fsi_partners->value())) {
    $indicators[] = [
      '#markup' => '<div><strong>' . $partners . '</strong><label>' . t('Cluster partners') . '</label></div>',
    ];
  }

  if (
    (!is_null($in_need = $wrapper->field_fsi_in_need->value()))
    && (!is_null($targeted = $wrapper->field_fsi_targeted->value()))
  ) {
    if (!is_null($reached = $wrapper->field_fsi_reached->value())) {
      $indicators[] = [
        [
          '#theme' => 'html_tag',
          '#tag' => 'h4',
          '#value' => t('People') . _cluster_factsheets_hh_abbr($node),
        ],
        [
          '#theme' => 'cluster_chart_hbar',
          '#data' => [
            [
              'data' => [$in_need, $targeted, $reached],
              'backgroundColor' => [
                CLUSTER_CHART_COLOR_SHELTER_DARK_BLUE,
                CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
                CLUSTER_CHART_COLOR_SHELTER_RED,
              ],
            ],
          ],
          '#labels' => [t('In need'), t('Targeted'), t('Reached')],
          '#options' => [
            'legend' => ['display' => FALSE],
            'maintainAspectRatio' => FALSE,
            'scales' => ['xAxes' => [['ticks' => ['beginAtZero' => TRUE]]]],
          ],
        ],
      ];
    } else {
      $indicators[] = [
        [
          '#theme' => 'html_tag',
          '#tag' => 'h4',
          '#value' => t('People') . _cluster_factsheets_hh_abbr($node),
        ],
        [
          '#theme' => 'cluster_chart_hbar',
          '#data' => [
            [
              'data' => [$in_need, $targeted],
              'backgroundColor' => [
                CLUSTER_CHART_COLOR_SHELTER_RED,
                CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
              ],
            ],
          ],
          '#labels' => [t('In need'), t('Targeted')],
          '#options' => [
            'legend' => ['display' => FALSE],
            'maintainAspectRatio' => FALSE,
            'scales' => ['xAxes' => [['ticks' => ['beginAtZero' => TRUE]]]],
          ],
        ],
      ];
    }
  }

  if (
    (!is_null($required = $wrapper->field_fsi_funding_required->value()))
    && (!is_null($funded = $wrapper->field_fsi_funded->value()))
  ) {
    $funded_percentage = round($funded / $required * 100);

    if ($funded_percentage >= 100) {
      $funding_chart = [
        '#theme' => 'cluster_chart_pie',
        '#data' => [
          'data' => [$funded],
          'backgroundColor' => [
            CLUSTER_CHART_COLOR_SHELTER_RED,
          ],
        ],
        '#labels' => ['Funded'],
        '#options' => [
          'legend' => ['display' => FALSE],
          'maintainAspectRatio' => FALSE,
          'pieceLabel' => [
            'render' => [$funded_percentage . '%'],
            'fontColor' => 'white',
          ],
        ],
      ];
    }
    else {
      $funding_chart = [
        '#theme' => 'cluster_chart_pie',
        '#data' => [
          'data' => [$funded, $required - $funded],
          'backgroundColor' => [
            CLUSTER_CHART_COLOR_SHELTER_RED,
            CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
          ],
        ],
        '#labels' => [t('Funded'), t('Gap')],
        '#options' => [
          'legend' => ['display' => FALSE],
          'maintainAspectRatio' => FALSE,
          'pieceLabel' => [
            'render' => [$funded_percentage . '%'],
            'fontColor' => 'white',
          ],
        ],
      ];
    }

    $total = '<label>' . t('Total funding required') . ':</label><strong>' . cluster_factsheets_number($required, '$') . '</strong>';

    $funding_source = trim($wrapper->field_funding_source->value());
    $source = $funding_source ? '<label>' . t('Source') . ':</label><div>' . check_plain($funding_source) . '</div>' : '';

    $indicators[] = [
      [
        '#theme' => 'html_tag',
        '#tag' => 'h4',
        '#value' => t('Funding'),
      ],
      [
        '#type' => 'container',
        '#attributes' => ['class' => ['indicator-funding']],
        $funding_chart,
        [
          '#markup' => '<div class="funding-info">' . $total . $source . '</div>',
        ],
      ],
    ];
  }

  return $indicators;
}

function cluster_factsheets_chart_indicators_people($node) {
  if (!$node || $node->type !== 'factsheet') {
    return [];
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $indicators = [];

  if (
    (!is_null($targeted = $wrapper->field_fsi_nfi_targeted->value()))
    && (!is_null($reached = $wrapper->field_fsi_nfi_reached->value()))
  ) {
    $percentage = round($reached / $targeted * 100);

    $indicators[] = [
      '#type' => 'container',
//      '#attributes' => ['class' => ['indicator-nfi']],
      0 => [
        '#theme' => 'html_tag',
        '#tag' => 'h4',
        '#value' => t('NFI') . _cluster_factsheets_hh_abbr($node),
      ],
      1 => [
        '#theme' => 'cluster_chart_pie',
        '#data' => [
          'data' => [$reached, max(0, $targeted - $reached)],
          'backgroundColor' => [
            CLUSTER_CHART_COLOR_SHELTER_DARK_BLUE,
            CLUSTER_CHART_COLOR_SHELTER_LIGHT_BLUE,
          ],
        ],
        '#labels' => [t('Reached'), t('Gap')],
        '#options' => [
          'legend' => ['display' => FALSE],
          'maintainAspectRatio' => FALSE,
          'pieceLabel' => [
            'render' => [$percentage . '%'],
            'fontColor' => 'white',
          ],
        ],
      ],
      2 => [
        '#theme' => 'html_tag',
        '#tag' => 'small',
        '#value' => t('Targeted') . ': ' . cluster_factsheets_number($targeted),
      ],
    ];
  }

  if (
    (!is_null($targeted = $wrapper->field_fsi_shelter_targeted->value()))
    && (!is_null($reached = $wrapper->field_fsi_shelter_reached->value()))
  ) {
    $percentage = round($reached / $targeted * 100);

    $indicators[] = [
      '#type' => 'container',
//      '#attributes' => ['class' => ['indicator-nfi']],
      0 => [
        '#theme' => 'html_tag',
        '#tag' => 'h4',
        '#value' => t('Shelter') . _cluster_factsheets_hh_abbr($node),
      ],
      1 => [
        '#theme' => 'cluster_chart_pie',
        '#data' => [
          'data' => [$reached, max(0, $targeted - $reached)],
          'backgroundColor' => [
            CLUSTER_CHART_COLOR_SHELTER_RED,
            CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
          ],
        ],
        '#labels' => [t('Reached'), t('Gap')],
        '#options' => [
          'legend' => ['display' => FALSE],
          'maintainAspectRatio' => FALSE,
          'pieceLabel' => [
            'render' => [$percentage . '%'],
            'fontColor' => 'white',
          ],
        ],
      ],
      2 => [
        '#theme' => 'html_tag',
        '#tag' => 'small',
        '#value' => t('Targeted') . ': ' . cluster_factsheets_number($targeted),
      ],
    ];
  }

  return $indicators;
}

/**
 *  Implements hook_entity_info_alter().
 */
function cluster_factsheets_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['factsheet_summary'] = [
    'label' => t('Factsheet summary'),
    'custom settings' => FALSE,
  ];
  $entity_info['node']['view modes']['factsheet_homepage_teaser'] = [
    'label' => t('Factsheet homepage teaser'),
    'custom settings' => FALSE,
  ];
  $entity_info['node']['view modes']['factsheet_preview_block'] = [
    'label' => t('Factsheet preview block (no group title)'),
    'custom settings' => FALSE,
  ];
}

/**
 * Implements hook_field_formatter_info().
 */
/**
 * Implements hook_field_formatter_info().
 */
function cluster_factsheets_field_formatter_info() {
  return [
    'cluster_factsheets_cat_chart' => [
      'label' => t('Coverage against targets chart'),
      'field types' => ['field_collection'],
    ],
  ];
}

/**
 * Implements hook_field_formatter_view().
 */
function cluster_factsheets_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = [];

  switch ($display['type']) {
    case 'cluster_factsheets_cat_chart':
      $chart_data = _cluster_factsheets_generate_cat_chart_data($items);
      $labels = $chart_data['labels'];
      $data = $chart_data['data'];

      if ($labels) {
        $element[0] = [
          '#theme' => 'cluster_chart_hbar',
          '#extra_css_classes' => ['fs_cat_chart'],
          '#data' => $data,
          '#labels' => $labels,
          '#options' => [
            //            'legend' => ['display' => FALSE],
            'maintainAspectRatio' => FALSE,
            'scales' => [
              'xAxes' => [
                [
                  'stacked' => TRUE,
                  'ticks' => ['beginAtZero' => TRUE],
                ],
              ],
              'yAxes' => [['stacked' => TRUE]],
            ],
          ],
        ];
      }
      break;
  }

  return $element;
}

/**
 * @param object $node
 *
 * @return bool TRUE if there is Coverage Against Targets data (and thus a
 *   chart can be generated)
 * @todo This code could be a lot more efficient.
 */
function _cluster_factsheets_generate_cat_data_exists($node) {
  $items = field_get_items('node', $node, 'field_coverage_against_targets');
  if (!$items) {
    return FALSE;
  }

  $chart_data = _cluster_factsheets_generate_cat_chart_data($items);
  return $chart_data['labels'] ? TRUE : FALSE;
}

/**
 * @param $items
 *
 * @return array
 */
function _cluster_factsheets_generate_cat_chart_data($items) {
  $data = [
    [
      'data' => [],
      'label' => t('Reached'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_RED,
    ],
    [
      'data' => [],
      'label' => t('Ongoing'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_RED_SHADE1,
    ],
    [
      'data' => [],
      'label' => t('Planned'),
      'backgroundColor' => CLUSTER_CHART_COLOR_SHELTER_RED_SHADE2,
    ],
    [
      'data' => [],
      'label' => t('Gap'),
      //          'backgroundColor' => CLUSTER_CHART_COLOR_ACCENT_RED,
    ],
  ];
  $labels = [];

  foreach ($items as $delta => $item) {
    if ($field_collection = field_collection_field_get_entity($item)) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $field_collection);

      $title = $wrapper->field_cat_title->value();
      $operational_intent = $wrapper->field_cat_operational_intent->value();
      if (!$title && $operational_intent) {
        $operational_intent_info = field_info_field('field_cat_operational_intent');
        $title = $operational_intent_info['settings']['allowed_values'][$operational_intent];
      }
      $targeted = intval($wrapper->field_cat_targeted->value());
      if (!$targeted) {
        continue;
      }
      $reached = intval($wrapper->field_cat_reached->value());
      $ongoing = intval($wrapper->field_cat_ongoing->value());
      $planned = intval($wrapper->field_cat_planned->value());
      $gap = $targeted - $reached - $ongoing - $planned;

      $labels[] = $title;
      $data[0]['data'][] = $reached;
      $data[1]['data'][] = $ongoing;
      $data[2]['data'][] = $planned;
      $data[3]['data'][] = $gap;
    }
  }

  return ['data' => $data, 'labels' => $labels];
}

function cluster_factsheets_next_nid($factsheet_node, $prev = FALSE) {
  $wrapper = entity_metadata_wrapper('node', $factsheet_node);
  $group = $wrapper->og_group_ref->value();
  if (!count($group)) {
    return NULL;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'factsheet')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('nid', $factsheet_node->nid, '<>')
    ->fieldCondition('og_group_ref', 'target_id', $group[0]->nid)
    ->fieldCondition('field_date', 'value', format_date($wrapper->field_date->value(), 'custom', 'Y-m-d'), $prev ? '<' : '>')
    ->fieldOrderBy('field_date', 'value', $prev ? 'DESC' : 'ASC')
    ->range(NULL, 1);

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    if (count($nids) >= 1) {
      return intval($nids[0]);
    }
  }

  return NULL;
}

function cluster_factsheets_prev_nid($factsheet_node) {
  return cluster_factsheets_next_nid($factsheet_node, TRUE);
}

function cluster_factsheets_next($factsheet_node, $prev = FALSE) {
  $nid = cluster_factsheets_next_nid($factsheet_node, $prev);
  if ($nid) {
    return node_load($nid);
  }
  return NULL;
}

function cluster_factsheets_prev($factsheet_node) {
  return cluster_factsheets_next($factsheet_node, TRUE);
}

/**
 * Implements hook_daily_push_notification_objects_alter().
 */
function cluster_factsheets_daily_push_notification_objects_alter(&$objects_by_gid) {
  return _cluster_factsheets_notification_objects_alter($objects_by_gid, CLUSTER_API_DAY);
}

/**
 * Implements hook_daily_email_notification_objects_alter().
 */
function cluster_factsheets_daily_email_notification_objects_alter(&$objects_by_gid) {
  return _cluster_factsheets_notification_objects_alter($objects_by_gid, CLUSTER_API_DAY);
}

/**
 * Implements hook_weekly_email_notification_objects_alter().
 */
function cluster_factsheets_weekly_email_notification_objects_alter(&$objects_by_gid) {
  return _cluster_factsheets_notification_objects_alter($objects_by_gid, CLUSTER_API_WEEK);
}

function _cluster_factsheets_notification_objects_alter(&$objects_by_gid, $period) {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'factsheet')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('created', REQUEST_TIME - $period, '>')
    ->execute();

  if (!$results || !$results['node']) {
    return;
  }

  $nids = array_keys($results['node']);

  $query = db_select('og_membership', 'om')
    ->fields('om', ['gid', 'etid'])
    ->condition('group_type', 'node')
    ->condition('entity_type', 'node')
    ->condition('etid', $nids, 'IN');

  $results = $query
    ->execute()
    ->fetchAll();

  foreach ($results as $result) {
    $objects_by_gid[$result->gid]['cluster_factsheets'][] = $result->etid;
  }
}

/**
 * Implements hook_cluster_api_link_data().
 */
function cluster_factsheets_cluster_api_link_data($objects, $gid) {
  if (count($objects) === 1) {
    return ['link' => 'factsheet', 'id' => $objects[0]];
  }

  return ['link' => 'group', 'id' => $gid];
}

/**
 * Implements hook_cluster_api_objects_label().
 */
function cluster_factsheets_cluster_api_objects_label($ids, $langcode) {
  // Filter to make sure all ids are published nodes
  $query = new EntityFieldQuery();
  $all_count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'factsheet')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('nid', $ids, 'IN')
    ->count()
    ->execute();
  if ($all_count === 0) {
    return '';
  }

  return format_plural($all_count, 'a factsheet', '@count factsheets', [], ['langcode' => $langcode]);
}

/**
 * Implements hook_cluster_api_object_title().
 */
function cluster_factsheets_cluster_api_object_title($id, $langcode) {
  $node = node_load($id);
  if (!($node->status == NODE_PUBLISHED && $node->type === 'factsheet')) {
    return NULL;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  return format_date($wrapper->field_date->value(), 'custom', 'F Y', NULL, $langcode); // e.g. "April 2018"
}

/**
 * Implements hook_cluster_api_weight().
 */
function cluster_factsheets_cluster_api_weight() {
  return -10;
}

/**
 * Implements hook_cluster_email_render_data().
 */
function cluster_factsheets_cluster_email_render_data($ids, $langcode) {
  // Filter to make sure all ids are published
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'factsheet')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('nid', $ids, 'IN')
    ->range(0, 2); // max. 2 nodes

  $results = $query->execute();
  if (!isset($results['node'])) {
    return NULL;
  }

  $nids = array_keys($results['node']);
  $ret = [];
  foreach (node_load_multiple($nids) as $nid => $node) {
    $wrapper = entity_metadata_wrapper('node', $node);

    $field_image = $wrapper->field_image->value();
    $image = $field_image && $field_image['uri']
      ? image_style_url('factsheet_image', $field_image['uri'])
      : NULL;

    $highlights = $wrapper->body->value();

    $ret[$nid] = [
      'title' => $node->title,
      'link' => url('node/' . $nid, ['absolute' => TRUE]),
      'date' => format_date($wrapper->field_date->value(), 'custom', 'F Y', NULL, $langcode),
      'image' => $image,
      'highlights' => text_summary($highlights['safe_value'], $highlights['format']),
    ];
  }

  return $ret;
}
