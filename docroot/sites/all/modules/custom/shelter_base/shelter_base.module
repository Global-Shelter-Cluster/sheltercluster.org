<?php
/**
 * @file
 * Code for the shelter_base feature.
 */

include_once 'shelter_base.features.inc';

/**
 * Implements hook_menu().
 */
function shelter_base_menu() {
  $items['admin/config/shelter'] = array(
    'title' => 'Shelter Cluster',
    'description' => 'Shelter Cluster Settings.',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Small error handling wrapper for entity_metadata_wrapper.
 */
function _log_entity_metadata_wrapper_error($exception, $context) {
  watchdog(
    $context,
    'See ' . __FUNCTION__ . '() <pre>' . $exception->getTraceAsString() . '</pre>',
     NULL, WATCHDOG_ERROR
  );
}

/**
 * Implements hook_libraries_info().
 */
function shelter_base_libraries_info() {
  $libraries['jcarousel'] = array(
    'name' => 'jQuery Carousel',
    'vendor url' => 'http://sorgalla.com/jcarousel/',
    'download url' => 'https://github.com/jsor/jcarousel',
    'version arguments' => array(
      'file' => 'jcarousel-min.js',
      'pattern' => '/jCarousel - v(\d+\.+\d.+\d+)/',
      'lines' => 4,
      'cols' => 100,
    ),
    'files' => array(
      'js' => array(
        'jcarousel-min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_preprocess_page().
 */
function shelter_base_preprocess_page(&$variables) {
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'shelter_base') . '/css/admin-tweaks.css');
    drupal_add_js(drupal_get_path('module', 'shelter_base') . '/javascripts/admin-tweaks.js');
  }
}

/**
 * Gets a set of node ids and returns them sorted by the field_sorting_weight.
 */
function shelter_base_sort_nids_by_weight($nids, $sort_order = 'ASC') {
  if (!$nids) {
    return array();
  }

  $sorting_query = new EntityFieldQuery();
  $result_sorted = $sorting_query->entityCondition('entity_type', 'node')
    ->propertyCondition('nid', $nids, 'IN')
    ->fieldOrderBy('field_sorting_weight', 'value', $sort_order)
    ->execute();

  return array_keys($result_sorted['node']);
}

function shelter_base_remove_duplicate_region_links() {
  $menu = menu_tree_all_data('menu-regions');

  // Recursive function to delete duplicates.
  $function = function(&$items) use (&$function) {
    $temp = array();
    $to_delete = array();
    foreach ($items as $key => $item) {
      $path = $item['link']['link_path'];
      $has_children = $item['link']['has_children'];
      $mlid = $item['link']['mlid'];
      if (!isset($temp[$path])) {
        $temp[$path] = array($mlid, $has_children);
      }
      elseif ($temp[$path][1] && !$has_children) {
        $to_delete[] = $mlid;
      }
      elseif (!$temp[$path][1] && $has_children) {
        $to_delete[] = $temp[$path][0];
        $temp[$path] = array($mlid, $has_children);
      }
      elseif (!$temp[$path][1] && !$has_children) {
        $to_delete[] = $mlid;
      }

      if ($has_children) {
        $function($item['below']);
      }
    }
    foreach ($to_delete as $mlid) {
      menu_link_delete($mlid);
    }
  };

  $function($menu);
}


/**
 * Find the number of groups that a user is a member of.
 *
 * @param string $uid
 *   The uid of the user.
 *
 * @return string|bool
 *   The number of groups, or FALSE if there was an error.
 */
function shelter_base_get_group_count_for_user($uid) {
  $count = &drupal_static(__FUNCTION__);

  if (!isset($count)) {
    $count = db_query("SELECT COUNT(gid) FROM {og_membership} WHERE entity_type = 'user' AND group_type = 'node' AND etid = :uid", array(':uid' => $uid))->fetchField();
  }
  return $count;
}

function shelter_base_is_prod() {
  $regex = '/^https?:\/\/(www\.)?sheltercluster\.org\b/'; // if this matches then it's production
  global $base_url;
  $is_prod = preg_match($regex, $base_url);
  return $is_prod;
}
