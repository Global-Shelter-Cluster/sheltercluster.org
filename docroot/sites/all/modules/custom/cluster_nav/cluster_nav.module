<?php
/**
 * @file
 * Handles all functionality related to navigation.
 */

include_once 'cluster_nav.theme.inc';

/**
 * Implements hook_menu().
 */
function cluster_nav_menu() {
  $items = array(
    'current-operations' => array(
      'menu_name' => 'main-menu',
      'title' => 'Current operations',
      'page callback' => '_cluster_nav_paged_teaser_list',
      'page arguments' => array('response'),
      'access arguments' => array('access content'),
    ),
    'regions-countries' => array(
      'menu_name' => 'main-menu',
      'title' => 'Regions / Countries',
      'page callback' => '_cluster_nav_paged_teaser_list',
      'page arguments' => array('geographic_region'),
      'access arguments' => array('access content'),
    ),
    'communities-of-practice' => array(
      'menu_name' => 'main-menu',
      'title' => 'Communities of practice',
      'page callback' => '_cluster_nav_paged_teaser_list',
      'page arguments' => array('community_of_practice'),
      'access arguments' => array('access content'),
    ),
  );

  return $items;
}

/**
 * Page callback for main menu items.
 * @param $bundle
 *  An node entity bundle name.
 * @return
 *  Paged node teaser render array.
 */
function _cluster_nav_paged_teaser_list($bundle) {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->pager(10)
    ->execute();

  if (! isset($results['node'])) {
    $content = array(
      '#markup' => t('No content for the moment.'),
    ); 
  }
  else {
    $content = node_view_multiple(node_load_multiple(array_keys($results['node'])));
  }
  return array(
    'content' => $content,
    'pager' => array(
      '#markup' => theme('pager'),
      '#weight' => 10
    )
  );
}

/**
 *  Implements hook_preprocess_page().
 */
function cluster_nav_preprocess_page(&$variables) {
  // Add the main menu to every page.
  $variables['main_nav'] = menu_tree_output(menu_tree_all_data('main-menu'));

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
  }
  else {
    return;
  }

  $group_page_content = FALSE;
  $variables['dashboard_menu'] = FALSE;
  $variables['contextual_navigation'] = FALSE;

  // If viewing a group node page, use it.
  if (og_is_group('node', $node)) {
    $group_page_content = GroupDisplayProvider::getDisplayProvider($node);
  }

  // If viewing a discussion node page, use the associated group node.
  elseif ($node->type == 'discussion') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $group = $wrapper->og_group_ref->value();
    if (count($group) > 0) {
      $group_page_content = GroupDisplayProvider::getDisplayProvider($group[0]);
    }
  }

  if ($group_page_content) {
    $variables['dashboard_menu'] = $group_page_content->getDashboardMenu();
    $variables['contextual_navigation'] = $group_page_content->getContextualNavigation();
  }
}
