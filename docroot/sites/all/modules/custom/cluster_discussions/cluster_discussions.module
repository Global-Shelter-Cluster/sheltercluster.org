<?php
/**
 * @file
 * Code for the cluster_discussions feature.
 */

include_once 'cluster_discussions.features.inc';
include_once 'cluster_discussions.pathauto.inc';

const CLUSTER_DISCUSSIONS_PER_PAGE = 30;

/** How many previous comments to show on emails */
const CLUSTER_DISCUSSIONS_PREV_COMMENT_LIMIT_ON_EMAILS = 2;

/** Character length of previous comments in emails */
const CLUSTER_DISCUSSIONS_PREV_COMMENT_SUMMARY_SIZE = 200;

/**
 *  Implements hook_menu().
 */
function cluster_discussions_menu() {
  $items['node/%/discussions'] = array(
    'title' => 'Discussions',
    'title callback' => '_cluster_discussions_title_callback',
    'title arguments' => array(1),
    'page callback' => 'cluster_discussions_all',
    'page arguments' => array(1),
    'access callback' => 'og_is_group',
    'access arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/moderate'] = array(
    'title' => 'Moderate',
    'page callback' => 'cluster_discussions_moderate',
    'page arguments' => array(1),
    'access callback' => '_cluster_discussions_moderate_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

function cluster_discussions_moderate($gid) {
  $discussion_nids = db_query('
  SELECT n.nid
  FROM {node} n
    INNER JOIN {og_membership} o
      ON o.etid = n.nid
        AND o.entity_type = ?
        AND o.group_type = ?
  WHERE n.status = ?
    AND n.type = ?
    AND o.gid = ?
  ORDER BY n.created DESC
  LIMIT 20
  ', [
    'node',
    'node',
    NODE_NOT_PUBLISHED,
    'discussion',
    $gid,
  ])->fetchCol();

  $discussion_header = [t('Date'), t('Discussion'), t('Author'), t('Operations')];
  $discussion_rows = array_map('cluster_discussions_render_discussion_row', $discussion_nids);

  $comment_cids = db_query('
  SELECT c.cid
  FROM {comment} c
    INNER JOIN {node} n
      ON c.nid = n.nid
    INNER JOIN {og_membership} o
      ON o.etid = n.nid
        AND o.entity_type = ?
        AND o.group_type = ?
  WHERE c.status = ?
    AND n.type = ?
    AND n.status = ?
    AND o.gid = ?
  ORDER BY c.created DESC
  LIMIT 20
  ', [
    'node',
    'node',
    COMMENT_NOT_PUBLISHED,
    'discussion',
    NODE_PUBLISHED,
    $gid,
  ])->fetchCol();

  $comment_header = [t('Date'), t('Comment'), t('Discussion'), t('Author'), t('Operations')];
  $comment_rows = array_map('cluster_discussions_render_comment_row', $comment_cids);

  return [
    [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Moderate discussions'),
    ],
    [
      '#theme' => 'table',
      '#header' => $discussion_header,
      '#rows' => $discussion_rows,
      '#caption' => '<h4>' . t('Discussions') . '</h4>',
      '#empty' => t('No discussions found that need moderation.'),
    ],
    ['#markup' => '<br/>'],
    [
      '#theme' => 'table',
      '#header' => $comment_header,
      '#rows' => $comment_rows,
      '#caption' => '<h4>' . t('Comments') . '</h4>',
      '#empty' => t('No comments found that need moderation.'),
    ],
  ];
}

function cluster_discussions_render_discussion_row($nid) {
  $discussion = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $discussion);

  $date = format_date($discussion->created);

  $title_and_body = l($discussion->title, 'node/' . $discussion->nid);
  $title_and_body .= '<br/>';
  $body = $wrapper->body->value();
  $title_and_body .= text_summary($body['safe_value'], $body['format'], 100);

  $user = user_load($discussion->uid);
  $author = l($user->name, 'user/'.$user->uid);
  $author .= '<br/>';
  $time_diff = REQUEST_TIME - $user->created;
  $author .= t('(registered %time ago)', ['%time' => format_interval($time_diff, 1)]);

  $publish_path = 'node/' . $discussion->nid . '/moderation/' . $discussion->vid . '/change-state/published';
  $delete_path = 'node/' . $discussion->nid . '/delete';
  $publish_options = [
    'query' => [
      'destination' => current_path(),
      'token' => drupal_get_token("{$discussion->nid}:{$discussion->vid}:published"),
    ],
  ];
  $delete_options = [
    'query' => [
      'destination' => current_path(),
    ],
  ];
  $operations = [
    l('publish', $publish_path, $publish_options),
    l('delete', $delete_path, $delete_options),
  ];

  return [
    $date,
    $title_and_body,
    $author,
    join('<br/>', $operations),
  ];
}

function cluster_discussions_render_comment_row($cid) {
  $comment = comment_load($cid);
  $wrapper = entity_metadata_wrapper('comment', $comment);

  $discussion = node_load($comment->nid);
  $discussion_wrapper = entity_metadata_wrapper('node', $discussion);

  $date = format_date($comment->created);

  $body_value = $wrapper->comment_body->value();
  $body_summary = text_summary($body_value['safe_value'], $body_value['format'], 100);
  $body = l($body_summary, 'comment/' . $comment->cid, [
    'html' => TRUE,
  ]);

  $discussion_title = l($discussion->title, 'node/' . $discussion->nid, [
    'fragment' => 'comment-' . $comment->cid,
  ]);

  $user = user_load($comment->uid);
  $author = l($user->name, 'user/' . $user->uid);
  $author .= '<br/>';
  $time_diff = REQUEST_TIME - $user->created;
  $author .= t('(registered %time ago)', ['%time' => format_interval($time_diff, 1)]);

  $publish_path = 'comment/' . $comment->cid . '/approve';
  $delete_path = 'comment/' . $comment->cid . '/delete';
  $publish_options = [
    'query' => [
      'destination' => current_path(),
      'token' => drupal_get_token('comment/' . $comment->cid . '/approve'),
    ],
  ];
  $delete_options = [
    'query' => [
      'destination' => current_path(),
    ],
  ];
  $operations = [
    l('publish', $publish_path, $publish_options),
    l('delete', $delete_path, $delete_options),
  ];

  return [
    $date,
    $body,
    $discussion_title,
    $author,
    join('<br/>', $operations),
  ];
}

function _cluster_discussions_moderate_access($gid) {
  global $user;

  $group = node_load($gid);
  if (!og_is_group('node', $group))
    return FALSE;

  // Site-wide admins get access to all discussion moderation pages.
  if (in_array('administrator', $user->roles))
    return TRUE;

  $user_roles_in_group = og_get_user_roles('node', $gid, $user->uid, FALSE);
  return in_array('administrator member', $user_roles_in_group);
}

/**
 * Menu title callback.
 */
function _cluster_discussions_title_callback($nid) {
  global $language;
  $title = t('Discussions');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilingual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid), array('langcode' => LANGUAGE_NONE));
    return $wrapper->label();
  }
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'cluster_discussions',
      'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
       NULL,
       WATCHDOG_ERROR
    );
  }
  return $title;
}

/**
 * Page callback, shows a group's discussions using Search API.
 * @param $nid
 * @return Render array
 */
function cluster_discussions_all($nid) {
  global $language;
  $query = search_api_query('default_node_index', array(
    'languages' => array($language->language),
  ));

  $filter = $query->createFilter();
  $filter->condition('og_group_ref', $nid);
  $filter->condition('type', 'discussion');
  $query->filter($filter);

  $query->sort('changed', 'DESC');

  $offset = pager_find_page() * CLUSTER_DISCUSSIONS_PER_PAGE;
  $query->range($offset, CLUSTER_DISCUSSIONS_PER_PAGE);

  $result = $query->execute();
  pager_default_initialize($result['result count'], CLUSTER_DISCUSSIONS_PER_PAGE);
  if (! $result['results']) {
    $content = array(
      '#markup' => t('No content for the moment.'),
    );
  }
  else {
    $content = node_view_multiple(node_load_multiple(array_keys($result['results'])));
  }
  $ret['content'] = $content;
  $ret['pager'] = array(
    '#theme' => 'pager',
  );

  return $ret;
}

function cluster_discussions_is_group_discussions_page() {
  $router_item = menu_get_item(current_path());

  if ($router_item && isset($router_item['path']))
    return $router_item['path'] === 'node/%/discussions';

  return FALSE;
}

/**
 * Implements hook_theme().
 */
function cluster_discussions_theme() {
  return array(
    'cluster_discussions_all' => array(
      'file' => 'theme/cluster_discussions.theme.inc',
      'render element' => 'element',
    ),
    'cluster_discussions_teaser' => array(
      'file' => 'theme/cluster_discussions.theme.inc',
      'render element' => 'element',
    ),
    'cluster_discussions_email' => [
      'template' => 'discussion-email',
      'variables' => [
        'langcode' => '',
        'logo' => '',
        'date' => '',
        'body' => '', // html string
        'group' => [],
        'node' => [],
        'is_moderate' => FALSE,
      ],
      'path' => drupal_get_path('module', 'cluster_discussions') . '/templates',
    ],
    'cluster_discussions_email_comment' => [
      'template' => 'comment-email',
      'variables' => [
        'langcode' => '',
        'logo' => '',
        'date' => '',
        'body' => '', // html string
        'group' => [],
        'node' => [],
        'comment' => [],
        'previous' => [],
        'is_moderate' => FALSE,
      ],
      'path' => drupal_get_path('module', 'cluster_discussions') . '/templates',
    ],
    'cluster_discussions_email_anon' => [
      'template' => 'discussion-anon-email',
      'variables' => [
        'langcode' => '',
        'logo' => '',
        'date' => '',
        'body' => '', // html string
        'group' => [],
        'node' => [],
        'subscriber_email' => '',
      ],
      'path' => drupal_get_path('module', 'cluster_discussions') . '/templates',
    ],
    'cluster_discussions_email_comment_anon' => [
      'template' => 'comment-anon-email',
      'variables' => [
        'langcode' => '',
        'logo' => '',
        'date' => '',
        'body' => '', // html string
        'group' => [],
        'node' => [],
        'comment' => [],
        'previous' => [],
        'subscriber_email' => '',
      ],
      'path' => drupal_get_path('module', 'cluster_discussions') . '/templates',
    ],
  );
}

/**
 * Implements hook_node_view_alter().
 */
function cluster_discussions_node_view_alter(&$build) {
  if ($build['#node']->type != 'discussion') {
    return;
  }
  switch ($build['#view_mode']) {
    case 'teaser':
      $build['#theme'] = 'cluster_discussions_teaser';
      $build['#is_list_page'] = cluster_discussions_is_group_discussions_page();
      if (!$build['#node']->comment_count) {
        $build['#replies'] = t('no replies');
      }
      else {
        $build['#replies'] = format_plural($build['#node']->comment_count, '1 reply', '@count replies');
      }

      $build['#is_latest'] = FALSE;
      $gid = _cluster_discussion_associated_group($build['#node']->nid);
      if ($gid) {
        $build['#is_latest'] = $build['#node']->nid == _cluster_discussion_get_latest($gid);
      }

      // Author
      $user = user_load($build['#node']->uid);
      $build['#author'] = array(
        'name' => $user->name,
        'path' => 'user/'.$user->uid,
      );
      break;
    default:
      // Do nothing.
  }
}

/**
 * Gets the associated group ID for the given discussion node ID, if any.
 * @param $nid
 * @return int|NULL
 */
function _cluster_discussion_associated_group($nid) {
  return db_select('og_membership', 'g')
    ->fields('g', array('gid'))
    ->condition('g.entity_type', 'node')
    ->condition('g.group_type', 'node')
    ->condition('g.etid', $nid)
    ->execute()->fetchField();
}

/**
 * Get the latest discussion nid for the given group, if any.
 * @param $gid
 * @return int|NULL
 */
function _cluster_discussion_get_latest($gid) {
  if (!og_is_group('node', node_load($gid))) {
    return;
  }

  $query = db_select('og_membership', 'g');

  $query->fields('g', array('etid'));

  $query->join('node', 'n', 'n.nid = g.etid');
  $query->condition('g.entity_type', 'node');

  $query->condition('g.group_type', 'node');
  $query->condition('g.gid', $gid);

  $query->condition('n.type', 'discussion');
  $query->condition('n.status', NODE_PUBLISHED);

  $query->orderBy('g.created', 'DESC');
  $query->range(0, 1);

  return $query->execute()->fetchField();
}

/**
 * Implements hook_comment_insert().
 * Save the node to make its "changed" value update, so that we're able to sort
 * by "last activity".
 */
function cluster_discussions_comment_insert($comment) {
  $node = node_load($comment->nid);
  if ($node->type !== 'discussion')
    return;
  node_save($node);
}

/**
 * Implements hook_mail().
 */
function cluster_discussions_mail($key, &$message, $params) {
  if (!in_array($key, ['discussion', 'comment', 'discussion_anon', 'comment_anon', 'discussion_moderate', 'comment_moderate']))
    throw new Exception("Unknown key: ".$key);

  $is_comment = in_array($key, ['comment', 'comment_anon']);
  $is_anon = in_array($key, ['discussion_anon', 'comment_anon']);
  $is_moderate = in_array($key, ['discussion_moderate', 'comment_moderate']);

  $themes = [
    'discussion'          => 'cluster_discussions_email',
    'discussion_anon'     => 'cluster_discussions_email_anon',
    'discussion_moderate' => 'cluster_discussions_email',
    'comment'             => 'cluster_discussions_email_comment',
    'comment_anon'        => 'cluster_discussions_email_comment_anon',
    'comment_moderate'    => 'cluster_discussions_email_comment',
  ];

  $body = [
    '#theme' => $themes[$key],
    '#logo' => url('sites/all/themes/shelter/assets/svg/replacement/logo-global-shelter-cluster-4x.png', ['absolute' => TRUE]),
    '#langcode' => $params['langcode'],
    '#date' => $params['date'],
    '#body' => $params['body'],
    '#group' => $params['group'],
    '#node' => $params['node'],
  ];

  if ($is_comment) {
    $body['#comment'] = $params['comment'];
    $body['#previous'] = $params['previous'];
  }

  if ($is_anon)
    $body['#subscriber_email'] = $params['subscriber_email'];

  if ($is_moderate)
    $body['#is_moderate'] = TRUE;

//  // E.g. "Ecuador Earthquake 2016 (response)"
//  $group_name = cluster_api_group_notification_title($params['group'], $params['langcode']);
  $group_name = $params['group']->title;

  if ($is_comment)
    $message['subject'] = 'Re: ' . $params['node']->title;
  else
    $message['subject'] = $params['node']->title;
  //  $message['subject'] = $params['node']->title;

//  $message['from_name'] = $is_comment
//    ? $params['comment']->registered_name
//    : $params['node']->name;
  $message['params']['mandrill']['from_name'] = 'Shelter Cluster' . ' — ' . $group_name;

  $message['body'] = [drupal_render($body)];

  $reply_to_address = cluster_email_inbound_address('comment-'.$params['node']->nid);
  $message['headers']['Reply-To'] = $reply_to_address;
}

/**
 * Implements hook_cron().
 */
function cluster_discussions_cron() {
  if (!variable_get('cluster_email_out_discussions', 1))
    return;

  // Email notifications for new discussion nodes

  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'discussion')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_is_sent', 'value', '1', '<>')

    // Just in case, don't send if it's more than a week old
    ->propertyCondition('created', REQUEST_TIME - (7*CLUSTER_API_DAY), '>')

    ->propertyOrderBy('created', 'ASC')

    ->execute();

  $nids = $results && $results['node'] ? array_keys($results['node']) : [];

  foreach (node_load_multiple($nids) as $discussion_node) {
    $discussion_wrapper = entity_metadata_wrapper('node', $discussion_node);

    $discussion_wrapper->field_is_sent->set(1);
    $discussion_wrapper->save();

    $body = $discussion_wrapper->body->value()['safe_value'];
    $discussion_date = $discussion_node->created;

    $all_uids = []; // Unified list of uids for all the groups to which this discussion item belongs.
    $all_subscribers = []; // Unified list of subscriber emails for all the groups to which this discussion item belongs.
    $first_group = NULL;

    foreach ($discussion_wrapper->og_group_ref->value() as $group) {
      if (!og_is_group('node', $group))
        continue; // shouldn't happen
      $manager = GroupContentManager::getInstance($group);
      if (!$manager->isEnabled('discussions'))
        continue;
      $group_wrapper = entity_metadata_wrapper('node', $group);
      if (is_null($first_group))
        $first_group = $group;

      $all_uids = array_unique(array_merge($all_uids, cluster_api_get_followers($manager)));
      if ($group_wrapper->field_enable_email_subscriptions->value())
        $all_subscribers = array_merge($all_subscribers, $group_wrapper->field_subscribers->value());
    }

    // Send emails for anon users (email subscribers)

    foreach ($all_subscribers as $subscriber_email) {
      $langcode = 'en';

      try {
        $params = [
          'node' => $discussion_node,
          'group' => $first_group,
          'date' => $discussion_date,
          'body' => $body,
          'langcode' => $langcode,
          'subscriber_email' => $subscriber_email,
        ];

        drupal_mail('cluster_discussions', 'discussion_anon', $subscriber_email, $langcode, $params);
      } catch (Exception $e) {
        watchdog('cluster_discussions', 'Error sending anon discussion email @nid: @error', [
          '@nid' => $discussion_node->nid,
          '@email' => $subscriber_email,
          '@error' => $e->getMessage(),
        ], WATCHDOG_ERROR);
      }
    }

    // Send normal emails for registered users

    // Don't email the author
    $all_uids = array_values(array_diff($all_uids, [$discussion_node->uid]));

    if (!$all_uids)
      continue;

    foreach (cluster_api_split_users_by_langcode($all_uids) as $langcode => $uids) {
      try {
        $params = [
          'node' => $discussion_node,
          'group' => $first_group,
          'date' => $discussion_date,
          'body' => $body,
          'langcode' => $langcode,
        ];
        $to = _cluster_email_recipients_string($uids);

        drupal_mail('cluster_discussions', 'discussion', $to, $langcode, $params);
      } catch (Exception $e) {
        watchdog('cluster_discussions', 'Error sending discussion email @nid: @error', [
          '@nid' => $discussion_node->nid,
          '@error' => $e->getMessage(),
        ], WATCHDOG_ERROR);
      }
    }
  }

  // Email notifications for new comments on discussions

  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'comment')

  /**
   * This doesn't work, but it's fine as long as we're only using comments
   * mostly for discussion nodes. There's a check below that filters out other
   * comment types.
   */
//    ->propertyCondition('node_type', 'comment_node_discussion')

    ->propertyCondition('status', COMMENT_PUBLISHED)
    ->propertyCondition('is_sent', 1, '<>') // from the cluster_comment module

    // Just in case, don't send if it's more than a week old
    ->propertyCondition('created', REQUEST_TIME - (7*CLUSTER_API_DAY), '>')

    ->propertyOrderBy('created', 'ASC')

    ->execute();

  $cids = $results && $results['comment'] ? array_keys($results['comment']) : [];

  foreach (comment_load_multiple($cids) as $comment) {
    if ($comment->node_type !== 'comment_node_discussion')
      continue;
    $discussion_node = node_load($comment->nid);
    if ($discussion_node->type !== 'discussion' || $discussion_node->status != NODE_PUBLISHED)
      continue;

    $comment_wrapper = entity_metadata_wrapper('comment', $comment);
    $discussion_wrapper = entity_metadata_wrapper('node', $discussion_node);

    $comment->is_sent = 1;
    comment_save($comment);

    $body = $comment_wrapper->comment_body->value()['safe_value'];
    $comment_date = $comment->created;

    $previous = cluster_discussions_get_previous_email_data($comment, $discussion_node);

    $all_uids = []; // Unified list of uids for all the groups to which this discussion item belongs.
    $all_subscribers = []; // Unified list of subscriber emails for all the groups to which this discussion item belongs.
    $first_group = NULL;

    foreach ($discussion_wrapper->og_group_ref->value() as $group) {
      if (!og_is_group('node', $group))
        continue; // shouldn't happen
      $manager = GroupContentManager::getInstance($group);
      if (!$manager->isEnabled('discussions'))
        continue;
      $group_wrapper = entity_metadata_wrapper('node', $group);
      if (is_null($first_group))
        $first_group = $group;

      $all_uids = array_unique(array_merge($all_uids, cluster_api_get_followers($manager)));
      if ($group_wrapper->field_enable_email_subscriptions->value())
        $all_subscribers = array_merge($all_subscribers, $group_wrapper->field_subscribers->value());
    }

    // Send emails for anon users (email subscribers)

    foreach ($all_subscribers as $subscriber_email) {
      $langcode = 'en';

      try {
        $params = [
          'comment' => $comment,
          'previous' => $previous,
          'node' => $discussion_node,
          'group' => $first_group,
          'date' => $comment_date,
          'body' => $body,
          'langcode' => $langcode,
          'subscriber_email' => $subscriber_email,
        ];

        drupal_mail('cluster_discussions', 'comment_anon', $subscriber_email, $langcode, $params);
      } catch (Exception $e) {
        watchdog('cluster_discussions', 'Error sending anon discussion comment email @nid: @error', [
          '@cid' => $comment->cid,
          '@email' => $subscriber_email,
          '@error' => $e->getMessage(),
        ], WATCHDOG_ERROR);
      }
    }

    // Send normal emails for registered users

    // Don't email the author
    $all_uids = array_values(array_diff($all_uids, [$comment->uid]));

    if (!$all_uids)
      continue;

    foreach (cluster_api_split_users_by_langcode($all_uids) as $langcode => $uids) {
      try {
        $params = [
          'comment' => $comment,
          'previous' => $previous,
          'node' => $discussion_node,
          'group' => $first_group,
          'date' => $comment_date,
          'body' => $body,
          'langcode' => $langcode,
        ];
        $to = _cluster_email_recipients_string($uids);

        drupal_mail('cluster_discussions', 'comment', $to, $langcode, $params);
      } catch (Exception $e) {
        watchdog('cluster_discussions', 'Error sending discussion comment email @nid: @error', [
          '@cid' => $comment->cid,
          '@error' => $e->getMessage(),
        ], WATCHDOG_ERROR);
      }
    }
  }
}

function cluster_discussions_get_previous_comments($node, $comment, $limit = 2) {
  $query = db_select('comment', 'c')->extend('PagerDefault');
  $query->addField('c', 'cid');
  $query
    ->condition('c.nid', $node->nid)
    ->condition('c.cid', $comment->cid, '<')
    ->condition('c.status', COMMENT_PUBLISHED)
    ->addTag('node_access')
    ->addTag('comment_filter')
    ->addMetaData('node', $node)
    ->limit($limit)
    ->orderBy('c.cid', 'DESC'); // this only works with non-threaded comments

  $cids = $query->execute()->fetchCol();

  return comment_load_multiple($cids);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cluster_discussions_form_comment_form_alter(&$form, &$form_state) {
  $form['author']['#access'] = FALSE;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cluster_discussions_preprocess_comment(&$variables) {
  // These lines make the date show as "time ago", but this doesn't work for anonymous users because of page caching.
//  $created = new DateObject($variables['comment']->created);
//  $variables['created'] = theme('date_time_ago', ['start_date' => $created, 'end_date' => $created]);

  if (!isset($variables['content']['links']) || !isset($variables['content']['links']['comment']))
    return;

  // Never show "reply" link
  if (isset($variables['content']['links']['comment']['#links']['comment-reply']))
    unset($variables['content']['links']['comment']['#links']['comment-reply']);

  // Change "Edit" and "Delete" links to icons
  if (isset($variables['content']['links']['comment']['#links']['comment-delete']))
    $variables['content']['links']['comment']['#links']['comment-delete']['title'] = '<i class="fa fa-trash" title="'.t('Delete').'"></i>';

  if (isset($variables['content']['links']['comment']['#links']['comment-edit']))
    $variables['content']['links']['comment']['#links']['comment-edit']['title'] = '<i class="fa fa-edit" title="'.t('Edit').'"></i>';
}

/**
 * Implements hook_cluster_email_inbound_handle().
 */
function cluster_discussions_cluster_email_inbound_handle($name, $message) {
  $prefix_discussion = 'discussion-';
  $prefix_comment = 'comment-';
  if (
    substr($name, 0, strlen($prefix_discussion)) !== $prefix_discussion
    && substr($name, 0, strlen($prefix_comment)) !== $prefix_comment
  ) {
    // This is an optimization to return quickly without expensive regex operations.
    return;
  }

  if (preg_match('/^' . preg_quote($prefix_discussion) . '([a-z0-9\-]+)$/', $name, $matches)) {
    _cluster_discussions_inbound_discussion($matches[1], $message);
  }
  elseif (preg_match('/^' . preg_quote($prefix_comment) . '(\d+)$/', $name, $matches)) {
    _cluster_discussions_inbound_comment($matches[1], $message);
  }
}

/**
 * Add a new discussion to the given group (from an inbound email).
 *
 * @param string $group_email_identifier
 * @param array $message
 */
function _cluster_discussions_inbound_discussion($group_email_identifier, $message) {
  $group = cluster_og_get_group_from_email_identifier($group_email_identifier);
  if (!$group) {
    watchdog('cluster_discussions', 'Could not find group for email identifier: @id', [
      '@id' => $group_email_identifier,
    ], WATCHDOG_WARNING);

    return;
  }

  $values = [
    'type' => 'discussion',
    'created' => $message['ts'],
    'status' => cluster_user_is_trusted($user) ? NODE_PUBLISHED : NODE_NOT_PUBLISHED,
    'title' => trim($message['subject']),
  ];

  $user = NULL;
  $language = 'en';
  if (isset($message['uid']) && $user = user_load($message['uid'])) {
    $values['uid'] = $user->uid;

    $language = $user->language;
    $values['language'] = $language;
  }

  if (!$values['title']) {
    $values['title'] = t('New discussion', [], ['langcode' => $language]);
  }

  $discussion = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $discussion);

  if (isset($message['html'])) {
    $wrapper->body->set([
      'value' => $message['html'],
      'format' => 'filtered_html'
    ]);
  }
  else {
    $wrapper->body->set([
      'value' => $message['text'],
      'format' => 'plain_text'
    ]);
  }

  $wrapper->og_group_ref->set([$group]);

  $wrapper->save();

  watchdog('cluster_discussions', 'Created discussion @nid on group @gid from inbound email: @title', [
    '@gid' => $group_nid,
    '@nid' => $wrapper->nid->value(),
    '@title' => $values['title'],
  ]);
}

/**
 * Add a new comment to a discussion (from an inbound email).
 *
 * @param int $discussion_nid
 * @param array $message
 */
function _cluster_discussions_inbound_comment($discussion_nid, $message) {
  $discussion = node_load($discussion_nid);
  if (!$discussion || $discussion->type !== 'discussion') {
    return;
  }

  $values = [
    'created' => $message['ts'],
    'nid' => $discussion->nid,
    'status' => COMMENT_PUBLISHED,
    'node_type' => 'comment_node_discussion',
  ];

  if (isset($message['html'])) {
    $values['subject'] = text_summary(trim(strip_tags($message['html'])), 'plain_text', 30);
  }
  else {
    $values['subject'] = text_summary(trim($message['text']), 'plain_text', 30);
  }
  $values['subject'] = substr($values['subject'], 0, 55); // hard limit (table field limit is 64)

  $user = NULL;
  if (isset($message['uid']) && $user = user_load($message['uid'])) {
    $values['uid'] = $user->uid;
  }

  $comment = entity_create('comment', $values);
  $wrapper = entity_metadata_wrapper('comment', $comment);

  if (isset($message['html'])) {
    $wrapper->comment_body->set([
      'value' => $message['html'],
      'format' => 'filtered_html'
    ]);
  }
  else {
    $wrapper->comment_body->set([
      'value' => $message['text'],
      'format' => 'plain_text'
    ]);
  }

  $wrapper->save();

  watchdog('cluster_discussions', 'Created comment @cid on discussion @nid from inbound email', [
    '@cid' => $wrapper->cid->value(),
    '@nid' => $discussion->nid,
  ]);
}

/**
 * Implements hook_node_validate().
 */
function cluster_discussions_node_validate($node, $form, &$form_state) {
  if ($node->type !== 'discussion') {
    return;
  }

  if (
    !isset($form_state['values']['og_group_ref'])
    || !isset($form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id'])
  )
    return;

  foreach ($form_state['values']['og_group_ref'][LANGUAGE_NONE] as $item) {
    $group = node_load($item['target_id']);
    if (!og_is_group('node', $group)) {
      continue; // shouldn't happen
    }
    $manager = GroupContentManager::getInstance($group);
    if (!$manager->isEnabled('discussions')) {
      form_set_error('og_group_ref', t('Discussions are disabled for @group.', [
        '@group' => $group->title,
      ]));
      return;
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Publish discussion immediately only if this is a trusted user.
 * @see cluster_user_is_trusted()
 */
function cluster_discussions_node_presave($node) {
  if ($node->type !== 'discussion' || !$node->is_new)
    return;

  $author = user_load($node->uid);
  if (!$author)
    return;

  $is_trusted = cluster_user_is_trusted($author);
  $node->status = $is_trusted ? NODE_PUBLISHED : NODE_NOT_PUBLISHED;

  global $user;
  if ($user->uid == $author->uid && !$is_trusted) {
    drupal_set_message(t('Your discussion will be reviewed by an administrator before being published to the website.'), 'warning');

    $wrapper = entity_metadata_wrapper('node', $node);
    $body = $wrapper->body->value()['value'];

    // Send an email about it to the node's groups admin(s), if any, right away
    foreach (cluster_og_gids_from_content_node($node) as $gid) {
      $group = node_load($gid);
      if (!$group || !og_is_group('node', $group))
        continue;

      $group_admin_uids = cluster_og_group_admins_uids_by_gid($gid);
      foreach (cluster_api_split_users_by_langcode($group_admin_uids) as $langcode => $uids) {
        try {
          $params = [
            'node' => $node,
            'group' => $group,
            'date' => $node->created,
            'body' => $body,
            'langcode' => $langcode,
          ];
          $to = _cluster_email_recipients_string($uids);

          drupal_mail('cluster_discussions', 'discussion_moderate', $to, $langcode, $params);
        } catch (Exception $e) {
          watchdog('cluster_discussions', 'Error sending moderate discussion email @nid: @error', [
            '@nid' => $node->nid,
            '@error' => $e->getMessage(),
          ], WATCHDOG_ERROR);
        }
      }
    }
  }
}

function cluster_discussions_get_previous_email_data($comment, $discussion_node) {
  $discussion_wrapper = entity_metadata_wrapper('node', $discussion_node);
  $previous = [];

  $previous_comments = cluster_discussions_get_previous_comments($discussion_node, $comment, CLUSTER_DISCUSSIONS_PREV_COMMENT_LIMIT_ON_EMAILS);
  foreach ($previous_comments as $previous_comment) {
    $previous_wrapper = entity_metadata_wrapper('comment', $previous_comment);
    $body_value = $previous_wrapper->comment_body->value();
    $previous[] = [
      'body' => text_summary($body_value['safe_value'], $body_value['format'], CLUSTER_DISCUSSIONS_PREV_COMMENT_SUMMARY_SIZE),
      'date' => $previous_comment->created,
      'author' => $previous_comment->registered_name,
      'url' => url('node/'.$discussion_node->nid, ['absolute' => TRUE, 'fragment' => 'comment-'.$previous_comment->cid]),
    ];
  }

  if (count($previous) < CLUSTER_DISCUSSIONS_PREV_COMMENT_LIMIT_ON_EMAILS) {
    // Add the discussion itself
    $body_value = $discussion_wrapper->body->value();
    $previous[] = [
      'body' => text_summary($body_value['safe_value'], $body_value['format'], CLUSTER_DISCUSSIONS_PREV_COMMENT_SUMMARY_SIZE),
      'date' => $discussion_node->created,
      'author' => $discussion_node->name,
      'url' => url('node/'.$discussion_node->nid, ['absolute' => TRUE]),
    ];
  }

  return $previous;
}

/**
 * Implements hook_comment_presave().
 * @see cluster_discussions_node_presave()
 */
function cluster_discussions_comment_presave($comment) {
  if ($comment->status == COMMENT_PUBLISHED)
    return;

  $author = user_load($comment->uid);
  if (!$author)
    return;

  $is_trusted = cluster_user_is_trusted($author);
  $comment->status = $is_trusted ? COMMENT_PUBLISHED : COMMENT_NOT_PUBLISHED;

  if (!$is_trusted) {
    // Send an email about it to the group admin(s), if any, right away

    $node = node_load($comment->nid);
    if (!$node)
      return;
    $comment_wrapper = entity_metadata_wrapper('comment', $comment);

    $body = $comment_wrapper->comment_body->value()['value'];

    // Send an email about it to the node's groups admin(s), if any, right away
    foreach (cluster_og_gids_from_content_node($node) as $gid) {
      $group = node_load($gid);
      if (!$group || !og_is_group('node', $group))
        continue;

      $group_admin_uids = cluster_og_group_admins_uids_by_gid($gid);
      foreach (cluster_api_split_users_by_langcode($group_admin_uids) as $langcode => $uids) {
        try {
          $params = [
            'comment' => $comment,
            'previous' => cluster_discussions_get_previous_email_data($comment, $node),
            'node' => $node,
            'group' => $group,
            'date' => $comment->created,
            'body' => $body,
            'langcode' => $langcode,
          ];
          $to = _cluster_email_recipients_string($uids);

          drupal_mail('cluster_discussions', 'comment_moderate', $to, $langcode, $params);
        } catch (Exception $e) {
          watchdog('cluster_discussions', 'Error sending moderate comment email @nid: @error', [
            '@cid' => $comment->cid,
            '@error' => $e->getMessage(),
          ], WATCHDOG_ERROR);
        }
      }
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Grants view access of unpublished discussions to group admins.
 */
function cluster_discussions_node_access($node, $op, $account) {
  if ($node->type !== 'discussion' || $node->status === NODE_PUBLISHED)
    return NODE_ACCESS_IGNORE;

  $group_refs = field_get_items('node', $node, 'og_group_ref');
  foreach ($group_refs as $group_ref) {
    $gid = $group_ref['target_id'];

    $user_roles_in_group = og_get_user_roles('node', $gid, $account->uid, FALSE);
    if (in_array('administrator member', $user_roles_in_group))
      return NODE_ACCESS_ALLOW;
  }

  return NODE_ACCESS_IGNORE;
}
