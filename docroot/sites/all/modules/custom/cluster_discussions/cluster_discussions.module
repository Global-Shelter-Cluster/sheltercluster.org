<?php
/**
 * @file
 * Code for the cluster_discussions feature.
 */

include_once 'cluster_discussions.features.inc';
include_once 'cluster_discussions.pathauto.inc';

const CLUSTER_DISCUSSIONS_PER_PAGE = 5;

/**
 *  Implements hook_menu().
 */
function cluster_discussions_menu() {
  $items['node/%/discussions'] = array(
    'title' => 'Discussions',
    'title callback' => '_cluster_discussions_title_callback',
    'title arguments' => array(1),
    'page callback' => 'cluster_discussions_all',
    'page arguments' => array(1),
    'access callback' => 'og_is_group',
    'access arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu title callback.
 */
function _cluster_discussions_title_callback($nid) {
  global $language;
  $title = t('Documents');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilinigual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid), array('langcode' => LANGUAGE_NONE));
    return $wrapper->label();
  }
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'cluster_docs',
      'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
       NULL,
       WATCHDOG_ERROR
    );
  }
  return $title;
}

/**
 * Page callback, shows a group's discussions using Search API.
 * @param $nid
 * @return Render array
 */
function cluster_discussions_all($nid) {
  global $language;
  $query = search_api_query('default_node_index', array(
    'languages' => array($language->language),
  ));

  $filter = $query->createFilter();
  $filter->condition('og_group_ref', $nid);
  $filter->condition('type', 'discussion');
  $query->filter($filter);

  $offset = pager_find_page() * CLUSTER_DISCUSSIONS_PER_PAGE;
  $query->range($offset, CLUSTER_DISCUSSIONS_PER_PAGE);

  $result = $query->execute();

  pager_default_initialize($result['result count'], CLUSTER_DISCUSSIONS_PER_PAGE);

  if ($result['results'] === 0) {
    $content = array(
      '#markup' => t('No content for the moment.'),
    ); 
  }
  else {
    $content = node_view_multiple(node_load_multiple(array_keys($result['results'])));
  }
  $ret['content'] = $content;
  $ret['pager'] = array(
    '#theme' => 'pager',
  );

  return $ret;
}

/**
 * Implements hook_theme().
 */
function cluster_discussions_theme() {
  return array(
    'cluster_discussions_all' => array(
      'file' => 'theme/cluster_discussions.theme.inc',
      'render element' => 'element',
    ),
  );
}
