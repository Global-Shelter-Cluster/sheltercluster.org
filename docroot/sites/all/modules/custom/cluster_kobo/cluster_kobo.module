<?php
/**
 * @file
 * Code for the Cluster kobo feature.
 */

include_once 'cluster_kobo.features.inc';

function cluster_kobo_node_validate($node, $form, &$form_state) {
  if ($node->type != 'kobo_form') {
    return;
  }

  $error_message = t('Kobo form URL must be a valid URL starting with "https://ee.humanitarianresponse.info"');

  $field_kobo_form_url = field_get_items('node', $node, 'field_kobo_form_url');
  if (!isset($field_kobo_form_url[0]['value'])) {
    form_set_error('field_kobo_form_url', $error_message);
    return;
  }

  $url_value = $field_kobo_form_url[0]['value'];
  if (strpos($url_value, 'https://ee.humanitarianresponse.info') !== 0) {
    form_set_error('field_kobo_form_url', $error_message);
  }
}

/**
 * Implements hook_menu().
 */
function cluster_kobo_menu() {
  return [
    'kobo' => [
      'page callback' => 'cluster_kobo_callback',
    ],
  ];
}

/**
 * This is what's called by the Kobo hook. It receives a JSON object through
 * php://input.
 */
function cluster_kobo_callback() {
  try {
    $data = json_decode(file_get_contents('php://input'), TRUE);
  } catch (Exception $e) {
    watchdog('cluster_kobo', 'Error on Kobo callback: ' . $e->getMessage(), [], WATCHDOG_ERROR);
    return;
  }

  $module_info = system_get_info('module', 'cluster_kobo');

  $row = [
    'module_version' => $module_info['version'],
    'submission_id' => $data['_uuid'],
    'form_id' => $data['_userform_id'],
    'submission_time' => strtotime($data['_submission_time']),
    'data' => $data,
  ];

  drupal_write_record('kobo_submission', $row);
}
