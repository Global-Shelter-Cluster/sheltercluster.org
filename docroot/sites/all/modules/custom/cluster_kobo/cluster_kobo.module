<?php
/**
 * @file
 * Code for the Cluster kobo feature.
 */

include_once 'cluster_kobo.features.inc';

const CLUSTER_KOBO_ENCRYPTION_KEY = 'cluster_kobo_key';
const CLUSTER_KOBO_ENCRYPTION_IV = 'cluster_kobo_iv';

function cluster_kobo_node_validate($node, $form, &$form_state) {
  if ($node->type != 'kobo_form') {
    return;
  }

  $error_message = t('Kobo form URL must be a valid URL starting with "https://ee.humanitarianresponse.info"');

  $field_kobo_form_url = field_get_items('node', $node, 'field_kobo_form_url');
  if (!isset($field_kobo_form_url[0]['value'])) {
    form_set_error('field_kobo_form_url', $error_message);
    return;
  }

  $url_value = $field_kobo_form_url[0]['value'];
  if (strpos($url_value, 'https://ee.humanitarianresponse.info') !== 0) {
    form_set_error('field_kobo_form_url', $error_message);
  }
}

/**
 * Implements hook_node_insert().
 */
function cluster_kobo_node_insert($node) {
  global $base_url;

  if ($node->type !== 'kobo_form')
    return;

  $argdata = ['nid' => $node->nid];
  $callback_url = $base_url . '/kobo/' . _cluster_kobo_encrypt_decrypt('encrypt', $argdata);
  drupal_set_message('Make sure you configure this URL in the form as a "JSON POST REST service": '.$callback_url, 'warning');
}

/**
 * Implements hook_node_update().
 */
function cluster_kobo_node_update($node) {
  cluster_kobo_node_insert($node);
}

/**
 * Implements hook_menu().
 */
function cluster_kobo_menu() {
  return [
    'kobo/%' => [
      'page callback' => 'cluster_kobo_callback',
      'page arguments' => [1],
      'access callback' => TRUE,
    ],
  ];
}

/**
 * Modified from https://gist.github.com/joashp/a1ae9cb30fa533f4ad94
 */
function _cluster_kobo_encrypt_decrypt($action, $data) {
  $output = false;
  $encrypt_method = "AES-256-CBC";
  $secret_key = CLUSTER_KOBO_ENCRYPTION_KEY;
  $secret_iv = CLUSTER_KOBO_ENCRYPTION_IV;
  $key = hash('sha256', $secret_key);

  $iv = substr(hash('sha256', $secret_iv), 0, 16);
  if ( $action == 'encrypt' ) {
    $output = json_encode($data);
    $output = openssl_encrypt($output, $encrypt_method, $key, 0, $iv);
    $output = base64_encode($output);
  } else if( $action == 'decrypt' ) {
    $output = base64_decode($data);
    $output = openssl_decrypt($output, $encrypt_method, $key, 0, $iv);
    $output = json_decode($output, TRUE);
  }
  return $output;
}

/**
 * This is what's called by the Kobo hook. It receives a JSON object through
 * php://input.
 */
function cluster_kobo_callback($arg = '') {
  $argdata = _cluster_kobo_encrypt_decrypt('decrypt', $arg);
  if (!$argdata || !isset($argdata['nid'])) {
    watchdog('cluster_kobo', 'Error on Kobo callback arg: couldn\'t decrypt/parse (' . $arg . ')', [], WATCHDOG_ERROR);
    return;
  }

  try {
    $data = json_decode(file_get_contents('php://input'), TRUE);
  } catch (Exception $e) {
    watchdog('cluster_kobo', 'Error on Kobo callback: ' . $e->getMessage(), [], WATCHDOG_ERROR);
    return;
  }

  $module_info = system_get_info('module', 'cluster_kobo');

  $row = [
    'module_version' => $module_info['version'],
    'submission_id' => $data['_uuid'],
    'form_id' => $data['_userform_id'],
    'submission_time' => strtotime($data['_submission_time']),
    'nid' => $argdata['nid'],
    'data' => $data,
  ];

  drupal_write_record('kobo_submission', $row);
}
