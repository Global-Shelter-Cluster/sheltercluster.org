<?php
/**
 * @file
 * Code for the Cluster kobo feature.
 */

include_once 'cluster_kobo.features.inc';

const CLUSTER_KOBO_ENCRYPTION_KEY = 'cluster_kobo_key';
const CLUSTER_KOBO_ENCRYPTION_IV = 'cluster_kobo_iv';
const CLUSTER_KOBO_DATA_FORMAT_VERSION = 1;

function cluster_kobo_node_validate($node, $form, &$form_state) {
  if ($node->type != 'kobo_form') {
    return;
  }

  $error_message = t('Kobo form URL must be a valid URL starting with "https://ee.humanitarianresponse.info"');

  $field_kobo_form_url = field_get_items('node', $node, 'field_kobo_form_url');
  if (!isset($field_kobo_form_url[0]['value'])) {
    form_set_error('field_kobo_form_url', $error_message);
    return;
  }

  $url_value = $field_kobo_form_url[0]['value'];
  if (strpos($url_value, 'https://ee.humanitarianresponse.info') !== 0) {
    form_set_error('field_kobo_form_url', $error_message);
  }
}

/**
 * Implements hook_node_insert().
 */
function cluster_kobo_node_insert($node) {
  global $base_url;

  if ($node->type !== 'kobo_form')
    return;

  $argdata = ['nid' => $node->nid];
  $callback_url = $base_url . '/kobo/' . _cluster_kobo_encrypt_decrypt('encrypt', $argdata);
  drupal_set_message('Make sure you configure this URL in the form as a "JSON POST REST service": ' . $callback_url, 'warning');
}

/**
 * Implements hook_node_update().
 */
function cluster_kobo_node_update($node) {
  cluster_kobo_node_insert($node);
}

/**
 * Implements hook_menu().
 */
function cluster_kobo_menu() {
  return [
    'kobo/%' => [
      'page callback' => 'cluster_kobo_callback',
      'page arguments' => [1],
      'access callback' => TRUE,
    ],
    'node/%node/kobo-submissions' => [
      'title' => 'Form submissions',
      'page callback' => 'cluster_kobo_submissions',
      'page arguments' => [1],
      'access callback' => 'cluster_kobo_submissions_access',
      'access arguments' => [1],
      'weight' => 20,
      'type' => MENU_LOCAL_TASK,
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function cluster_kobo_preprocess_node(&$variables) {
  if ($variables['type'] !== 'kobo_form' || $variables['view_mode'] !== 'full')
    return;

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  $url = $wrapper->field_kobo_form_url->value();
  if (!$url)
    return;

  $variables['content']['kobo_form'] = [
    '#theme' => 'html_tag',
    '#tag' => 'iframe',
    '#attributes' => [
      'src' => $url,
      'style' => 'width: 100%; min-height: 800px; border: 0;',
    ],
    '#weight' => 10,
  ];
}

function cluster_kobo_submissions_access($node) {
  if ($node->type !== 'kobo_form')
    return FALSE;

  $wrapper = entity_metadata_wrapper('node', $node);

  if ($wrapper->field_is_public->value())
    return TRUE;

  global $user;
  return $user->uid === $node->uid;
}

/**
 * Gets only the filename, e.g. returns "a.jpg" from "path/to/a.jpg".
 */
function _cluster_kobo_get_filename_from_path($path) {
  return ltrim(substr($path, strrpos($path, '/')), '/');
}

function cluster_kobo_submissions($node) {
  //Initialize header with items you need
  $header = [
    'submission_time' => [
      'data' => 'Submitted',
      'field' => 'submission_time',
      'sort' => 'desc',
    ],
  ];

  $select = db_select('kobo_submission', 'ks');
  $select->extend('PagerDefault')->limit(25);
  $select->extend('TableSort')->orderByHeader($header);
  $select->condition('nid', $node->nid);
  $select->fields('ks', ['submission_time', 'data']);

  $result = $select->execute();

  $tablerows = [];
  foreach ($result as $row) {
    $tablerow = [
      format_date($row->submission_time, 'custom', 'Y-m-d H:i'),
    ];

    $data = json_decode($row->data, TRUE);

    foreach ($data as $key => $value) {
      if (substr($key, 0, 1) === '_')
        continue;

      if (strpos($key, '/') !== FALSE)
        continue;

      if (!isset($header[$key]))
        $header[$key] = [
          'data' => str_replace('_', ' ', $key),
        ];
    }

    foreach ($header as $header_key => $header_data) {
      if ($header_key === 'submission_time')
        continue;

      if (!isset($data[$header_key])) {
        $tablerow[] = '';
        continue;
      }

      $value = $data[$header_key];

      // Is this an attachment? (e.g. an image)
      foreach ((array) $data['_attachments'] as $attachment) {
        $filename = _cluster_kobo_get_filename_from_path($attachment['filename']);
        if (strtolower(trim($filename)) === strtolower(trim($value))) {
          if (isset($attachment['stored_path']))
            $value = l($value, file_create_url($attachment['stored_path']), ['target' => '_blank']);
          else
            $value = l($value, $attachment['download_url'], ['target' => '_blank']);
        }
      }

      $tablerow[] = $value;
    }

    $tablerows[] = $tablerow;
  }

  $output = [
    [
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $tablerows,
      '#empty' => t('No submissions have been recorded for this form yet.'),
    ],
    [
      '#theme' => 'pager',
    ],
  ];

  return $output;
}

/**
 * Modified from https://gist.github.com/joashp/a1ae9cb30fa533f4ad94
 */
function _cluster_kobo_encrypt_decrypt($action, $data) {
  $output = FALSE;
  $encrypt_method = "AES-256-CBC";
  $secret_key = CLUSTER_KOBO_ENCRYPTION_KEY;
  $secret_iv = CLUSTER_KOBO_ENCRYPTION_IV;
  $key = hash('sha256', $secret_key);

  $iv = substr(hash('sha256', $secret_iv), 0, 16);
  if ($action == 'encrypt') {
    $output = json_encode($data);
    $output = openssl_encrypt($output, $encrypt_method, $key, 0, $iv);
    $output = base64_encode($output);
  }
  else if ($action == 'decrypt') {
    $output = base64_decode($data);
    $output = openssl_decrypt($output, $encrypt_method, $key, 0, $iv);
    $output = json_decode($output, TRUE);
  }
  return $output;
}

/**
 * This is what's called by the Kobo hook. It receives a JSON object through
 * php://input.
 */
function cluster_kobo_callback($arg = '') {
  $argdata = _cluster_kobo_encrypt_decrypt('decrypt', $arg);
  if (!$argdata || !isset($argdata['nid'])) {
    watchdog('cluster_kobo', 'Error on Kobo callback arg: couldn\'t decrypt/parse (' . $arg . ')', [], WATCHDOG_ERROR);
    return;
  }

  try {
    $data = json_decode(file_get_contents('php://input'), TRUE);
  } catch (Exception $e) {
    watchdog('cluster_kobo', 'Error on Kobo callback: ' . $e->getMessage(), [], WATCHDOG_ERROR);
    return;
  }

  if (isset($data['_attachments'])) {
    foreach ($data['_attachments'] as &$attachment) {
      $stored_path = _cluster_kobo_download_attachment($attachment);
      if ($stored_path)
        $attachment['stored_path'] = $stored_path;
    }
  }

  $row = [
    'data_format_version' => CLUSTER_KOBO_DATA_FORMAT_VERSION,
    'submission_id' => $data['_uuid'],
    'form_id' => $data['_userform_id'],
    'submission_time' => strtotime($data['_submission_time']),
    'nid' => $argdata['nid'],
    'data' => json_encode($data),
  ];

  drupal_write_record('kobo_submission', $row);
}

/**
 * @param array $attachment
 * @return string|FALSE the path of the stored file (public://...), or FALSE if
 * the file couldn't be downloaded.
 */
function _cluster_kobo_download_attachment($attachment) {
  $path = 'public://'.format_date(time(), 'custom', 'Y/m');
  drupal_mkdir($path, NULL, TRUE);

  $filename = _cluster_kobo_get_filename_from_path($attachment['filename']);

  return system_retrieve_file(
    $attachment['download_url'],
    $path.'/'.$filename, FALSE, FILE_EXISTS_RENAME
  );
}
