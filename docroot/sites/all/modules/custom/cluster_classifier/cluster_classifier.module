<?php

function _cluster_classifier_instance() {
  require_once 'vendor/autoload.php';
  require_once 'src/Classifier.php';
  require_once 'src/DrupalDBStorage.php';

  $instance = &drupal_static(__FUNCTION__);

  if (!isset($instance))
    $instance = new \Cluster\Classifier([
      'search_api_index' => 'documents',
    ]);

  return $instance;
}

/**
 * Implements hook_menu().
 */
function cluster_classifier_menu() {
  $items['admin/config/content/cluster_classifier'] = [
    'title' => 'Classifier',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cluster_classifier_settings'],
    'access arguments' => ['administer search_api'],
    'type' => MENU_NORMAL_ITEM,
  ];
  return $items;
}

function cluster_classifier_settings($form, &$form_state) {
  $form = [];

  $form['test'] = [
    '#type' => 'fieldset',
    '#title' => t('Test classifier for a single document'),
  ];

  $form['test']['nid'] = [
    '#type' => 'textfield',
    '#title' => t('Node ID'),
    '#size' => 5,
    '#default_value' => isset($form_state['values']) ? $form_state['values']['nid'] : '',
  ];

  $form['test']['test'] = [
    '#type' => 'submit',
    '#value' => t('Test'),
    '#submit' => ['cluster_classifier_test'],
  ];

  $form['clear'] = [
    '#type' => 'submit',
    '#value' => t('Clear all data!'),
    '#submit' => ['cluster_classifier_clear'],
  ];

  $form['train'] = [
    '#type' => 'submit',
    '#value' => t('Train (call after clearing all data)'),
    '#submit' => ['cluster_classifier_train'],
  ];

  $classifier = _cluster_classifier_instance();
  $form['stats'] = [
    '#type' => 'fieldset',
    '#title' => t('Stats'),
  ];
  foreach ($classifier->getStorageStats() as $k => $v)
    $form['stats'][$k] = [
      '#markup' => t('<p><strong>@name</strong>: %value</p>', ['@name' => $k, '%value' => $v]),
    ];

  return $form;
}

function cluster_classifier_clear() {
  $classifier = _cluster_classifier_instance();
  $classifier->clear();
  drupal_set_message('All classifier data has been deleted');
}

function cluster_classifier_test($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  if (!$node || $node->type !== 'document') {
    drupal_set_message('Not a document: ' . $nid, 'error');
    return;
  }

  $classifier = _cluster_classifier_instance();
  $tids = $classifier->getTermsForNode($node);
  $terms = taxonomy_term_load_multiple($tids);
  $ret = [];
  foreach ($terms as $term) {
    if (!isset($ret[$term->vocabulary_machine_name]))
      $ret[$term->vocabulary_machine_name] = [];

    $ret[$term->vocabulary_machine_name][$term->tid] = $term->name;
  }
  dpm($ret, 'Terms for document ' . $node->nid . ': ' . $node->title);

  $form_state['rebuild'] = TRUE;
  form_set_value($form['test']['nid'], $nid, $form_state);
}

function cluster_classifier_train() {
  $classifier = _cluster_classifier_instance();
  $count = $classifier->getAllDocumentCount();

  $num_operations = ceil($count / \Cluster\Classifier::QUERY_RESULTS_PER_PAGE);

  $operations = [];
  for ($i = 0; $i < $num_operations; $i++) {
    $operations[] = [
      'cluster_classifier_train_op',
      [$i],
    ];
  }

  batch_set([
    'operations' => $operations,
    'title' => 'Training classifier',
    'progress_message' => t('Processed batch @current out of @total (' . \Cluster\Classifier::QUERY_RESULTS_PER_PAGE . ' documents per batch).'),
  ]);
}

function cluster_classifier_train_op($operation_details, &$context) {
  $classifier = _cluster_classifier_instance();
  $page = $operation_details;

  $classifier->train($page);
}

/**
 * Implements hook_node_insert().
 */
function cluster_classifier_node_insert($node) {
  if ($node->type !== 'document')
    return;

  $classifier = _cluster_classifier_instance();
  $classifier->trainSingleNode($node);
}

/**
 * Implements hook_node_update().
 */
function cluster_classifier_node_update($node) {
  cluster_classifier_node_insert($node);
}
